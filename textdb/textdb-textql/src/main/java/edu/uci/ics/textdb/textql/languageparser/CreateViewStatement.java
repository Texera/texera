package edu.uci.ics.textdb.textql.languageparser;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang3.builder.EqualsBuilder;

import edu.uci.ics.textdb.textql.planbuilder.beans.PassThroughBean;
import edu.uci.ics.textdb.web.request.beans.OperatorBean;
import edu.uci.ics.textdb.web.request.beans.OperatorLinkBean;

/**
 * Container of a parsed "CREATE VIEW ..." statement.
 * 
 * @author Flavio Bayer
 *
 */
public class CreateViewStatement extends Statement {
    
    /**
     * The statement to which the { @code CreateViewStatement } creates an alias for
     * e.g. in "CREATE VIEW v AS SELECT * FROM t"; the view with id 'v' will have the
     * select statement "SELECT *FROM t" as subStatement (in a SlectStatement object)
     */
    public Statement subStatement;
      
    /**
     * Create a { @code CreateViewStatement } with the parameters set to { @code null }
     */
    public CreateViewStatement() {
        this(null, null);
    }
    
    /**
     * Create a { @code CreateViewStatement } with the given parameters
     * @param id The ID of this statement
     * @param subStatement The subStatement of this statement
     */
    public CreateViewStatement(String id, Statement subStatement) {
        super(id);
        this.subStatement = subStatement;
    }
      
    /**
     * Return the ID to which a { @code LinkBean } should be connected in order to connect to the input 
     * of this operator when converted to beans.
     * @return The ID to be used as input of this operator by a { @code LinkBean }.
     */
    public String getInputID(){
        return this.id;
    }

    /**
     * Return the ID to which a { @code LinkBean } should be connected in order to connect to the output
     * of this operator when converted to beans.
     * @return The ID to be used as output of this operator by a { @code LinkBean }.
     */
    public String getOutputID(){
        return this.id;
    }

    /**
     * Return a list of links generated when this statement is converted to beans.
     * The { @code CreateViewStatement } generate no internal links, an empty list is returned.
     * @return The list of link beans generated by this statement.
     */
    public List<OperatorLinkBean> getInternalLinkBeans(){
        return Collections.emptyList();
    }
      
    /**
     * Return a list of operators generated when this statement is converted to beans.
     * The { @code CreateViewStatement } generate a { @code PassThroughBean }.
     * @return The list of operator beans generated by this statement.
     */
    public List<OperatorBean> getInternalOperatorBeans(){
        OperatorBean passThroughOperator = new PassThroughBean(this.id, "PassThrough");
        return Arrays.asList(passThroughOperator);
    }
     
    /**
     * RReturn a list of ID of operators required by this statement (the dependencies of this Statement)
     * when converted to beans.
     * The { @code CreateViewStatement } has only its subStatement as required view.
     * @return A list with the IDs of required Statements
     */
    public List<String> getRequiredViews(){
        return Arrays.asList(subStatement.id);
    }
      
    @Override
    public boolean equals(Object obj) {
        if (obj == null) { return false; }
        if (obj.getClass() != this.getClass()) { return false; }
        CreateViewStatement otherCreateViewStatement = (CreateViewStatement) obj;
        return new EqualsBuilder()
                    .appendSuper(super.equals(otherCreateViewStatement))
                    .append(subStatement, otherCreateViewStatement.subStatement)
                    .isEquals();
    }
    
}