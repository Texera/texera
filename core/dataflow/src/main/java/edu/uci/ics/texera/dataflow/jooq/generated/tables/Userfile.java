/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dataflow.jooq.generated.tables;


import edu.uci.ics.texera.dataflow.jooq.generated.Indexes;
import edu.uci.ics.texera.dataflow.jooq.generated.Keys;
import edu.uci.ics.texera.dataflow.jooq.generated.Texera;
import edu.uci.ics.texera.dataflow.jooq.generated.tables.records.UserfileRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userfile extends TableImpl<UserfileRecord> {

    private static final long serialVersionUID = 127375140;

    /**
     * The reference instance of <code>texera.userfile</code>
     */
    public static final Userfile USERFILE = new Userfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserfileRecord> getRecordType() {
        return UserfileRecord.class;
    }

    /**
     * The column <code>texera.userfile.userID</code>.
     */
    public final TableField<UserfileRecord, UInteger> USERID = createField(DSL.name("userID"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>texera.userfile.fileID</code>.
     */
    public final TableField<UserfileRecord, UInteger> FILEID = createField(DSL.name("fileID"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>texera.userfile.size</code>.
     */
    public final TableField<UserfileRecord, UInteger> SIZE = createField(DSL.name("size"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>texera.userfile.name</code>.
     */
    public final TableField<UserfileRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>texera.userfile.path</code>.
     */
    public final TableField<UserfileRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>texera.userfile.description</code>.
     */
    public final TableField<UserfileRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * Create a <code>texera.userfile</code> table reference
     */
    public Userfile() {
        this(DSL.name("userfile"), null);
    }

    /**
     * Create an aliased <code>texera.userfile</code> table reference
     */
    public Userfile(String alias) {
        this(DSL.name(alias), USERFILE);
    }

    /**
     * Create an aliased <code>texera.userfile</code> table reference
     */
    public Userfile(Name alias) {
        this(alias, USERFILE);
    }

    private Userfile(Name alias, Table<UserfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userfile(Name alias, Table<UserfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Userfile(Table<O> child, ForeignKey<O, UserfileRecord> key) {
        super(child, key, USERFILE);
    }

    @Override
    public Schema getSchema() {
        return Texera.TEXERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERFILE_PRIMARY, Indexes.USERFILE_USERID);
    }

    @Override
    public Identity<UserfileRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_USERFILE;
    }

    @Override
    public UniqueKey<UserfileRecord> getPrimaryKey() {
        return Keys.KEY_USERFILE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserfileRecord>> getKeys() {
        return Arrays.<UniqueKey<UserfileRecord>>asList(Keys.KEY_USERFILE_USERID, Keys.KEY_USERFILE_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserfileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserfileRecord, ?>>asList(Keys.USERFILE_IBFK_1);
    }

    public Useraccount useraccount() {
        return new Useraccount(this, Keys.USERFILE_IBFK_1);
    }

    @Override
    public Userfile as(String alias) {
        return new Userfile(DSL.name(alias), this);
    }

    @Override
    public Userfile as(Name alias) {
        return new Userfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userfile rename(String name) {
        return new Userfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userfile rename(Name name) {
        return new Userfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, UInteger, UInteger, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
