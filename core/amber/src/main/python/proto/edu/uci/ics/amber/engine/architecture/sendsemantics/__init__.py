# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: edu/uci/ics/amber/engine/architecture/sendsemantics/partitionings.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class Partitioning(betterproto.Message):
    one_to_one_partitioning: "OneToOnePartitioning" = betterproto.message_field(
        1, group="sealed_value"
    )
    round_robin_partitioning: "RoundRobinPartitioning" = betterproto.message_field(
        2, group="sealed_value"
    )
    hash_based_shuffle_partitioning: "HashBasedShufflePartitioning" = (
        betterproto.message_field(3, group="sealed_value")
    )


@dataclass(eq=False, repr=False)
class OneToOnePartitioning(betterproto.Message):
    batch_size: int = betterproto.int32_field(1)
    receivers: List["__common__.ActorVirtualIdentity"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RoundRobinPartitioning(betterproto.Message):
    batch_size: int = betterproto.int32_field(1)
    receivers: List["__common__.ActorVirtualIdentity"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HashBasedShufflePartitioning(betterproto.Message):
    batch_size: int = betterproto.int32_field(1)
    receivers: List["__common__.ActorVirtualIdentity"] = betterproto.message_field(2)
    hash_column_indices: List[int] = betterproto.int32_field(3)


from ... import common as __common__
