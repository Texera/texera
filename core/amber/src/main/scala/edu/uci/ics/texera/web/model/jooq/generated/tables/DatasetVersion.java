/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.web.model.jooq.generated.tables;


import edu.uci.ics.texera.web.model.jooq.generated.Indexes;
import edu.uci.ics.texera.web.model.jooq.generated.Keys;
import edu.uci.ics.texera.web.model.jooq.generated.TexeraDb;
import edu.uci.ics.texera.web.model.jooq.generated.tables.records.DatasetVersionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetVersion extends TableImpl<DatasetVersionRecord> {

    private static final long serialVersionUID = 25893167;

    /**
     * The reference instance of <code>texera_db.dataset_version</code>
     */
    public static final DatasetVersion DATASET_VERSION = new DatasetVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetVersionRecord> getRecordType() {
        return DatasetVersionRecord.class;
    }

    /**
     * The column <code>texera_db.dataset_version.dvid</code>.
     */
    public final TableField<DatasetVersionRecord, UInteger> DVID = createField(DSL.name("dvid"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>texera_db.dataset_version.did</code>.
     */
    public final TableField<DatasetVersionRecord, UInteger> DID = createField(DSL.name("did"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>texera_db.dataset_version.creator_uid</code>.
     */
    public final TableField<DatasetVersionRecord, UInteger> CREATOR_UID = createField(DSL.name("creator_uid"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>texera_db.dataset_version.name</code>.
     */
    public final TableField<DatasetVersionRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>texera_db.dataset_version.version_hash</code>.
     */
    public final TableField<DatasetVersionRecord, String> VERSION_HASH = createField(DSL.name("version_hash"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>texera_db.dataset_version.creation_time</code>.
     */
    public final TableField<DatasetVersionRecord, Timestamp> CREATION_TIME = createField(DSL.name("creation_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>texera_db.dataset_version</code> table reference
     */
    public DatasetVersion() {
        this(DSL.name("dataset_version"), null);
    }

    /**
     * Create an aliased <code>texera_db.dataset_version</code> table reference
     */
    public DatasetVersion(String alias) {
        this(DSL.name(alias), DATASET_VERSION);
    }

    /**
     * Create an aliased <code>texera_db.dataset_version</code> table reference
     */
    public DatasetVersion(Name alias) {
        this(alias, DATASET_VERSION);
    }

    private DatasetVersion(Name alias, Table<DatasetVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetVersion(Name alias, Table<DatasetVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DatasetVersion(Table<O> child, ForeignKey<O, DatasetVersionRecord> key) {
        super(child, key, DATASET_VERSION);
    }

    @Override
    public Schema getSchema() {
        return TexeraDb.TEXERA_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATASET_VERSION_DID, Indexes.DATASET_VERSION_IDX_DATASET_VERSION_NAME, Indexes.DATASET_VERSION_PRIMARY);
    }

    @Override
    public Identity<DatasetVersionRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_DATASET_VERSION;
    }

    @Override
    public UniqueKey<DatasetVersionRecord> getPrimaryKey() {
        return Keys.KEY_DATASET_VERSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<DatasetVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetVersionRecord>>asList(Keys.KEY_DATASET_VERSION_PRIMARY);
    }

    @Override
    public List<ForeignKey<DatasetVersionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DatasetVersionRecord, ?>>asList(Keys.DATASET_VERSION_IBFK_1);
    }

    public Dataset dataset() {
        return new Dataset(this, Keys.DATASET_VERSION_IBFK_1);
    }

    @Override
    public DatasetVersion as(String alias) {
        return new DatasetVersion(DSL.name(alias), this);
    }

    @Override
    public DatasetVersion as(Name alias) {
        return new DatasetVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetVersion rename(String name) {
        return new DatasetVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetVersion rename(Name name) {
        return new DatasetVersion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, UInteger, UInteger, String, String, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
