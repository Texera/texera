/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.web.model.jooq.generated.tables;


import edu.uci.ics.texera.web.model.jooq.generated.Indexes;
import edu.uci.ics.texera.web.model.jooq.generated.Keys;
import edu.uci.ics.texera.web.model.jooq.generated.TexeraDb;
import edu.uci.ics.texera.web.model.jooq.generated.tables.records.TelemetryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Telemetry extends TableImpl<TelemetryRecord> {

    private static final long serialVersionUID = 219860592;

    /**
     * The reference instance of <code>texera_db.telemetry</code>
     */
    public static final Telemetry TELEMETRY = new Telemetry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TelemetryRecord> getRecordType() {
        return TelemetryRecord.class;
    }

    /**
     * The column <code>texera_db.telemetry.workflow_id</code>.
     */
    public final TableField<TelemetryRecord, UInteger> WORKFLOW_ID = createField(DSL.name("workflow_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>texera_db.telemetry.execution_id</code>.
     */
    public final TableField<TelemetryRecord, UInteger> EXECUTION_ID = createField(DSL.name("execution_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>texera_db.telemetry.operator_id</code>.
     */
    public final TableField<TelemetryRecord, String> OPERATOR_ID = createField(DSL.name("operator_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>texera_db.telemetry.time</code>.
     */
    public final TableField<TelemetryRecord, Timestamp> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(6)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>texera_db.telemetry.input_tuple_cnt</code>.
     */
    public final TableField<TelemetryRecord, UInteger> INPUT_TUPLE_CNT = createField(DSL.name("input_tuple_cnt"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>texera_db.telemetry.output_tuple_cnt</code>.
     */
    public final TableField<TelemetryRecord, UInteger> OUTPUT_TUPLE_CNT = createField(DSL.name("output_tuple_cnt"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>texera_db.telemetry.status</code>.
     */
    public final TableField<TelemetryRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>texera_db.telemetry</code> table reference
     */
    public Telemetry() {
        this(DSL.name("telemetry"), null);
    }

    /**
     * Create an aliased <code>texera_db.telemetry</code> table reference
     */
    public Telemetry(String alias) {
        this(DSL.name(alias), TELEMETRY);
    }

    /**
     * Create an aliased <code>texera_db.telemetry</code> table reference
     */
    public Telemetry(Name alias) {
        this(alias, TELEMETRY);
    }

    private Telemetry(Name alias, Table<TelemetryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Telemetry(Name alias, Table<TelemetryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Telemetry(Table<O> child, ForeignKey<O, TelemetryRecord> key) {
        super(child, key, TELEMETRY);
    }

    @Override
    public Schema getSchema() {
        return TexeraDb.TEXERA_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TELEMETRY_EXECUTION_ID, Indexes.TELEMETRY_PRIMARY);
    }

    @Override
    public UniqueKey<TelemetryRecord> getPrimaryKey() {
        return Keys.KEY_TELEMETRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<TelemetryRecord>> getKeys() {
        return Arrays.<UniqueKey<TelemetryRecord>>asList(Keys.KEY_TELEMETRY_PRIMARY);
    }

    @Override
    public List<ForeignKey<TelemetryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TelemetryRecord, ?>>asList(Keys.TELEMETRY_IBFK_1, Keys.TELEMETRY_IBFK_2);
    }

    public Workflow workflow() {
        return new Workflow(this, Keys.TELEMETRY_IBFK_1);
    }

    public WorkflowExecutions workflowExecutions() {
        return new WorkflowExecutions(this, Keys.TELEMETRY_IBFK_2);
    }

    @Override
    public Telemetry as(String alias) {
        return new Telemetry(DSL.name(alias), this);
    }

    @Override
    public Telemetry as(Name alias) {
        return new Telemetry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Telemetry rename(String name) {
        return new Telemetry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Telemetry rename(Name name) {
        return new Telemetry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UInteger, UInteger, String, Timestamp, UInteger, UInteger, Byte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
