/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.web.model.jooq.generated.tables.records;


import edu.uci.ics.texera.web.model.jooq.generated.enums.DatasetUserAccessPrivilege;
import edu.uci.ics.texera.web.model.jooq.generated.tables.DatasetUserAccess;
import edu.uci.ics.texera.web.model.jooq.generated.tables.interfaces.IDatasetUserAccess;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetUserAccessRecord extends UpdatableRecordImpl<DatasetUserAccessRecord> implements Record3<UInteger, UInteger, DatasetUserAccessPrivilege>, IDatasetUserAccess {

    private static final long serialVersionUID = -417509378;

    /**
     * Setter for <code>texera_db.dataset_user_access.did</code>.
     */
    @Override
    public void setDid(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>texera_db.dataset_user_access.did</code>.
     */
    @Override
    public UInteger getDid() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>texera_db.dataset_user_access.uid</code>.
     */
    @Override
    public void setUid(UInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>texera_db.dataset_user_access.uid</code>.
     */
    @Override
    public UInteger getUid() {
        return (UInteger) get(1);
    }

    /**
     * Setter for <code>texera_db.dataset_user_access.privilege</code>.
     */
    @Override
    public void setPrivilege(DatasetUserAccessPrivilege value) {
        set(2, value);
    }

    /**
     * Getter for <code>texera_db.dataset_user_access.privilege</code>.
     */
    @Override
    public DatasetUserAccessPrivilege getPrivilege() {
        return (DatasetUserAccessPrivilege) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UInteger, UInteger> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UInteger, UInteger, DatasetUserAccessPrivilege> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UInteger, UInteger, DatasetUserAccessPrivilege> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return DatasetUserAccess.DATASET_USER_ACCESS.DID;
    }

    @Override
    public Field<UInteger> field2() {
        return DatasetUserAccess.DATASET_USER_ACCESS.UID;
    }

    @Override
    public Field<DatasetUserAccessPrivilege> field3() {
        return DatasetUserAccess.DATASET_USER_ACCESS.PRIVILEGE;
    }

    @Override
    public UInteger component1() {
        return getDid();
    }

    @Override
    public UInteger component2() {
        return getUid();
    }

    @Override
    public DatasetUserAccessPrivilege component3() {
        return getPrivilege();
    }

    @Override
    public UInteger value1() {
        return getDid();
    }

    @Override
    public UInteger value2() {
        return getUid();
    }

    @Override
    public DatasetUserAccessPrivilege value3() {
        return getPrivilege();
    }

    @Override
    public DatasetUserAccessRecord value1(UInteger value) {
        setDid(value);
        return this;
    }

    @Override
    public DatasetUserAccessRecord value2(UInteger value) {
        setUid(value);
        return this;
    }

    @Override
    public DatasetUserAccessRecord value3(DatasetUserAccessPrivilege value) {
        setPrivilege(value);
        return this;
    }

    @Override
    public DatasetUserAccessRecord values(UInteger value1, UInteger value2, DatasetUserAccessPrivilege value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatasetUserAccess from) {
        setDid(from.getDid());
        setUid(from.getUid());
        setPrivilege(from.getPrivilege());
    }

    @Override
    public <E extends IDatasetUserAccess> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatasetUserAccessRecord
     */
    public DatasetUserAccessRecord() {
        super(DatasetUserAccess.DATASET_USER_ACCESS);
    }

    /**
     * Create a detached, initialised DatasetUserAccessRecord
     */
    public DatasetUserAccessRecord(UInteger did, UInteger uid, DatasetUserAccessPrivilege privilege) {
        super(DatasetUserAccess.DATASET_USER_ACCESS);

        set(0, did);
        set(1, uid);
        set(2, privilege);
    }
}
