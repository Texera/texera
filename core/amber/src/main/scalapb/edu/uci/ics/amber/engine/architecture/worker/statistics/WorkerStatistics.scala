// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.worker.statistics

@SerialVersionUID(0L)
final case class WorkerStatistics(
    workerState: edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState,
    inputTupleCount: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long],
    outputTupleCount: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long],
    dataProcessingTime: _root_.scala.Long,
    controlProcessingTime: _root_.scala.Long,
    idleTime: _root_.scala.Long
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[WorkerStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = workerState.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      inputTupleCount.foreach { __item =>
        val __value = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_inputTupleCount.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      outputTupleCount.foreach { __item =>
        val __value = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_outputTupleCount.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = dataProcessingTime
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = controlProcessingTime
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = idleTime
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = workerState.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      inputTupleCount.foreach { __v =>
        val __m = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_inputTupleCount.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      outputTupleCount.foreach { __v =>
        val __m = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_outputTupleCount.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dataProcessingTime
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = controlProcessingTime
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = idleTime
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
    }
    def withWorkerState(__v: edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState): WorkerStatistics = copy(workerState = __v)
    def clearInputTupleCount = copy(inputTupleCount = _root_.scala.collection.immutable.Map.empty)
    def addInputTupleCount(__vs: (_root_.scala.Int, _root_.scala.Long)*): WorkerStatistics = addAllInputTupleCount(__vs)
    def addAllInputTupleCount(__vs: Iterable[(_root_.scala.Int, _root_.scala.Long)]): WorkerStatistics = copy(inputTupleCount = inputTupleCount ++ __vs)
    def withInputTupleCount(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]): WorkerStatistics = copy(inputTupleCount = __v)
    def clearOutputTupleCount = copy(outputTupleCount = _root_.scala.collection.immutable.Map.empty)
    def addOutputTupleCount(__vs: (_root_.scala.Int, _root_.scala.Long)*): WorkerStatistics = addAllOutputTupleCount(__vs)
    def addAllOutputTupleCount(__vs: Iterable[(_root_.scala.Int, _root_.scala.Long)]): WorkerStatistics = copy(outputTupleCount = outputTupleCount ++ __vs)
    def withOutputTupleCount(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]): WorkerStatistics = copy(outputTupleCount = __v)
    def withDataProcessingTime(__v: _root_.scala.Long): WorkerStatistics = copy(dataProcessingTime = __v)
    def withControlProcessingTime(__v: _root_.scala.Long): WorkerStatistics = copy(controlProcessingTime = __v)
    def withIdleTime(__v: _root_.scala.Long): WorkerStatistics = copy(idleTime = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = workerState.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => inputTupleCount.iterator.map(edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_inputTupleCount.toBase(_)).toSeq
        case 3 => outputTupleCount.iterator.map(edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_outputTupleCount.toBase(_)).toSeq
        case 4 => {
          val __t = dataProcessingTime
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = controlProcessingTime
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = idleTime
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(workerState.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PRepeated(inputTupleCount.iterator.map(edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_inputTupleCount.toBase(_).toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(outputTupleCount.iterator.map(edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_outputTupleCount.toBase(_).toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PLong(dataProcessingTime)
        case 5 => _root_.scalapb.descriptors.PLong(controlProcessingTime)
        case 6 => _root_.scalapb.descriptors.PLong(idleTime)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics
    // @@protoc_insertion_point(GeneratedMessage[edu.uci.ics.amber.engine.architecture.worker.WorkerStatistics])
}

object WorkerStatistics extends scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics = {
    var __workerState: edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState.UNINITIALIZED
    val __inputTupleCount: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Long]
    val __outputTupleCount: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Long]
    var __dataProcessingTime: _root_.scala.Long = 0L
    var __controlProcessingTime: _root_.scala.Long = 0L
    var __idleTime: _root_.scala.Long = 0L
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __workerState = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState.fromValue(_input__.readEnum())
        case 18 =>
          __inputTupleCount += edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_inputTupleCount.toCustom(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry](_input__))
        case 26 =>
          __outputTupleCount += edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_outputTupleCount.toCustom(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry](_input__))
        case 32 =>
          __dataProcessingTime = _input__.readInt64()
        case 40 =>
          __controlProcessingTime = _input__.readInt64()
        case 48 =>
          __idleTime = _input__.readInt64()
        case tag => _input__.skipField(tag)
      }
    }
    edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics(
        workerState = __workerState,
        inputTupleCount = __inputTupleCount.result(),
        outputTupleCount = __outputTupleCount.result(),
        dataProcessingTime = __dataProcessingTime,
        controlProcessingTime = __controlProcessingTime,
        idleTime = __idleTime
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics(
        workerState = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState.UNINITIALIZED.scalaValueDescriptor).number),
        inputTupleCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_inputTupleCount.toCustom(_)).toMap,
        outputTupleCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics._typemapper_outputTupleCount.toCustom(_)).toMap,
        dataProcessingTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        controlProcessingTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        idleTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = StatisticsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = StatisticsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry
      case 3 => __out = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry,
      _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState
    }
  }
  lazy val defaultInstance = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics(
    workerState = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState.UNINITIALIZED,
    inputTupleCount = _root_.scala.collection.immutable.Map.empty,
    outputTupleCount = _root_.scala.collection.immutable.Map.empty,
    dataProcessingTime = 0L,
    controlProcessingTime = 0L,
    idleTime = 0L
  )
  @SerialVersionUID(0L)
  final case class InputTupleCountEntry(
      key: _root_.scala.Int,
      value: _root_.scala.Long
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InputTupleCountEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
      }
      def withKey(__v: _root_.scala.Int): InputTupleCountEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Long): InputTupleCountEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PLong(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry
      // @@protoc_insertion_point(GeneratedMessage[edu.uci.ics.amber.engine.architecture.worker.WorkerStatistics.InputTupleCountEntry])
  }
  
  object InputTupleCountEntry extends scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Long = 0L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt32()
          case 16 =>
            __value = _input__.readInt64()
          case tag => _input__.skipField(tag)
        }
      }
      edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry(
          key = __key,
          value = __value
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry(
      key = 0,
      value = 0L
    )
    implicit class InputTupleCountEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)](__m => (__m.key, __m.value))(__p => edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Long
    ): _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry = _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.WorkerStatistics.InputTupleCountEntry])
  }
  
  @SerialVersionUID(0L)
  final case class OutputTupleCountEntry(
      key: _root_.scala.Int,
      value: _root_.scala.Long
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OutputTupleCountEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
      }
      def withKey(__v: _root_.scala.Int): OutputTupleCountEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Long): OutputTupleCountEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PLong(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry
      // @@protoc_insertion_point(GeneratedMessage[edu.uci.ics.amber.engine.architecture.worker.WorkerStatistics.OutputTupleCountEntry])
  }
  
  object OutputTupleCountEntry extends scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Long = 0L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt32()
          case 16 =>
            __value = _input__.readInt64()
          case tag => _input__.skipField(tag)
        }
      }
      edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry(
          key = __key,
          value = __value
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry(
      key = 0,
      value = 0L
    )
    implicit class OutputTupleCountEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)](__m => (__m.key, __m.value))(__p => edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Long
    ): _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry = _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.WorkerStatistics.OutputTupleCountEntry])
  }
  
  implicit class WorkerStatisticsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics](_l) {
    def workerState: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState] = field(_.workerState)((c_, f_) => c_.copy(workerState = f_))
    def inputTupleCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = field(_.inputTupleCount)((c_, f_) => c_.copy(inputTupleCount = f_))
    def outputTupleCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = field(_.outputTupleCount)((c_, f_) => c_.copy(outputTupleCount = f_))
    def dataProcessingTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.dataProcessingTime)((c_, f_) => c_.copy(dataProcessingTime = f_))
    def controlProcessingTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.controlProcessingTime)((c_, f_) => c_.copy(controlProcessingTime = f_))
    def idleTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.idleTime)((c_, f_) => c_.copy(idleTime = f_))
  }
  final val WORKER_STATE_FIELD_NUMBER = 1
  final val INPUT_TUPLE_COUNT_FIELD_NUMBER = 2
  final val OUTPUT_TUPLE_COUNT_FIELD_NUMBER = 3
  final val DATA_PROCESSING_TIME_FIELD_NUMBER = 4
  final val CONTROL_PROCESSING_TIME_FIELD_NUMBER = 5
  final val IDLE_TIME_FIELD_NUMBER = 6
  @transient
  private[statistics] val _typemapper_inputTupleCount: _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.InputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)]]
  @transient
  private[statistics] val _typemapper_outputTupleCount: _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics.OutputTupleCountEntry, (_root_.scala.Int, _root_.scala.Long)]]
  def of(
    workerState: edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerState,
    inputTupleCount: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long],
    outputTupleCount: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long],
    dataProcessingTime: _root_.scala.Long,
    controlProcessingTime: _root_.scala.Long,
    idleTime: _root_.scala.Long
  ): _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics = _root_.edu.uci.ics.amber.engine.architecture.worker.statistics.WorkerStatistics(
    workerState,
    inputTupleCount,
    outputTupleCount,
    dataProcessingTime,
    controlProcessingTime,
    idleTime
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.worker.WorkerStatistics])
}
