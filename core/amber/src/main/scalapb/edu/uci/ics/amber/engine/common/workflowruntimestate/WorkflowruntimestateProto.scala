// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.common.workflowruntimestate

object WorkflowruntimestateProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.architecture.worker.controlcommands.ControlcommandsProto,
    edu.uci.ics.amber.engine.architecture.worker.controlreturns.ControlreturnsProto,
    edu.uci.ics.amber.engine.architecture.worker.statistics.StatisticsProto,
    edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto,
    com.google.protobuf.timestamp.TimestampProto,
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.common.workflowruntimestate.BreakpointFault,
      edu.uci.ics.amber.engine.common.workflowruntimestate.OperatorBreakpoints,
      edu.uci.ics.amber.engine.common.workflowruntimestate.ExecutionBreakpointStore,
      edu.uci.ics.amber.engine.common.workflowruntimestate.EvaluatedValueList,
      edu.uci.ics.amber.engine.common.workflowruntimestate.OperatorConsole,
      edu.uci.ics.amber.engine.common.workflowruntimestate.ExecutionConsoleStore,
      edu.uci.ics.amber.engine.common.workflowruntimestate.OperatorWorkerMapping,
      edu.uci.ics.amber.engine.common.workflowruntimestate.OperatorStatistics,
      edu.uci.ics.amber.engine.common.workflowruntimestate.OperatorMetrics,
      edu.uci.ics.amber.engine.common.workflowruntimestate.ExecutionStatsStore,
      edu.uci.ics.amber.engine.common.workflowruntimestate.WorkflowFatalError,
      edu.uci.ics.amber.engine.common.workflowruntimestate.ExecutionMetadataStore
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CjplZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3dvcmtmbG93cnVudGltZXN0YXRlLnByb3RvEh9lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuY29tbW9uGkJlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3dvcmtlci9jb250cm9sY
  29tbWFuZHMucHJvdG8aQWVkdS91Y2kvaWNzL2FtYmVyL2VuZ2luZS9hcmNoaXRlY3R1cmUvd29ya2VyL2NvbnRyb2xyZXR1cm5zL
  nByb3RvGj1lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3dvcmtlci9zdGF0aXN0aWNzLnByb3RvGjVlZHUvd
  WNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3ZpcnR1YWxpZGVudGl0eS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtc
  C5wcm90bxoVc2NhbGFwYi9zY2FsYXBiLnByb3RvIrQCCg9CcmVha3BvaW50RmF1bHQSMAoLd29ya2VyX25hbWUYASABKAlCD+I/D
  BIKd29ya2VyTmFtZVIKd29ya2VyTmFtZRJ4Cg1mYXVsdGVkX3R1cGxlGAIgASgLMkAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mNvbW1vbi5CcmVha3BvaW50RmF1bHQuQnJlYWtwb2ludFR1cGxlQhHiPw4SDGZhdWx0ZWRUdXBsZVIMZmF1bHRlZFR1cGxlGnUKD
  0JyZWFrcG9pbnRUdXBsZRIXCgJpZBgBIAEoA0IH4j8EEgJpZFICaWQSJwoIaXNfaW5wdXQYAiABKAhCDOI/CRIHaXNJbnB1dFIHa
  XNJbnB1dBIgCgV0dXBsZRgDIAMoCUIK4j8HEgV0dXBsZVIFdHVwbGUimwEKE09wZXJhdG9yQnJlYWtwb2ludHMSgwEKFnVucmVzb
  2x2ZWRfYnJlYWtwb2ludHMYASADKAsyMC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkJyZWFrcG9pbnRGYXVsdEIa4
  j8XEhV1bnJlc29sdmVkQnJlYWtwb2ludHNSFXVucmVzb2x2ZWRCcmVha3BvaW50cyKuAgoYRXhlY3V0aW9uQnJlYWtwb2ludFN0b
  3JlEoMBCg1vcGVyYXRvcl9pbmZvGAEgAygLMksuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5FeGVjdXRpb25CcmVha
  3BvaW50U3RvcmUuT3BlcmF0b3JJbmZvRW50cnlCEeI/DhIMb3BlcmF0b3JJbmZvUgxvcGVyYXRvckluZm8aiwEKEU9wZXJhdG9yS
  W5mb0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJWCgV2YWx1ZRgCIAEoCzI0LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ
  2luZS5jb21tb24uT3BlcmF0b3JCcmVha3BvaW50c0IK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIncKEkV2YWx1YXRlZFZhbHVlTGlzd
  BJhCgZ2YWx1ZXMYASADKAsyPC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5FdmFsdWF0ZWRWY
  Wx1ZUIL4j8IEgZ2YWx1ZXNSBnZhbHVlcyK+AwoPT3BlcmF0b3JDb25zb2xlEn0KEGNvbnNvbGVfbWVzc2FnZXMYASADKAsyPC5lZ
  HUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5Db25zb2xlTWVzc2FnZUIU4j8REg9jb25zb2xlTWVzc
  2FnZXNSD2NvbnNvbGVNZXNzYWdlcxKXAQoVZXZhbHVhdGVfZXhwcl9yZXN1bHRzGAIgAygLMkkuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5PcGVyYXRvckNvbnNvbGUuRXZhbHVhdGVFeHByUmVzdWx0c0VudHJ5QhjiPxUSE2V2YWx1YXRlRXhwclJlc
  3VsdHNSE2V2YWx1YXRlRXhwclJlc3VsdHMakQEKGEV2YWx1YXRlRXhwclJlc3VsdHNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa
  2V5UgNrZXkSVQoFdmFsdWUYAiABKAsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkV2YWx1YXRlZFZhbHVlTGlzd
  EIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIrMCChVFeGVjdXRpb25Db25zb2xlU3RvcmUSjAEKEG9wZXJhdG9yX2NvbnNvbGUYASADK
  AsySy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkV4ZWN1dGlvbkNvbnNvbGVTdG9yZS5PcGVyYXRvckNvbnNvbGVFb
  nRyeUIU4j8REg9vcGVyYXRvckNvbnNvbGVSD29wZXJhdG9yQ29uc29sZRqKAQoUT3BlcmF0b3JDb25zb2xlRW50cnkSGgoDa2V5G
  AEgASgJQgjiPwUSA2tleVIDa2V5ElIKBXZhbHVlGAIgASgLMjAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5PcGVyY
  XRvckNvbnNvbGVCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASJ2ChVPcGVyYXRvcldvcmtlck1hcHBpbmcSLwoKb3BlcmF0b3JJZBgBI
  AEoCUIP4j8MEgpvcGVyYXRvcklkUgpvcGVyYXRvcklkEiwKCXdvcmtlcklkcxgCIAMoCUIO4j8LEgl3b3JrZXJJZHNSCXdvcmtlc
  klkcyKCBAoST3BlcmF0b3JTdGF0aXN0aWNzEnUKC2lucHV0X2NvdW50GAEgAygLMkMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mFyY2hpdGVjdHVyZS53b3JrZXIuUG9ydFR1cGxlQ291bnRNYXBwaW5nQg/iPwwSCmlucHV0Q291bnRSCmlucHV0Q291bnQSeAoMb
  3V0cHV0X2NvdW50GAIgAygLMkMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuUG9ydFR1cGxlQ
  291bnRNYXBwaW5nQhDiPw0SC291dHB1dENvdW50UgtvdXRwdXRDb3VudBIwCgtudW1fd29ya2VycxgDIAEoBUIP4j8MEgpudW1Xb
  3JrZXJzUgpudW1Xb3JrZXJzEkkKFGRhdGFfcHJvY2Vzc2luZ190aW1lGAQgASgDQhfiPxQSEmRhdGFQcm9jZXNzaW5nVGltZVISZ
  GF0YVByb2Nlc3NpbmdUaW1lElIKF2NvbnRyb2xfcHJvY2Vzc2luZ190aW1lGAUgASgDQhriPxcSFWNvbnRyb2xQcm9jZXNzaW5nV
  GltZVIVY29udHJvbFByb2Nlc3NpbmdUaW1lEioKCWlkbGVfdGltZRgGIAEoA0IN4j8KEghpZGxlVGltZVIIaWRsZVRpbWUijAIKD
  09wZXJhdG9yTWV0cmljcxJ2Cg5vcGVyYXRvcl9zdGF0ZRgBIAEoDjI4LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uV
  29ya2Zsb3dBZ2dyZWdhdGVkU3RhdGVCFeI/EhINb3BlcmF0b3JTdGF0ZfABAVINb3BlcmF0b3JTdGF0ZRKAAQoTb3BlcmF0b3Jfc
  3RhdGlzdGljcxgCIAEoCzIzLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uT3BlcmF0b3JTdGF0aXN0aWNzQhriPxcSE
  m9wZXJhdG9yU3RhdGlzdGljc/ABAVISb3BlcmF0b3JTdGF0aXN0aWNzIqAEChNFeGVjdXRpb25TdGF0c1N0b3JlEjsKDnN0YXJ0V
  GltZVN0YW1wGAEgASgDQhPiPxASDnN0YXJ0VGltZVN0YW1wUg5zdGFydFRpbWVTdGFtcBI1CgxlbmRUaW1lU3RhbXAYAiABKANCE
  eI/DhIMZW5kVGltZVN0YW1wUgxlbmRUaW1lU3RhbXASfgoNb3BlcmF0b3JfaW5mbxgDIAMoCzJGLmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5jb21tb24uRXhlY3V0aW9uU3RhdHNTdG9yZS5PcGVyYXRvckluZm9FbnRyeUIR4j8OEgxvcGVyYXRvckluZm9SDG9wZ
  XJhdG9ySW5mbxKKAQoXb3BlcmF0b3Jfd29ya2VyX21hcHBpbmcYBCADKAsyNi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tb
  W9uLk9wZXJhdG9yV29ya2VyTWFwcGluZ0Ia4j8XEhVvcGVyYXRvcldvcmtlck1hcHBpbmdSFW9wZXJhdG9yV29ya2VyTWFwcGluZ
  xqHAQoRT3BlcmF0b3JJbmZvRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5ElIKBXZhbHVlGAIgASgLMjAuZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5PcGVyYXRvck1ldHJpY3NCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASLdAgoSV29ya2Zsb
  3dGYXRhbEVycm9yEk4KBHR5cGUYASABKA4yLy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkZhdGFsRXJyb3JUeXBlQ
  gniPwYSBHR5cGVSBHR5cGUSSwoJdGltZXN0YW1wGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIR4j8OEgl0aW1lc
  3RhbXDwAQFSCXRpbWVzdGFtcBImCgdtZXNzYWdlGAMgASgJQgziPwkSB21lc3NhZ2VSB21lc3NhZ2USJgoHZGV0YWlscxgEIAEoC
  UIM4j8JEgdkZXRhaWxzUgdkZXRhaWxzEi8KCm9wZXJhdG9ySWQYBSABKAlCD+I/DBIKb3BlcmF0b3JJZFIKb3BlcmF0b3JJZBIpC
  gh3b3JrZXJJZBgGIAEoCUIN4j8KEgh3b3JrZXJJZFIId29ya2VySWQigQMKFkV4ZWN1dGlvbk1ldGFkYXRhU3RvcmUSWgoFc3Rhd
  GUYASABKA4yOC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLldvcmtmbG93QWdncmVnYXRlZFN0YXRlQgriPwcSBXN0Y
  XRlUgVzdGF0ZRJoCgxmYXRhbF9lcnJvcnMYAiADKAsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLldvcmtmbG93R
  mF0YWxFcnJvckIQ4j8NEgtmYXRhbEVycm9yc1ILZmF0YWxFcnJvcnMSaQoLZXhlY3V0aW9uSWQYAyABKAsyMi5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuY29tbW9uLkV4ZWN1dGlvbklkZW50aXR5QhPiPxASC2V4ZWN1dGlvbklk8AEBUgtleGVjdXRpb25JZBI2C
  g1pc19yZWNvdmVyaW5nGAQgASgIQhHiPw4SDGlzUmVjb3ZlcmluZ1IMaXNSZWNvdmVyaW5nKj4KDkZhdGFsRXJyb3JUeXBlEhUKE
  UNPTVBJTEFUSU9OX0VSUk9SEAASFQoRRVhFQ1VUSU9OX0ZBSUxVUkUQASqfAQoXV29ya2Zsb3dBZ2dyZWdhdGVkU3RhdGUSEQoNV
  U5JTklUSUFMSVpFRBAAEgkKBVJFQURZEAESCwoHUlVOTklORxACEgsKB1BBVVNJTkcQAxIKCgZQQVVTRUQQBBIMCghSRVNVTUlOR
  xAFEg0KCUNPTVBMRVRFRBAGEgoKBkZBSUxFRBAHEgsKB1VOS05PV04QCBIKCgZLSUxMRUQQCUIJ4j8GSABYAHgAYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ControlcommandsProto.javaDescriptor,
      edu.uci.ics.amber.engine.architecture.worker.controlreturns.ControlreturnsProto.javaDescriptor,
      edu.uci.ics.amber.engine.architecture.worker.statistics.StatisticsProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}