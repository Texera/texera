// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc.controlcommands

/** Message for ChannelMarkerPayload
  */
@SerialVersionUID(0L)
final case class ChannelMarkerPayload(
    id: edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity,
    markerType: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType,
    scope: _root_.scala.Seq[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity],
    commandMapping: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ChannelMarkerPayload] with edu.uci.ics.amber.engine.common.ambermessage.WorkflowFIFOMessagePayload {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = markerType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      scope.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      commandMapping.foreach { __item =>
        val __value = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload._typemapper_commandMapping.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v.serializedSize != 0) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = markerType.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      scope.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      commandMapping.foreach { __v =>
        val __m = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload._typemapper_commandMapping.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def withId(__v: edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity): ChannelMarkerPayload = copy(id = __v)
    def withMarkerType(__v: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType): ChannelMarkerPayload = copy(markerType = __v)
    def clearScope = copy(scope = _root_.scala.Seq.empty)
    def addScope(__vs: edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity *): ChannelMarkerPayload = addAllScope(__vs)
    def addAllScope(__vs: Iterable[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity]): ChannelMarkerPayload = copy(scope = scope ++ __vs)
    def withScope(__v: _root_.scala.Seq[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity]): ChannelMarkerPayload = copy(scope = __v)
    def clearCommandMapping = copy(commandMapping = _root_.scala.collection.immutable.Map.empty)
    def addCommandMapping(__vs: (_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation) *): ChannelMarkerPayload = addAllCommandMapping(__vs)
    def addAllCommandMapping(__vs: Iterable[(_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation)]): ChannelMarkerPayload = copy(commandMapping = commandMapping ++ __vs)
    def withCommandMapping(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]): ChannelMarkerPayload = copy(commandMapping = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity.defaultInstance) __t else null
        }
        case 2 => {
          val __t = markerType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => scope
        case 4 => commandMapping.iterator.map(edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload._typemapper_commandMapping.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.toPMessage
        case 2 => _root_.scalapb.descriptors.PEnum(markerType.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PRepeated(scope.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(commandMapping.iterator.map(edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload._typemapper_commandMapping.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.type = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload
    // @@protoc_insertion_point(GeneratedMessage[edu.uci.ics.amber.engine.architecture.rpc.ChannelMarkerPayload])
}

object ChannelMarkerPayload extends scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload = {
    var __id: _root_.scala.Option[edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity] = _root_.scala.None
    var __markerType: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType.REQUIRE_ALIGNMENT
    val __scope: _root_.scala.collection.immutable.VectorBuilder[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity] = new _root_.scala.collection.immutable.VectorBuilder[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity]
    val __commandMapping: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _root_.scala.Some(__id.fold(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __markerType = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType.fromValue(_input__.readEnum())
        case 26 =>
          __scope += _root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity](_input__)
        case 34 =>
          __commandMapping += edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload._typemapper_commandMapping.toCustom(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry](_input__))
        case tag => _input__.skipField(tag)
      }
    }
    edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload(
        id = __id.getOrElse(edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity.defaultInstance),
        markerType = __markerType,
        scope = __scope.result(),
        commandMapping = __commandMapping.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity]).getOrElse(edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity.defaultInstance),
        markerType = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType.REQUIRE_ALIGNMENT.scalaValueDescriptor).number),
        scope = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity]]).getOrElse(_root_.scala.Seq.empty),
        commandMapping = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload._typemapper_commandMapping.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ControlcommandsProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ControlcommandsProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity
      case 3 => __out = edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity
      case 4 => __out = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType
    }
  }
  lazy val defaultInstance = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload(
    id = edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity.defaultInstance,
    markerType = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType.REQUIRE_ALIGNMENT,
    scope = _root_.scala.Seq.empty,
    commandMapping = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class CommandMappingEntry(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CommandMappingEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
      }
      def withKey(__v: _root_.scala.Predef.String): CommandMappingEntry = copy(key = __v)
      def getValue: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation = value.getOrElse(edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation.defaultInstance)
      def clearValue: CommandMappingEntry = copy(value = _root_.scala.None)
      def withValue(__v: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation): CommandMappingEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry.type = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry
      // @@protoc_insertion_point(GeneratedMessage[edu.uci.ics.amber.engine.architecture.rpc.ChannelMarkerPayload.CommandMappingEntry])
  }
  
  object CommandMappingEntry extends scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation] = _root_.scala.None
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag => _input__.skipField(tag)
        }
      }
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry(
          key = __key,
          value = __value
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class CommandMappingEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry, (_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation)] =
      _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry, (_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation)](__m => (__m.key, __m.getValue))(__p => edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]
    ): _root_.edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry = _root_.edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.rpc.ChannelMarkerPayload.CommandMappingEntry])
  }
  
  implicit class ChannelMarkerPayloadLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def markerType: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType] = field(_.markerType)((c_, f_) => c_.copy(markerType = f_))
    def scope: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity]] = field(_.scope)((c_, f_) => c_.copy(scope = f_))
    def commandMapping: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]] = field(_.commandMapping)((c_, f_) => c_.copy(commandMapping = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val MARKERTYPE_FIELD_NUMBER = 2
  final val SCOPE_FIELD_NUMBER = 3
  final val COMMANDMAPPING_FIELD_NUMBER = 4
  @transient
  private[controlcommands] val _typemapper_commandMapping: _root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry, (_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation)] = implicitly[_root_.scalapb.TypeMapper[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload.CommandMappingEntry, (_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation)]]
  def of(
    id: edu.uci.ics.amber.engine.common.virtualidentity.ChannelMarkerIdentity,
    markerType: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerType,
    scope: _root_.scala.Seq[edu.uci.ics.amber.engine.common.virtualidentity.ChannelIdentity],
    commandMapping: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation]
  ): _root_.edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload = _root_.edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload(
    id,
    markerType,
    scope,
    commandMapping
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[edu.uci.ics.amber.engine.architecture.rpc.ChannelMarkerPayload])
}
