// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.common.workflow

@SerialVersionUID(0L)
final case class InputPort(
    id: edu.uci.ics.amber.engine.common.workflow.PortIdentity = edu.uci.ics.amber.engine.common.workflow.PortIdentity.defaultInstance,
    displayName: _root_.scala.Predef.String = "",
    allowMultiLinks: _root_.scala.Boolean = false,
    dependencies: _root_.scala.Seq[edu.uci.ics.amber.engine.common.workflow.PortIdentity] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InputPort] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != edu.uci.ics.amber.engine.common.workflow.PortIdentity.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = displayName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = allowMultiLinks
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      dependencies.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != edu.uci.ics.amber.engine.common.workflow.PortIdentity.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = displayName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = allowMultiLinks
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      dependencies.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def withId(__v: edu.uci.ics.amber.engine.common.workflow.PortIdentity): InputPort = copy(id = __v)
    def withDisplayName(__v: _root_.scala.Predef.String): InputPort = copy(displayName = __v)
    def withAllowMultiLinks(__v: _root_.scala.Boolean): InputPort = copy(allowMultiLinks = __v)
    def clearDependencies = copy(dependencies = _root_.scala.Seq.empty)
    def addDependencies(__vs: edu.uci.ics.amber.engine.common.workflow.PortIdentity*): InputPort = addAllDependencies(__vs)
    def addAllDependencies(__vs: Iterable[edu.uci.ics.amber.engine.common.workflow.PortIdentity]): InputPort = copy(dependencies = dependencies ++ __vs)
    def withDependencies(__v: _root_.scala.Seq[edu.uci.ics.amber.engine.common.workflow.PortIdentity]): InputPort = copy(dependencies = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != edu.uci.ics.amber.engine.common.workflow.PortIdentity.defaultInstance) __t else null
        }
        case 2 => {
          val __t = displayName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = allowMultiLinks
          if (__t != false) __t else null
        }
        case 4 => dependencies
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.toPMessage
        case 2 => _root_.scalapb.descriptors.PString(displayName)
        case 3 => _root_.scalapb.descriptors.PBoolean(allowMultiLinks)
        case 4 => _root_.scalapb.descriptors.PRepeated(dependencies.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = edu.uci.ics.amber.engine.common.workflow.InputPort
    // @@protoc_insertion_point(GeneratedMessage[edu.uci.ics.amber.engine.common.InputPort])
}

object InputPort extends scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.common.workflow.InputPort] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.common.workflow.InputPort] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): edu.uci.ics.amber.engine.common.workflow.InputPort = {
    var __id: _root_.scala.Option[edu.uci.ics.amber.engine.common.workflow.PortIdentity] = _root_.scala.None
    var __displayName: _root_.scala.Predef.String = ""
    var __allowMultiLinks: _root_.scala.Boolean = false
    val __dependencies: _root_.scala.collection.immutable.VectorBuilder[edu.uci.ics.amber.engine.common.workflow.PortIdentity] = new _root_.scala.collection.immutable.VectorBuilder[edu.uci.ics.amber.engine.common.workflow.PortIdentity]
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _root_.scala.Some(__id.fold(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.workflow.PortIdentity](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __displayName = _input__.readStringRequireUtf8()
        case 24 =>
          __allowMultiLinks = _input__.readBool()
        case 34 =>
          __dependencies += _root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.workflow.PortIdentity](_input__)
        case tag => _input__.skipField(tag)
      }
    }
    edu.uci.ics.amber.engine.common.workflow.InputPort(
        id = __id.getOrElse(edu.uci.ics.amber.engine.common.workflow.PortIdentity.defaultInstance),
        displayName = __displayName,
        allowMultiLinks = __allowMultiLinks,
        dependencies = __dependencies.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[edu.uci.ics.amber.engine.common.workflow.InputPort] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      edu.uci.ics.amber.engine.common.workflow.InputPort(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[edu.uci.ics.amber.engine.common.workflow.PortIdentity]).getOrElse(edu.uci.ics.amber.engine.common.workflow.PortIdentity.defaultInstance),
        displayName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        allowMultiLinks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        dependencies = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[edu.uci.ics.amber.engine.common.workflow.PortIdentity]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WorkflowProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WorkflowProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = edu.uci.ics.amber.engine.common.workflow.PortIdentity
      case 4 => __out = edu.uci.ics.amber.engine.common.workflow.PortIdentity
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = edu.uci.ics.amber.engine.common.workflow.InputPort(
    id = edu.uci.ics.amber.engine.common.workflow.PortIdentity.defaultInstance,
    displayName = "",
    allowMultiLinks = false,
    dependencies = _root_.scala.Seq.empty
  )
  implicit class InputPortLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.workflow.InputPort]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, edu.uci.ics.amber.engine.common.workflow.InputPort](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.workflow.PortIdentity] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def displayName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.displayName)((c_, f_) => c_.copy(displayName = f_))
    def allowMultiLinks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.allowMultiLinks)((c_, f_) => c_.copy(allowMultiLinks = f_))
    def dependencies: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[edu.uci.ics.amber.engine.common.workflow.PortIdentity]] = field(_.dependencies)((c_, f_) => c_.copy(dependencies = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val DISPLAYNAME_FIELD_NUMBER = 2
  final val ALLOWMULTILINKS_FIELD_NUMBER = 3
  final val DEPENDENCIES_FIELD_NUMBER = 4
  def of(
    id: edu.uci.ics.amber.engine.common.workflow.PortIdentity,
    displayName: _root_.scala.Predef.String,
    allowMultiLinks: _root_.scala.Boolean,
    dependencies: _root_.scala.Seq[edu.uci.ics.amber.engine.common.workflow.PortIdentity]
  ): _root_.edu.uci.ics.amber.engine.common.workflow.InputPort = _root_.edu.uci.ics.amber.engine.common.workflow.InputPort(
    id,
    displayName,
    allowMultiLinks,
    dependencies
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[edu.uci.ics.amber.engine.common.InputPort])
}
