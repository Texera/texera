// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc.controlreturns

object ControlreturnsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.architecture.worker.controlreturns.ControlreturnsProto,
    edu.uci.ics.texera.web.workflowruntimestate.WorkflowruntimestateProto,
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.ControlReturnMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.ControlError,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.ReturnInvocation,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.Empty,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.RetrieveWorkflowStateResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.FinalizeCheckpointResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.PropagateChannelMarkerResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.TakeGlobalCheckpointResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.EvaluatePythonExpressionResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StartWorkflowResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.WorkerStateResponse,
      edu.uci.ics.amber.engine.architecture.rpc.controlreturns.WorkerMetricsResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cj5lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3JwYy9jb250cm9scmV0dXJucy5wcm90bxIpZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMaQWVkdS91Y2kvaWNzL2FtYmVyL2VuZ2luZS9hcmNoaXRlY3R1cmUvd
  29ya2VyL2NvbnRyb2xyZXR1cm5zLnByb3RvGi1lZHUvdWNpL2ljcy90ZXhlcmEvd29ya2Zsb3dydW50aW1lc3RhdGUucHJvdG8aF
  XNjYWxhcGIvc2NhbGFwYi5wcm90byLfDAoNQ29udHJvbFJldHVybhJbCgVlcnJvchgBIAEoCzI3LmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnRyb2xFcnJvckIK4j8HEgVlcnJvckgAUgVlcnJvchJUCgVlbXB0eRgCIAEoCzIwL
  mVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkVtcHR5QgriPwcSBWVtcHR5SABSBWVtcHR5ErQBCh1yZ
  XRyaWV2ZVdvcmtmbG93U3RhdGVSZXNwb25zZRgDIAEoCzJILmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUuc
  nBjLlJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlc3BvbnNlQiLiPx8SHXJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlc3BvbnNlSABSHXJld
  HJpZXZlV29ya2Zsb3dTdGF0ZVJlc3BvbnNlErgBCh5wcm9wYWdhdGVDaGFubmVsTWFya2VyUmVzcG9uc2UYBCABKAsySS5lZHUud
  WNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qcm9wYWdhdGVDaGFubmVsTWFya2VyUmVzcG9uc2VCI+I/IBIec
  HJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlc3BvbnNlSABSHnByb3BhZ2F0ZUNoYW5uZWxNYXJrZXJSZXNwb25zZRKwAQocdGFrZUdsb
  2JhbENoZWNrcG9pbnRSZXNwb25zZRgFIAEoCzJHLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlRha
  2VHbG9iYWxDaGVja3BvaW50UmVzcG9uc2VCIeI/HhIcdGFrZUdsb2JhbENoZWNrcG9pbnRSZXNwb25zZUgAUhx0YWtlR2xvYmFsQ
  2hlY2twb2ludFJlc3BvbnNlEsABCiBldmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZXNwb25zZRgGIAEoCzJLLmVkdS51Y2kuaWNzL
  mFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkV2YWx1YXRlUHl0aG9uRXhwcmVzc2lvblJlc3BvbnNlQiXiPyISIGV2YWx1Y
  XRlUHl0aG9uRXhwcmVzc2lvblJlc3BvbnNlSABSIGV2YWx1YXRlUHl0aG9uRXhwcmVzc2lvblJlc3BvbnNlEpQBChVzdGFydFdvc
  mtmbG93UmVzcG9uc2UYByABKAsyQC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5TdGFydFdvcmtmb
  G93UmVzcG9uc2VCGuI/FxIVc3RhcnRXb3JrZmxvd1Jlc3BvbnNlSABSFXN0YXJ0V29ya2Zsb3dSZXNwb25zZRJ4Cg5zdHJpbmdSZ
  XNwb25zZRgIIAEoCzI5LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlN0cmluZ1Jlc3BvbnNlQhPiP
  xASDnN0cmluZ1Jlc3BvbnNlSABSDnN0cmluZ1Jlc3BvbnNlEmwKC2ludFJlc3BvbnNlGAkgASgLMjYuZWR1LnVjaS5pY3MuYW1iZ
  XIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuSW50UmVzcG9uc2VCEOI/DRILaW50UmVzcG9uc2VIAFILaW50UmVzcG9uc2USjAEKE
  3dvcmtlclN0YXRlUmVzcG9uc2UYCiABKAsyPi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Xb3JrZ
  XJTdGF0ZVJlc3BvbnNlQhjiPxUSE3dvcmtlclN0YXRlUmVzcG9uc2VIAFITd29ya2VyU3RhdGVSZXNwb25zZRKUAQoVd29ya2VyT
  WV0cmljc1Jlc3BvbnNlGAsgASgLMkAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuV29ya2VyTWV0c
  mljc1Jlc3BvbnNlQhriPxcSFXdvcmtlck1ldHJpY3NSZXNwb25zZUgAUhV3b3JrZXJNZXRyaWNzUmVzcG9uc2VCDgoMc2VhbGVkX
  3ZhbHVlInwKDENvbnRyb2xFcnJvchI1CgxlcnJvck1lc3NhZ2UYASABKAlCEeI/DhIMZXJyb3JNZXNzYWdlUgxlcnJvck1lc3NhZ
  2USNQoMZXJyb3JEZXRhaWxzGAIgASgJQhHiPw4SDGVycm9yRGV0YWlsc1IMZXJyb3JEZXRhaWxzIvMBChBSZXR1cm5JbnZvY2F0a
  W9uEiwKCWNvbW1hbmRJZBgBIAEoA0IO4j8LEgljb21tYW5kSWRSCWNvbW1hbmRJZBJvCgtyZXR1cm5WYWx1ZRgCIAEoCzI4LmVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnRyb2xSZXR1cm5CE+I/EBILcmV0dXJuVmFsdWXwAQFSC
  3JldHVyblZhbHVlOkDiPz0KO2VkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uYW1iZXJtZXNzYWdlLkNvbnRyb2xQYXlsb
  2FkIjIKDlN0cmluZ1Jlc3BvbnNlEiAKBXZhbHVlGAEgASgJQgriPwcSBXZhbHVlUgV2YWx1ZSIvCgtJbnRSZXNwb25zZRIgCgV2Y
  Wx1ZRgBIAEoBUIK4j8HEgV2YWx1ZVIFdmFsdWUiBwoFRW1wdHki5gEKHVJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlc3BvbnNlEnUKB
  XN0YXRlGAEgAygLMlMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUmV0cmlldmVXb3JrZmxvd1N0Y
  XRlUmVzcG9uc2UuU3RhdGVFbnRyeUIK4j8HEgVzdGF0ZVIFc3RhdGUaTgoKU3RhdGVFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa
  2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASI7ChpGaW5hbGl6ZUNoZWNrcG9pbnRSZXNwb25zZ
  RIdCgRzaXplGAEgASgDQgniPwYSBHNpemVSBHNpemUirQIKHlByb3BhZ2F0ZUNoYW5uZWxNYXJrZXJSZXNwb25zZRJ+CgdyZXR1c
  m5zGAEgAygLMlYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUHJvcGFnYXRlQ2hhbm5lbE1hcmtlc
  lJlc3BvbnNlLlJldHVybnNFbnRyeUIM4j8JEgdyZXR1cm5zUgdyZXR1cm5zGooBCgxSZXR1cm5zRW50cnkSGgoDa2V5GAEgASgJQ
  gjiPwUSA2tleVIDa2V5EloKBXZhbHVlGAIgASgLMjguZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ
  29udHJvbFJldHVybkIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIkwKHFRha2VHbG9iYWxDaGVja3BvaW50UmVzcG9uc2USLAoJdG90Y
  WxTaXplGAEgASgDQg7iPwsSCXRvdGFsU2l6ZVIJdG90YWxTaXplIoUBCiBFdmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZXNwb25zZ
  RJhCgZ2YWx1ZXMYASADKAsyPC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5FdmFsdWF0ZWRWY
  Wx1ZUIL4j8IEgZ2YWx1ZXNSBnZhbHVlcyKCAQoVU3RhcnRXb3JrZmxvd1Jlc3BvbnNlEmkKDXdvcmtmbG93U3RhdGUYASABKA4yL
  y5lZHUudWNpLmljcy50ZXhlcmEud2ViLldvcmtmbG93QWdncmVnYXRlZFN0YXRlQhLiPw8SDXdvcmtmbG93U3RhdGVSDXdvcmtmb
  G93U3RhdGUiNwoTV29ya2VyU3RhdGVSZXNwb25zZRIgCgVzdGF0ZRgBIAEoCUIK4j8HEgVzdGF0ZVIFc3RhdGUiPwoVV29ya2VyT
  WV0cmljc1Jlc3BvbnNlEiYKB21ldHJpY3MYASABKAlCDOI/CRIHbWV0cmljc1IHbWV0cmljc0IJ4j8GSABYAHgBYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.architecture.worker.controlreturns.ControlreturnsProto.javaDescriptor,
      edu.uci.ics.texera.web.workflowruntimestate.WorkflowruntimestateProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}