// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc.testerservice


object RPCTesterGrpc {
  val METHOD_SEND_PING: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendPing"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_SEND_PONG: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendPong"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_SEND_NESTED: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendNested"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_SEND_PASS: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendPass"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_SEND_ERROR_COMMAND: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendErrorCommand"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_SEND_RECURSION: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendRecursion"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val METHOD_SEND_COLLECT: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendCollect"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(6)))
      .build()
  
  val METHOD_SEND_GENERATE_NUMBER: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendGenerateNumber"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(7)))
      .build()
  
  val METHOD_SEND_MULTI_CALL: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendMultiCall"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(8)))
      .build()
  
  val METHOD_SEND_CHAIN: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.RPCTester", "SendChain"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0).getMethods().get(9)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("edu.uci.ics.amber.engine.architecture.rpc.RPCTester")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor))
      .addMethod(METHOD_SEND_PING)
      .addMethod(METHOD_SEND_PONG)
      .addMethod(METHOD_SEND_NESTED)
      .addMethod(METHOD_SEND_PASS)
      .addMethod(METHOD_SEND_ERROR_COMMAND)
      .addMethod(METHOD_SEND_RECURSION)
      .addMethod(METHOD_SEND_COLLECT)
      .addMethod(METHOD_SEND_GENERATE_NUMBER)
      .addMethod(METHOD_SEND_MULTI_CALL)
      .addMethod(METHOD_SEND_CHAIN)
      .build()
  
  trait RPCTester extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = RPCTester
    def sendPing(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse]
    def sendPong(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse]
    def sendNested(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]
    def sendPass(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]
    def sendErrorCommand(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]
    def sendRecursion(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]
    def sendCollect(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]
    def sendGenerateNumber(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse]
    def sendMultiCall(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]
    def sendChain(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]
  }
  
  object RPCTester extends _root_.scalapb.grpc.ServiceCompanion[RPCTester] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[RPCTester] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: RPCTester, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SEND_PING,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse]): _root_.scala.Unit =
            serviceImpl.sendPing(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_PONG,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse]): _root_.scala.Unit =
            serviceImpl.sendPong(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_NESTED,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]): _root_.scala.Unit =
            serviceImpl.sendNested(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_PASS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]): _root_.scala.Unit =
            serviceImpl.sendPass(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_ERROR_COMMAND,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]): _root_.scala.Unit =
            serviceImpl.sendErrorCommand(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_RECURSION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]): _root_.scala.Unit =
            serviceImpl.sendRecursion(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_COLLECT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]): _root_.scala.Unit =
            serviceImpl.sendCollect(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_GENERATE_NUMBER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse]): _root_.scala.Unit =
            serviceImpl.sendGenerateNumber(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_MULTI_CALL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]): _root_.scala.Unit =
            serviceImpl.sendMultiCall(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_CHAIN,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain, edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse]): _root_.scala.Unit =
            serviceImpl.sendChain(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait RPCTesterBlockingClient {
    def serviceCompanion = RPCTester
    def sendPing(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse
    def sendPong(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse
    def sendNested(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse
    def sendPass(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse
    def sendErrorCommand(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse
    def sendRecursion(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse
    def sendCollect(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse
    def sendGenerateNumber(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse
    def sendMultiCall(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse
    def sendChain(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse
  }
  
  class RPCTesterBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[RPCTesterBlockingStub](channel, options) with RPCTesterBlockingClient {
    override def sendPing(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_PING, options, request)
    }
    
    override def sendPong(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_PONG, options, request)
    }
    
    override def sendNested(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_NESTED, options, request)
    }
    
    override def sendPass(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_PASS, options, request)
    }
    
    override def sendErrorCommand(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_ERROR_COMMAND, options, request)
    }
    
    override def sendRecursion(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_RECURSION, options, request)
    }
    
    override def sendCollect(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_COLLECT, options, request)
    }
    
    override def sendGenerateNumber(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_GENERATE_NUMBER, options, request)
    }
    
    override def sendMultiCall(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_MULTI_CALL, options, request)
    }
    
    override def sendChain(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain): edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_CHAIN, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): RPCTesterBlockingStub = new RPCTesterBlockingStub(channel, options)
  }
  
  class RPCTesterStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[RPCTesterStub](channel, options) with RPCTester {
    override def sendPing(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_PING, options, request)
    }
    
    override def sendPong(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_PONG, options, request)
    }
    
    override def sendNested(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_NESTED, options, request)
    }
    
    override def sendPass(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_PASS, options, request)
    }
    
    override def sendErrorCommand(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_ERROR_COMMAND, options, request)
    }
    
    override def sendRecursion(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_RECURSION, options, request)
    }
    
    override def sendCollect(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_COLLECT, options, request)
    }
    
    override def sendGenerateNumber(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.IntResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_GENERATE_NUMBER, options, request)
    }
    
    override def sendMultiCall(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_MULTI_CALL, options, request)
    }
    
    override def sendChain(request: edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.controlreturns.StringResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_CHAIN, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): RPCTesterStub = new RPCTesterStub(channel, options)
  }
  
  object RPCTesterStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[RPCTesterStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): RPCTesterStub = new RPCTesterStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[RPCTesterStub] = this
  }
  
  def bindService(serviceImpl: RPCTester, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = RPCTester.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): RPCTesterBlockingStub = new RPCTesterBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): RPCTesterStub = new RPCTesterStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = edu.uci.ics.amber.engine.architecture.rpc.testerservice.TesterserviceProto.javaDescriptor.getServices().get(0)
  
}