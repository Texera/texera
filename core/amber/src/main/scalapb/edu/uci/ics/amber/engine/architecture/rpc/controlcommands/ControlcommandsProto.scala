// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc.controlcommands

object ControlcommandsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto,
    edu.uci.ics.amber.engine.common.workflow.WorkflowProto,
    scalapb.options.ScalapbProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.any.AnyProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlRequestMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AsyncRPCContext,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PropagateChannelMarkerRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.TakeGlobalCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.DebugCommandRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.EvaluatePythonExpressionRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ModifyLogicRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetryWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetrieveWorkflowStateRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessageTriggeredRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PortCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.StartWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ResumeWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PauseWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerStateUpdatedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerExecutionCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.LinkWorkersRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cj9lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3JwYy9jb250cm9sY29tbWFuZHMucHJvdG8SKWVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjGjVlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3ZpcnR1Y
  WxpZGVudGl0eS5wcm90bxouZWR1L3VjaS9pY3MvYW1iZXIvZW5naW5lL2NvbW1vbi93b3JrZmxvdy5wcm90bxoVc2NhbGFwYi9zY
  2FsYXBiLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvIt0aC
  g5Db250cm9sUmVxdWVzdBK0AQodcHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlcXVlc3QYASABKAsySC5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdEIi4j8fEh1wcm9wYWdhdGVDaGFub
  mVsTWFya2VyUmVxdWVzdEgAUh1wcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdBKsAQobdGFrZUdsb2JhbENoZWNrcG9pbnRSZ
  XF1ZXN0GAIgASgLMkYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuVGFrZUdsb2JhbENoZWNrcG9pb
  nRSZXF1ZXN0QiDiPx0SG3Rha2VHbG9iYWxDaGVja3BvaW50UmVxdWVzdEgAUht0YWtlR2xvYmFsQ2hlY2twb2ludFJlcXVlc3QSj
  AEKE2RlYnVnQ29tbWFuZFJlcXVlc3QYAyABKAsyPi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5EZ
  WJ1Z0NvbW1hbmRSZXF1ZXN0QhjiPxUSE2RlYnVnQ29tbWFuZFJlcXVlc3RIAFITZGVidWdDb21tYW5kUmVxdWVzdBK8AQofZXZhb
  HVhdGVQeXRob25FeHByZXNzaW9uUmVxdWVzdBgEIAEoCzJKLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUuc
  nBjLkV2YWx1YXRlUHl0aG9uRXhwcmVzc2lvblJlcXVlc3RCJOI/IRIfZXZhbHVhdGVQeXRob25FeHByZXNzaW9uUmVxdWVzdEgAU
  h9ldmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZXF1ZXN0EogBChJtb2RpZnlMb2dpY1JlcXVlc3QYBSABKAsyPS5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Nb2RpZnlMb2dpY1JlcXVlc3RCF+I/FBISbW9kaWZ5TG9naWNSZXF1ZXN0S
  ABSEm1vZGlmeUxvZ2ljUmVxdWVzdBKQAQoUcmV0cnlXb3JrZmxvd1JlcXVlc3QYBiABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lb
  mdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5SZXRyeVdvcmtmbG93UmVxdWVzdEIZ4j8WEhRyZXRyeVdvcmtmbG93UmVxdWVzdEgAUhRyZ
  XRyeVdvcmtmbG93UmVxdWVzdBKwAQoccmV0cmlldmVXb3JrZmxvd1N0YXRlUmVxdWVzdBgHIAEoCzJHLmVkdS51Y2kuaWNzLmFtY
  mVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlcXVlc3RCIeI/HhIccmV0cmlldmVXb3JrZ
  mxvd1N0YXRlUmVxdWVzdEgAUhxyZXRyaWV2ZVdvcmtmbG93U3RhdGVSZXF1ZXN0ErgBCh5jb25zb2xlTWVzc2FnZVRyaWdnZXJlZ
  FJlcXVlc3QYCCABKAsySS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Db25zb2xlTWVzc2FnZVRya
  WdnZXJlZFJlcXVlc3RCI+I/IBIeY29uc29sZU1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0SABSHmNvbnNvbGVNZXNzYWdlVHJpZ2dlc
  mVkUmVxdWVzdBKQAQoUcG9ydENvbXBsZXRlZFJlcXVlc3QYCSABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0Z
  WN0dXJlLnJwYy5Qb3J0Q29tcGxldGVkUmVxdWVzdEIZ4j8WEhRwb3J0Q29tcGxldGVkUmVxdWVzdEgAUhRwb3J0Q29tcGxldGVkU
  mVxdWVzdBKQAQoUc3RhcnRXb3JrZmxvd1JlcXVlc3QYCiABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0d
  XJlLnJwYy5TdGFydFdvcmtmbG93UmVxdWVzdEIZ4j8WEhRzdGFydFdvcmtmbG93UmVxdWVzdEgAUhRzdGFydFdvcmtmbG93UmVxd
  WVzdBKUAQoVcmVzdW1lV29ya2Zsb3dSZXF1ZXN0GAsgASgLMkAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZ
  S5ycGMuUmVzdW1lV29ya2Zsb3dSZXF1ZXN0QhriPxcSFXJlc3VtZVdvcmtmbG93UmVxdWVzdEgAUhVyZXN1bWVXb3JrZmxvd1Jlc
  XVlc3QSkAEKFHBhdXNlV29ya2Zsb3dSZXF1ZXN0GAwgASgLMj8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZ
  S5ycGMuUGF1c2VXb3JrZmxvd1JlcXVlc3RCGeI/FhIUcGF1c2VXb3JrZmxvd1JlcXVlc3RIAFIUcGF1c2VXb3JrZmxvd1JlcXVlc
  3QSpAEKGXdvcmtlclN0YXRlVXBkYXRlZFJlcXVlc3QYDSABKAsyRC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0d
  XJlLnJwYy5Xb3JrZXJTdGF0ZVVwZGF0ZWRSZXF1ZXN0Qh7iPxsSGXdvcmtlclN0YXRlVXBkYXRlZFJlcXVlc3RIAFIZd29ya2VyU
  3RhdGVVcGRhdGVkUmVxdWVzdBK8AQofd29ya2VyRXhlY3V0aW9uQ29tcGxldGVkUmVxdWVzdBgOIAEoCzJKLmVkdS51Y2kuaWNzL
  mFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLldvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFJlcXVlc3RCJOI/IRIfd29ya2VyR
  XhlY3V0aW9uQ29tcGxldGVkUmVxdWVzdEgAUh93b3JrZXJFeGVjdXRpb25Db21wbGV0ZWRSZXF1ZXN0EogBChJsaW5rV29ya2Vyc
  1JlcXVlc3QYDyABKAsyPS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5MaW5rV29ya2Vyc1JlcXVlc
  3RCF+I/FBISbGlua1dvcmtlcnNSZXF1ZXN0SABSEmxpbmtXb3JrZXJzUmVxdWVzdBJQCgRwaW5nGBAgASgLMi8uZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUGluZ0IJ4j8GEgRwaW5nSABSBHBpbmcSUAoEcG9uZxgRIAEoCzIvLmVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlBvbmdCCeI/BhIEcG9uZ0gAUgRwb25nElgKBm5lc3RlZBgSI
  AEoCzIxLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLk5lc3RlZEIL4j8IEgZuZXN0ZWRIAFIGbmVzd
  GVkElAKBHBhc3MYEyABKAsyLy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5QYXNzQgniPwYSBHBhc
  3NIAFIEcGFzcxJwCgxlcnJvckNvbW1hbmQYFCABKAsyNy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwY
  y5FcnJvckNvbW1hbmRCEeI/DhIMZXJyb3JDb21tYW5kSABSDGVycm9yQ29tbWFuZBJkCglyZWN1cnNpb24YFSABKAsyNC5lZHUud
  WNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5SZWN1cnNpb25CDuI/CxIJcmVjdXJzaW9uSABSCXJlY3Vyc2lvb
  hJcCgdjb2xsZWN0GBYgASgLMjIuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29sbGVjdEIM4j8JE
  gdjb2xsZWN0SABSB2NvbGxlY3QSeAoOZ2VuZXJhdGVOdW1iZXIYFyABKAsyOS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJja
  Gl0ZWN0dXJlLnJwYy5HZW5lcmF0ZU51bWJlckIT4j8QEg5nZW5lcmF0ZU51bWJlckgAUg5nZW5lcmF0ZU51bWJlchJkCgltdWx0a
  UNhbGwYGCABKAsyNC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5NdWx0aUNhbGxCDuI/CxIJbXVsd
  GlDYWxsSABSCW11bHRpQ2FsbBJUCgVjaGFpbhgZIAEoCzIwLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUuc
  nBjLkNoYWluQgriPwcSBWNoYWluSABSBWNoYWluQg4KDHNlYWxlZF92YWx1ZSLcAQoPQXN5bmNSUENDb250ZXh0El0KBnNlbmRlc
  hgBIAEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCDuI/CxIGc2VuZGVy8
  AEBUgZzZW5kZXISYwoIcmVjZWl2ZXIYAiABKAsyNS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkFjdG9yVmlydHVhb
  ElkZW50aXR5QhDiPw0SCHJlY2VpdmVy8AEBUghyZWNlaXZlcjoF4j8COAEigAMKEUNvbnRyb2xJbnZvY2F0aW9uEi8KCm1ldGhvZ
  E5hbWUYASABKAlCD+I/DBIKbWV0aG9kTmFtZVIKbWV0aG9kTmFtZRJkCgdjb21tYW5kGAIgASgLMjkuZWR1LnVjaS5pY3MuYW1iZ
  XIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29udHJvbFJlcXVlc3RCD+I/DBIHY29tbWFuZPABAVIHY29tbWFuZBJiCgdjb250Z
  Xh0GAMgASgLMjouZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQXN5bmNSUENDb250ZXh0QgziPwkSB
  2NvbnRleHRSB2NvbnRleHQSLAoJY29tbWFuZElkGAQgASgDQg7iPwsSCWNvbW1hbmRJZFIJY29tbWFuZElkOkLiPz8KO2VkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uYW1iZXJtZXNzYWdlLkNvbnRyb2xQYXlsb2FkOAEi1QQKFENoYW5uZWxNYXJrZXJQY
  Xlsb2FkEk8KAmlkGAEgASgLMjYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFubmVsTWFya2VySWRlbnRpdHlCB
  +I/BBICaWRSAmlkEm0KCm1hcmtlclR5cGUYAiABKA4yPC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwY
  y5DaGFubmVsTWFya2VyVHlwZUIP4j8MEgptYXJrZXJUeXBlUgptYXJrZXJUeXBlElIKBXNjb3BlGAMgAygLMjAuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFubmVsSWRlbnRpdHlCCuI/BxIFc2NvcGVSBXNjb3BlEpABCg5jb21tYW5kTWFwcGluZ
  xgEIAMoCzJTLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNoYW5uZWxNYXJrZXJQYXlsb2FkLkNvb
  W1hbmRNYXBwaW5nRW50cnlCE+I/EBIOY29tbWFuZE1hcHBpbmdSDmNvbW1hbmRNYXBwaW5nGpUBChNDb21tYW5kTWFwcGluZ0Vud
  HJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJeCgV2YWx1ZRgCIAEoCzI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hc
  mNoaXRlY3R1cmUucnBjLkNvbnRyb2xJbnZvY2F0aW9uQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEiywQKHVByb3BhZ2F0ZUNoYW5uZ
  WxNYXJrZXJSZXF1ZXN0En8KE3NvdXJjZU9wVG9TdGFydFByb3AYASADKAsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tb
  W9uLlBoeXNpY2FsT3BJZGVudGl0eUIY4j8VEhNzb3VyY2VPcFRvU3RhcnRQcm9wUhNzb3VyY2VPcFRvU3RhcnRQcm9wEk8KAmlkG
  AIgASgLMjYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFubmVsTWFya2VySWRlbnRpdHlCB+I/BBICaWRSAmlkE
  m0KCm1hcmtlclR5cGUYAyABKA4yPC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5DaGFubmVsTWFya
  2VyVHlwZUIP4j8MEgptYXJrZXJUeXBlUgptYXJrZXJUeXBlEjYKBXNjb3BlGAQgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIK4
  j8HEgVzY29wZVIFc2NvcGUSYQoJdGFyZ2V0T3BzGAUgAygLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5QaHlza
  WNhbE9wSWRlbnRpdHlCDuI/CxIJdGFyZ2V0T3BzUgl0YXJnZXRPcHMSTgoNbWFya2VyQ29tbWFuZBgGIAEoCzIULmdvb2dsZS5wc
  m90b2J1Zi5BbnlCEuI/DxINbWFya2VyQ29tbWFuZFINbWFya2VyQ29tbWFuZCL9AQobVGFrZUdsb2JhbENoZWNrcG9pbnRSZXF1Z
  XN0EjsKDmVzdGltYXRpb25Pbmx5GAEgASgIQhPiPxASDmVzdGltYXRpb25Pbmx5Ug5lc3RpbWF0aW9uT25seRJtCgxjaGVja3Bva
  W50SWQYAiABKAsyNi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZWxNYXJrZXJJZGVudGl0eUIR4j8OEgxja
  GVja3BvaW50SWRSDGNoZWNrcG9pbnRJZBIyCgtkZXN0aW5hdGlvbhgDIAEoCUIQ4j8NEgtkZXN0aW5hdGlvblILZGVzdGluYXRpb
  24iXAoTRGVidWdDb21tYW5kUmVxdWVzdBIpCgh3b3JrZXJJZBgBIAEoCUIN4j8KEgh3b3JrZXJJZFIId29ya2VySWQSGgoDY21kG
  AIgASgJQgjiPwUSA2NtZFIDY21kIoMBCh9FdmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZXF1ZXN0Ei8KCmV4cHJlc3Npb24YASABK
  AlCD+I/DBIKZXhwcmVzc2lvblIKZXhwcmVzc2lvbhIvCgpvcGVyYXRvcklkGAIgASgJQg/iPwwSCm9wZXJhdG9ySWRSCm9wZXJhd
  G9ySWQifAoSTW9kaWZ5TG9naWNSZXF1ZXN0EiAKBW5ld09wGAEgASgJQgriPwcSBW5ld09wUgVuZXdPcBJEChFzdGF0ZVRyYW5zZ
  mVyRnVuYxgCIAEoCUIW4j8TEhFzdGF0ZVRyYW5zZmVyRnVuY1IRc3RhdGVUcmFuc2ZlckZ1bmMidQoUUmV0cnlXb3JrZmxvd1Jlc
  XVlc3QSXQoHd29ya2VycxgBIAMoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpd
  HlCDOI/CRIHd29ya2Vyc1IHd29ya2VycyLgAgoOQ29uc29sZU1lc3NhZ2USKgoJd29ya2VyX2lkGAEgASgJQg3iPwoSCHdvcmtlc
  klkUgh3b3JrZXJJZBJLCgl0aW1lc3RhbXAYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQhHiPw4SCXRpbWVzdGFtc
  PABAVIJdGltZXN0YW1wEmYKCG1zZ190eXBlGAMgASgOMj0uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5yc
  GMuQ29uc29sZU1lc3NhZ2VUeXBlQgziPwkSB21zZ1R5cGVSB21zZ1R5cGUSIwoGc291cmNlGAQgASgJQgviPwgSBnNvdXJjZVIGc
  291cmNlEiAKBXRpdGxlGAUgASgJQgriPwcSBXRpdGxlUgV0aXRsZRImCgdtZXNzYWdlGAYgASgJQgziPwkSB21lc3NhZ2VSB21lc
  3NhZ2UiHgocUmV0cmlldmVXb3JrZmxvd1N0YXRlUmVxdWVzdCKYAQoeQ29uc29sZU1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0EnYKD
  mNvbnNvbGVNZXNzYWdlGAEgASgLMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29uc29sZU1lc
  3NhZ2VCE+I/EBIOY29uc29sZU1lc3NhZ2VSDmNvbnNvbGVNZXNzYWdlIowBChRQb3J0Q29tcGxldGVkUmVxdWVzdBJSCgZwb3J0S
  WQYASABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBvcnRJZGVudGl0eUIL4j8IEgZwb3J0SWRSBnBvcnRJZ
  BIgCgVpbnB1dBgCIAEoCEIK4j8HEgVpbnB1dFIFaW5wdXQiFgoUU3RhcnRXb3JrZmxvd1JlcXVlc3QiFwoVUmVzdW1lV29ya2Zsb
  3dSZXF1ZXN0IhYKFFBhdXNlV29ya2Zsb3dSZXF1ZXN0Ij0KGVdvcmtlclN0YXRlVXBkYXRlZFJlcXVlc3QSIAoFc3RhdGUYASABK
  AlCCuI/BxIFc3RhdGVSBXN0YXRlIiEKH1dvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFJlcXVlc3QiMwoSTGlua1dvcmtlcnNSZXF1Z
  XN0Eh0KBGxpbmsYASABKAlCCeI/BhIEbGlua1IEbGluayKLAQoEUGluZxIUCgFpGAEgASgFQgbiPwMSAWlSAWkSGgoDZW5kGAIgA
  SgFQgjiPwUSA2VuZFIDZW5kElEKAnRvGAMgASgLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1Y
  WxJZGVudGl0eUIK4j8HEgJ0b/ABAVICdG8iiwEKBFBvbmcSFAoBaRgBIAEoBUIG4j8DEgFpUgFpEhoKA2VuZBgCIAEoBUII4j8FE
  gNlbmRSA2VuZBJRCgJ0bxgDIAEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpd
  HlCCuI/BxICdG/wAQFSAnRvIigKBFBhc3MSIAoFdmFsdWUYASABKAlCCuI/BxIFdmFsdWVSBXZhbHVlIh4KBk5lc3RlZBIUCgFrG
  AEgASgFQgbiPwMSAWtSAWsiXgoJTXVsdGlDYWxsElEKA3NlcRgBIAMoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb
  24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCCOI/BRIDc2VxUgNzZXEiDgoMRXJyb3JDb21tYW5kImgKB0NvbGxlY3QSXQoHd29ya2Vyc
  xgBIAMoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCDOI/CRIHd29ya2Vyc
  1IHd29ya2VycyIQCg5HZW5lcmF0ZU51bWJlciJgCgVDaGFpbhJXCgVuZXh0cxgBIAMoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ
  2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCCuI/BxIFbmV4dHNSBW5leHRzIiEKCVJlY3Vyc2lvbhIUCgFpGAEgASgFQ
  gbiPwMSAWlSAWkqZwoRQ2hhbm5lbE1hcmtlclR5cGUSLQoRUkVRVUlSRV9BTElHTk1FTlQQABoW4j8TEhFSRVFVSVJFX0FMSUdOT
  UVOVBIjCgxOT19BTElHTk1FTlQQARoR4j8OEgxOT19BTElHTk1FTlQqegoSQ29uc29sZU1lc3NhZ2VUeXBlEhUKBVBSSU5UEAAaC
  uI/BxIFUFJJTlQSFQoFRVJST1IQARoK4j8HEgVFUlJPUhIZCgdDT01NQU5EEAIaDOI/CRIHQ09NTUFORBIbCghERUJVR0dFUhADG
  g3iPwoSCERFQlVHR0VSQgniPwZIAFgAeAFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.workflow.WorkflowProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}