// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc.controlcommands

object ControlcommandsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto,
    edu.uci.ics.amber.engine.common.workflow.WorkflowProto,
    edu.uci.ics.amber.engine.architecture.worker.statistics.StatisticsProto,
    edu.uci.ics.amber.engine.architecture.sendsemantics.partitionings.PartitioningsProto,
    scalapb.options.ScalapbProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.any.AnyProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlRequestMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AsyncRPCContext,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PropagateChannelMarkerRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.TakeGlobalCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.DebugCommandRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.EvaluatePythonExpressionRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ModifyLogicRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetryWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetrieveWorkflowStateRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessageTriggeredRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PortCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.StartWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ResumeWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PauseWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerStateUpdatedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerExecutionCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.LinkWorkersRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AddInputChannelRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AddPartitioningRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AssignPortRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.FinalizeCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.InitializeExecutorRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.UpdateExecutorRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.UpdateMultipleExecutorsRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PrepareCheckpointRequest
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cj9lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3JwYy9jb250cm9sY29tbWFuZHMucHJvdG8SKWVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjGjVlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3ZpcnR1Y
  WxpZGVudGl0eS5wcm90bxouZWR1L3VjaS9pY3MvYW1iZXIvZW5naW5lL2NvbW1vbi93b3JrZmxvdy5wcm90bxo9ZWR1L3VjaS9pY
  3MvYW1iZXIvZW5naW5lL2FyY2hpdGVjdHVyZS93b3JrZXIvc3RhdGlzdGljcy5wcm90bxpHZWR1L3VjaS9pY3MvYW1iZXIvZW5na
  W5lL2FyY2hpdGVjdHVyZS9zZW5kc2VtYW50aWNzL3BhcnRpdGlvbmluZ3MucHJvdG8aFXNjYWxhcGIvc2NhbGFwYi5wcm90bxofZ
  29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90byK6IwoOQ29udHJvbFJlcXVlc
  3QStAEKHXByb3BhZ2F0ZUNoYW5uZWxNYXJrZXJSZXF1ZXN0GAEgASgLMkguZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpd
  GVjdHVyZS5ycGMuUHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlcXVlc3RCIuI/HxIdcHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlcXVlc
  3RIAFIdcHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlcXVlc3QSrAEKG3Rha2VHbG9iYWxDaGVja3BvaW50UmVxdWVzdBgCIAEoCzJGL
  mVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlRha2VHbG9iYWxDaGVja3BvaW50UmVxdWVzdEIg4j8dE
  ht0YWtlR2xvYmFsQ2hlY2twb2ludFJlcXVlc3RIAFIbdGFrZUdsb2JhbENoZWNrcG9pbnRSZXF1ZXN0EowBChNkZWJ1Z0NvbW1hb
  mRSZXF1ZXN0GAMgASgLMj4uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuRGVidWdDb21tYW5kUmVxd
  WVzdEIY4j8VEhNkZWJ1Z0NvbW1hbmRSZXF1ZXN0SABSE2RlYnVnQ29tbWFuZFJlcXVlc3QSvAEKH2V2YWx1YXRlUHl0aG9uRXhwc
  mVzc2lvblJlcXVlc3QYBCABKAsySi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5FdmFsdWF0ZVB5d
  GhvbkV4cHJlc3Npb25SZXF1ZXN0QiTiPyESH2V2YWx1YXRlUHl0aG9uRXhwcmVzc2lvblJlcXVlc3RIAFIfZXZhbHVhdGVQeXRob
  25FeHByZXNzaW9uUmVxdWVzdBKIAQoSbW9kaWZ5TG9naWNSZXF1ZXN0GAUgASgLMj0uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mFyY2hpdGVjdHVyZS5ycGMuTW9kaWZ5TG9naWNSZXF1ZXN0QhfiPxQSEm1vZGlmeUxvZ2ljUmVxdWVzdEgAUhJtb2RpZnlMb2dpY
  1JlcXVlc3QSkAEKFHJldHJ5V29ya2Zsb3dSZXF1ZXN0GAYgASgLMj8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjd
  HVyZS5ycGMuUmV0cnlXb3JrZmxvd1JlcXVlc3RCGeI/FhIUcmV0cnlXb3JrZmxvd1JlcXVlc3RIAFIUcmV0cnlXb3JrZmxvd1Jlc
  XVlc3QSsAEKHHJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlcXVlc3QYByABKAsyRy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJja
  Gl0ZWN0dXJlLnJwYy5SZXRyaWV2ZVdvcmtmbG93U3RhdGVSZXF1ZXN0QiHiPx4SHHJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlcXVlc
  3RIAFIccmV0cmlldmVXb3JrZmxvd1N0YXRlUmVxdWVzdBK4AQoeY29uc29sZU1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0GAggASgLM
  kkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29uc29sZU1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0Q
  iPiPyASHmNvbnNvbGVNZXNzYWdlVHJpZ2dlcmVkUmVxdWVzdEgAUh5jb25zb2xlTWVzc2FnZVRyaWdnZXJlZFJlcXVlc3QSkAEKF
  HBvcnRDb21wbGV0ZWRSZXF1ZXN0GAkgASgLMj8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUG9yd
  ENvbXBsZXRlZFJlcXVlc3RCGeI/FhIUcG9ydENvbXBsZXRlZFJlcXVlc3RIAFIUcG9ydENvbXBsZXRlZFJlcXVlc3QSkAEKFHN0Y
  XJ0V29ya2Zsb3dSZXF1ZXN0GAogASgLMj8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuU3RhcnRXb
  3JrZmxvd1JlcXVlc3RCGeI/FhIUc3RhcnRXb3JrZmxvd1JlcXVlc3RIAFIUc3RhcnRXb3JrZmxvd1JlcXVlc3QSlAEKFXJlc3VtZ
  VdvcmtmbG93UmVxdWVzdBgLIAEoCzJALmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlJlc3VtZVdvc
  mtmbG93UmVxdWVzdEIa4j8XEhVyZXN1bWVXb3JrZmxvd1JlcXVlc3RIAFIVcmVzdW1lV29ya2Zsb3dSZXF1ZXN0EpABChRwYXVzZ
  VdvcmtmbG93UmVxdWVzdBgMIAEoCzI/LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlBhdXNlV29ya
  2Zsb3dSZXF1ZXN0QhniPxYSFHBhdXNlV29ya2Zsb3dSZXF1ZXN0SABSFHBhdXNlV29ya2Zsb3dSZXF1ZXN0EqQBChl3b3JrZXJTd
  GF0ZVVwZGF0ZWRSZXF1ZXN0GA0gASgLMkQuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuV29ya2VyU
  3RhdGVVcGRhdGVkUmVxdWVzdEIe4j8bEhl3b3JrZXJTdGF0ZVVwZGF0ZWRSZXF1ZXN0SABSGXdvcmtlclN0YXRlVXBkYXRlZFJlc
  XVlc3QSvAEKH3dvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFJlcXVlc3QYDiABKAsySi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  XJjaGl0ZWN0dXJlLnJwYy5Xb3JrZXJFeGVjdXRpb25Db21wbGV0ZWRSZXF1ZXN0QiTiPyESH3dvcmtlckV4ZWN1dGlvbkNvbXBsZ
  XRlZFJlcXVlc3RIAFIfd29ya2VyRXhlY3V0aW9uQ29tcGxldGVkUmVxdWVzdBKIAQoSbGlua1dvcmtlcnNSZXF1ZXN0GA8gASgLM
  j0uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuTGlua1dvcmtlcnNSZXF1ZXN0QhfiPxQSEmxpbmtXb
  3JrZXJzUmVxdWVzdEgAUhJsaW5rV29ya2Vyc1JlcXVlc3QSUAoEcGluZxgQIAEoCzIvLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZ
  S5hcmNoaXRlY3R1cmUucnBjLlBpbmdCCeI/BhIEcGluZ0gAUgRwaW5nElAKBHBvbmcYESABKAsyLy5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qb25nQgniPwYSBHBvbmdIAFIEcG9uZxJYCgZuZXN0ZWQYEiABKAsyMS5lZHUudWNpL
  mljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5OZXN0ZWRCC+I/CBIGbmVzdGVkSABSBm5lc3RlZBJQCgRwYXNzGBMgA
  SgLMi8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUGFzc0IJ4j8GEgRwYXNzSABSBHBhc3MScAoMZ
  XJyb3JDb21tYW5kGBQgASgLMjcuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuRXJyb3JDb21tYW5kQ
  hHiPw4SDGVycm9yQ29tbWFuZEgAUgxlcnJvckNvbW1hbmQSZAoJcmVjdXJzaW9uGBUgASgLMjQuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUmVjdXJzaW9uQg7iPwsSCXJlY3Vyc2lvbkgAUglyZWN1cnNpb24SXAoHY29sbGVjdBgWI
  AEoCzIyLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbGxlY3RCDOI/CRIHY29sbGVjdEgAUgdjb
  2xsZWN0EngKDmdlbmVyYXRlTnVtYmVyGBcgASgLMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuR
  2VuZXJhdGVOdW1iZXJCE+I/EBIOZ2VuZXJhdGVOdW1iZXJIAFIOZ2VuZXJhdGVOdW1iZXISZAoJbXVsdGlDYWxsGBggASgLMjQuZ
  WR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuTXVsdGlDYWxsQg7iPwsSCW11bHRpQ2FsbEgAUgltdWx0a
  UNhbGwSVAoFY2hhaW4YGSABKAsyMC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5DaGFpbkIK4j8HE
  gVjaGFpbkgAUgVjaGFpbhKYAQoWYWRkSW5wdXRDaGFubmVsUmVxdWVzdBgaIAEoCzJBLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZ
  S5hcmNoaXRlY3R1cmUucnBjLkFkZElucHV0Q2hhbm5lbFJlcXVlc3RCG+I/GBIWYWRkSW5wdXRDaGFubmVsUmVxdWVzdEgAUhZhZ
  GRJbnB1dENoYW5uZWxSZXF1ZXN0EpgBChZhZGRQYXJ0aXRpb25pbmdSZXF1ZXN0GBsgASgLMkEuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQWRkUGFydGl0aW9uaW5nUmVxdWVzdEIb4j8YEhZhZGRQYXJ0aXRpb25pbmdSZXF1ZXN0S
  ABSFmFkZFBhcnRpdGlvbmluZ1JlcXVlc3QShAEKEWFzc2lnblBvcnRSZXF1ZXN0GBwgASgLMjwuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQXNzaWduUG9ydFJlcXVlc3RCFuI/ExIRYXNzaWduUG9ydFJlcXVlc3RIAFIRYXNzaWduU
  G9ydFJlcXVlc3QSpAEKGWZpbmFsaXplQ2hlY2twb2ludFJlcXVlc3QYHSABKAsyRC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  XJjaGl0ZWN0dXJlLnJwYy5GaW5hbGl6ZUNoZWNrcG9pbnRSZXF1ZXN0Qh7iPxsSGWZpbmFsaXplQ2hlY2twb2ludFJlcXVlc3RIA
  FIZZmluYWxpemVDaGVja3BvaW50UmVxdWVzdBKkAQoZaW5pdGlhbGl6ZUV4ZWN1dG9yUmVxdWVzdBgeIAEoCzJELmVkdS51Y2kua
  WNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkluaXRpYWxpemVFeGVjdXRvclJlcXVlc3RCHuI/GxIZaW5pdGlhbGl6Z
  UV4ZWN1dG9yUmVxdWVzdEgAUhlpbml0aWFsaXplRXhlY3V0b3JSZXF1ZXN0EpQBChV1cGRhdGVFeGVjdXRvclJlcXVlc3QYHyABK
  AsyQC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5VcGRhdGVFeGVjdXRvclJlcXVlc3RCGuI/FxIVd
  XBkYXRlRXhlY3V0b3JSZXF1ZXN0SABSFXVwZGF0ZUV4ZWN1dG9yUmVxdWVzdBK4AQoedXBkYXRlTXVsdGlwbGVFeGVjdXRvcnNSZ
  XF1ZXN0GCAgASgLMkkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuVXBkYXRlTXVsdGlwbGVFeGVjd
  XRvcnNSZXF1ZXN0QiPiPyASHnVwZGF0ZU11bHRpcGxlRXhlY3V0b3JzUmVxdWVzdEgAUh51cGRhdGVNdWx0aXBsZUV4ZWN1dG9yc
  1JlcXVlc3RCDgoMc2VhbGVkX3ZhbHVlItwBCg9Bc3luY1JQQ0NvbnRleHQSXQoGc2VuZGVyGAEgASgLMjUuZWR1LnVjaS5pY3MuY
  W1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIO4j8LEgZzZW5kZXLwAQFSBnNlbmRlchJjCghyZWNlaXZlc
  hgCIAEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCEOI/DRIIcmVjZWl2Z
  XLwAQFSCHJlY2VpdmVyOgXiPwI4ASKAAwoRQ29udHJvbEludm9jYXRpb24SLwoKbWV0aG9kTmFtZRgBIAEoCUIP4j8MEgptZXRob
  2ROYW1lUgptZXRob2ROYW1lEmQKB2NvbW1hbmQYAiABKAsyOS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlL
  nJwYy5Db250cm9sUmVxdWVzdEIP4j8MEgdjb21tYW5k8AEBUgdjb21tYW5kEmIKB2NvbnRleHQYAyABKAsyOi5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Bc3luY1JQQ0NvbnRleHRCDOI/CRIHY29udGV4dFIHY29udGV4dBIsCgljb
  21tYW5kSWQYBCABKANCDuI/CxIJY29tbWFuZElkUgljb21tYW5kSWQ6QuI/Pwo7ZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvb
  W1vbi5hbWJlcm1lc3NhZ2UuQ29udHJvbFBheWxvYWQ4ASKmBQoUQ2hhbm5lbE1hcmtlclBheWxvYWQSUgoCaWQYASABKAsyNi5lZ
  HUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZWxNYXJrZXJJZGVudGl0eUIK4j8HEgJpZPABAVICaWQSbQoKbWFya
  2VyVHlwZRgCIAEoDjI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNoYW5uZWxNYXJrZXJUeXBlQ
  g/iPwwSCm1hcmtlclR5cGVSCm1hcmtlclR5cGUSUgoFc2NvcGUYAyADKAsyMC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tb
  W9uLkNoYW5uZWxJZGVudGl0eUIK4j8HEgVzY29wZVIFc2NvcGUSkAEKDmNvbW1hbmRNYXBwaW5nGAQgAygLMlMuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ2hhbm5lbE1hcmtlclBheWxvYWQuQ29tbWFuZE1hcHBpbmdFbnRyeUIT4
  j8QEg5jb21tYW5kTWFwcGluZ1IOY29tbWFuZE1hcHBpbmcalQEKE0NvbW1hbmRNYXBwaW5nRW50cnkSGgoDa2V5GAEgASgJQgjiP
  wUSA2tleVIDa2V5El4KBXZhbHVlGAIgASgLMjwuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29ud
  HJvbEludm9jYXRpb25CCuI/BxIFdmFsdWVSBXZhbHVlOgI4ATpM4j9JCkdlZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uL
  mFtYmVybWVzc2FnZS5Xb3JrZmxvd0ZJRk9NZXNzYWdlUGF5bG9hZCLVBQodUHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlcXVlc3QSf
  woTc291cmNlT3BUb1N0YXJ0UHJvcBgBIAMoCzIzLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uUGh5c2ljYWxPcElkZ
  W50aXR5QhjiPxUSE3NvdXJjZU9wVG9TdGFydFByb3BSE3NvdXJjZU9wVG9TdGFydFByb3ASUgoCaWQYAiABKAsyNi5lZHUudWNpL
  mljcy5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZWxNYXJrZXJJZGVudGl0eUIK4j8HEgJpZPABAVICaWQSbQoKbWFya2VyVHlwZ
  RgDIAEoDjI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNoYW5uZWxNYXJrZXJUeXBlQg/iPwwSC
  m1hcmtlclR5cGVSCm1hcmtlclR5cGUSVQoFc2NvcGUYBCADKAsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBoe
  XNpY2FsT3BJZGVudGl0eUIK4j8HEgVzY29wZVIFc2NvcGUSYQoJdGFyZ2V0T3BzGAUgAygLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5QaHlzaWNhbE9wSWRlbnRpdHlCDuI/CxIJdGFyZ2V0T3BzUgl0YXJnZXRPcHMScwoNbWFya2VyQ29tbWFuZ
  BgGIAEoCzI5LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnRyb2xSZXF1ZXN0QhLiPw8SDW1hc
  mtlckNvbW1hbmRSDW1hcmtlckNvbW1hbmQSQQoQbWFya2VyTWV0aG9kTmFtZRgHIAEoCUIV4j8SEhBtYXJrZXJNZXRob2ROYW1lU
  hBtYXJrZXJNZXRob2ROYW1lIv0BChtUYWtlR2xvYmFsQ2hlY2twb2ludFJlcXVlc3QSOwoOZXN0aW1hdGlvbk9ubHkYASABKAhCE
  +I/EBIOZXN0aW1hdGlvbk9ubHlSDmVzdGltYXRpb25Pbmx5Em0KDGNoZWNrcG9pbnRJZBgCIAEoCzI2LmVkdS51Y2kuaWNzLmFtY
  mVyLmVuZ2luZS5jb21tb24uQ2hhbm5lbE1hcmtlcklkZW50aXR5QhHiPw4SDGNoZWNrcG9pbnRJZFIMY2hlY2twb2ludElkEjIKC
  2Rlc3RpbmF0aW9uGAMgASgJQhDiPw0SC2Rlc3RpbmF0aW9uUgtkZXN0aW5hdGlvbiJcChNEZWJ1Z0NvbW1hbmRSZXF1ZXN0EikKC
  HdvcmtlcklkGAEgASgJQg3iPwoSCHdvcmtlcklkUgh3b3JrZXJJZBIaCgNjbWQYAiABKAlCCOI/BRIDY21kUgNjbWQigwEKH0V2Y
  Wx1YXRlUHl0aG9uRXhwcmVzc2lvblJlcXVlc3QSLwoKZXhwcmVzc2lvbhgBIAEoCUIP4j8MEgpleHByZXNzaW9uUgpleHByZXNza
  W9uEi8KCm9wZXJhdG9ySWQYAiABKAlCD+I/DBIKb3BlcmF0b3JJZFIKb3BlcmF0b3JJZCLKAQoSTW9kaWZ5TG9naWNSZXF1ZXN0E
  lgKBW5ld09wGAEgASgLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5QaHlzaWNhbE9wSWRlbnRpdHlCDeI/ChIFb
  mV3T3DwAQFSBW5ld09wEloKEXN0YXRlVHJhbnNmZXJGdW5jGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIW4j8TEhFzdGF0Z
  VRyYW5zZmVyRnVuY1IRc3RhdGVUcmFuc2ZlckZ1bmMidQoUUmV0cnlXb3JrZmxvd1JlcXVlc3QSXQoHd29ya2VycxgBIAMoCzI1L
  mVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCDOI/CRIHd29ya2Vyc1IHd29ya2Vyc
  yKjAwoOQ29uc29sZU1lc3NhZ2USKgoJd29ya2VyX2lkGAEgASgJQg3iPwoSCHdvcmtlcklkUgh3b3JrZXJJZBJLCgl0aW1lc3Rhb
  XAYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQhHiPw4SCXRpbWVzdGFtcPABAVIJdGltZXN0YW1wEmYKCG1zZ190e
  XBlGAMgASgOMj0uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29uc29sZU1lc3NhZ2VUeXBlQgziP
  wkSB21zZ1R5cGVSB21zZ1R5cGUSIwoGc291cmNlGAQgASgJQgviPwgSBnNvdXJjZVIGc291cmNlEiAKBXRpdGxlGAUgASgJQgriP
  wcSBXRpdGxlUgV0aXRsZRImCgdtZXNzYWdlGAYgASgJQgziPwkSB21lc3NhZ2VSB21lc3NhZ2U6QeI/Pgo8ZWR1LnVjaS5pY3MuY
  W1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5jb250cm9sbGVyLkNsaWVudEV2ZW50Ih4KHFJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlc
  XVlc3QimwEKHkNvbnNvbGVNZXNzYWdlVHJpZ2dlcmVkUmVxdWVzdBJ5Cg5jb25zb2xlTWVzc2FnZRgBIAEoCzI5LmVkdS51Y2kua
  WNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnNvbGVNZXNzYWdlQhbiPxMSDmNvbnNvbGVNZXNzYWdl8AEBUg5jb
  25zb2xlTWVzc2FnZSKMAQoUUG9ydENvbXBsZXRlZFJlcXVlc3QSUgoGcG9ydElkGAEgASgLMi0uZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5Qb3J0SWRlbnRpdHlCC+I/CBIGcG9ydElkUgZwb3J0SWQSIAoFaW5wdXQYAiABKAhCCuI/BxIFaW5wdXRSB
  WlucHV0IhYKFFN0YXJ0V29ya2Zsb3dSZXF1ZXN0IhcKFVJlc3VtZVdvcmtmbG93UmVxdWVzdCIWChRQYXVzZVdvcmtmbG93UmVxd
  WVzdCJ4ChlXb3JrZXJTdGF0ZVVwZGF0ZWRSZXF1ZXN0ElsKBXN0YXRlGAEgASgOMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mFyY2hpdGVjdHVyZS53b3JrZXIuV29ya2VyU3RhdGVCCuI/BxIFc3RhdGVSBXN0YXRlIiEKH1dvcmtlckV4ZWN1dGlvbkNvbXBsZ
  XRlZFJlcXVlc3QiZQoSTGlua1dvcmtlcnNSZXF1ZXN0Ek8KBGxpbmsYASABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  29tbW9uLlBoeXNpY2FsTGlua0IM4j8JEgRsaW5r8AEBUgRsaW5rIosBCgRQaW5nEhQKAWkYASABKAVCBuI/AxIBaVIBaRIaCgNlb
  mQYAiABKAVCCOI/BRIDZW5kUgNlbmQSUQoCdG8YAyABKAsyNS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkFjdG9yV
  mlydHVhbElkZW50aXR5QgriPwcSAnRv8AEBUgJ0byKLAQoEUG9uZxIUCgFpGAEgASgFQgbiPwMSAWlSAWkSGgoDZW5kGAIgASgFQ
  gjiPwUSA2VuZFIDZW5kElEKAnRvGAMgASgLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZ
  GVudGl0eUIK4j8HEgJ0b/ABAVICdG8iKAoEUGFzcxIgCgV2YWx1ZRgBIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWUiHgoGTmVzdGVkE
  hQKAWsYASABKAVCBuI/AxIBa1IBayJeCglNdWx0aUNhbGwSUQoDc2VxGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUII4j8FEgNzZXFSA3NlcSIOCgxFcnJvckNvbW1hbmQiaAoHQ29sbGVjdBJdCgd3b
  3JrZXJzGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIM4j8JEgd3b
  3JrZXJzUgd3b3JrZXJzIhAKDkdlbmVyYXRlTnVtYmVyImAKBUNoYWluElcKBW5leHRzGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZ
  XIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIK4j8HEgVuZXh0c1IFbmV4dHMiIQoJUmVjdXJzaW9uEhQKAWkYA
  SABKAVCBuI/AxIBaVIBaSLSAQoWQWRkSW5wdXRDaGFubmVsUmVxdWVzdBJhCgljaGFubmVsSWQYASABKAsyMC5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZWxJZGVudGl0eUIR4j8OEgljaGFubmVsSWTwAQFSCWNoYW5uZWxJZBJVCgZwb3J0S
  WQYAiABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBvcnRJZGVudGl0eUIO4j8LEgZwb3J0SWTwAQFSBnBvc
  nRJZCLjAQoWQWRkUGFydGl0aW9uaW5nUmVxdWVzdBJMCgN0YWcYASABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tb
  W9uLlBoeXNpY2FsTGlua0IL4j8IEgN0YWfwAQFSA3RhZxJ7CgxwYXJ0aXRpb25pbmcYAiABKAsyQS5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnNlbmRzZW1hbnRpY3MuUGFydGl0aW9uaW5nQhTiPxESDHBhcnRpdGlvbmluZ/ABAVIMcGFyd
  Gl0aW9uaW5nIswCChFBc3NpZ25Qb3J0UmVxdWVzdBJVCgZwb3J0SWQYASABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  29tbW9uLlBvcnRJZGVudGl0eUIO4j8LEgZwb3J0SWTwAQFSBnBvcnRJZBIgCgVpbnB1dBgCIAEoCEIK4j8HEgVpbnB1dFIFaW5wd
  XQSbQoGc2NoZW1hGAMgAygLMkguZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQXNzaWduUG9ydFJlc
  XVlc3QuU2NoZW1hRW50cnlCC+I/CBIGc2NoZW1hUgZzY2hlbWEaTwoLU2NoZW1hRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tle
  VIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEitQEKGUZpbmFsaXplQ2hlY2twb2ludFJlcXVlc3QSc
  AoMY2hlY2twb2ludElkGAEgASgLMjYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFubmVsTWFya2VySWRlbnRpd
  HlCFOI/ERIMY2hlY2twb2ludElk8AEBUgxjaGVja3BvaW50SWQSJgoHd3JpdGVUbxgCIAEoCUIM4j8JEgd3cml0ZVRvUgd3cml0Z
  VRvItwBChlJbml0aWFsaXplRXhlY3V0b3JSZXF1ZXN0EkEKEHRvdGFsV29ya2VyQ291bnQYASABKAVCFeI/EhIQdG90YWxXb3JrZ
  XJDb3VudFIQdG90YWxXb3JrZXJDb3VudBJRCg5vcEV4ZWNJbml0SW5mbxgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCE+I/E
  BIOb3BFeGVjSW5pdEluZm9SDm9wRXhlY0luaXRJbmZvEikKCGlzU291cmNlGAMgASgIQg3iPwoSCGlzU291cmNlUghpc1NvdXJjZ
  SLcAQoVVXBkYXRlRXhlY3V0b3JSZXF1ZXN0EmcKCnBoeXNpY2FsT3AYASABKAsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  29tbW9uLlBoeXNpY2FsT3BJZGVudGl0eUIS4j8PEgpwaHlzaWNhbE9w8AEBUgpwaHlzaWNhbE9wEloKEXN0YXRlVHJhbnNmZXJGd
  W5jGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIW4j8TEhFzdGF0ZVRyYW5zZmVyRnVuY1IRc3RhdGVUcmFuc2ZlckZ1bmMiq
  QEKHlVwZGF0ZU11bHRpcGxlRXhlY3V0b3JzUmVxdWVzdBKGAQoRZXhlY3V0b3JzVG9VcGRhdGUYASADKAsyQC5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5VcGRhdGVFeGVjdXRvclJlcXVlc3RCFuI/ExIRZXhlY3V0b3JzVG9VcGRhd
  GVSEWV4ZWN1dG9yc1RvVXBkYXRlIskBChhQcmVwYXJlQ2hlY2twb2ludFJlcXVlc3QScAoMY2hlY2twb2ludElkGAEgASgLMjYuZ
  WR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFubmVsTWFya2VySWRlbnRpdHlCFOI/ERIMY2hlY2twb2ludElk8AEBU
  gxjaGVja3BvaW50SWQSOwoOZXN0aW1hdGlvbk9ubHkYAiABKAhCE+I/EBIOZXN0aW1hdGlvbk9ubHlSDmVzdGltYXRpb25Pbmx5K
  mcKEUNoYW5uZWxNYXJrZXJUeXBlEi0KEVJFUVVJUkVfQUxJR05NRU5UEAAaFuI/ExIRUkVRVUlSRV9BTElHTk1FTlQSIwoMTk9fQ
  UxJR05NRU5UEAEaEeI/DhIMTk9fQUxJR05NRU5UKnoKEkNvbnNvbGVNZXNzYWdlVHlwZRIVCgVQUklOVBAAGgriPwcSBVBSSU5UE
  hUKBUVSUk9SEAEaCuI/BxIFRVJST1ISGQoHQ09NTUFORBACGgziPwkSB0NPTU1BTkQSGwoIREVCVUdHRVIQAxoN4j8KEghERUJVR
  0dFUkIJ4j8GSABYAHgBYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.workflow.WorkflowProto.javaDescriptor,
      edu.uci.ics.amber.engine.architecture.worker.statistics.StatisticsProto.javaDescriptor,
      edu.uci.ics.amber.engine.architecture.sendsemantics.partitionings.PartitioningsProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}