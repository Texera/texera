// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc.controlcommands

object ControlcommandsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto,
    edu.uci.ics.amber.engine.common.workflow.WorkflowProto,
    edu.uci.ics.amber.engine.architecture.worker.statistics.StatisticsProto,
    scalapb.options.ScalapbProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.any.AnyProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlRequestMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AsyncRPCContext,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PropagateChannelMarkerRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.TakeGlobalCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.DebugCommandRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.EvaluatePythonExpressionRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ModifyLogicRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetryWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetrieveWorkflowStateRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessageTriggeredRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PortCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.StartWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ResumeWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PauseWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerStateUpdatedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerExecutionCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.LinkWorkersRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AddInputChannelRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AddPartitioningRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AssignPortRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.FinalizeCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.InitializeExecutorRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.UpdateExecutorRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.UpdateMultipleExecutorsRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.UpdateExecutorCompletedRequest
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cj9lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3JwYy9jb250cm9sY29tbWFuZHMucHJvdG8SKWVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjGjVlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3ZpcnR1Y
  WxpZGVudGl0eS5wcm90bxouZWR1L3VjaS9pY3MvYW1iZXIvZW5naW5lL2NvbW1vbi93b3JrZmxvdy5wcm90bxo9ZWR1L3VjaS9pY
  3MvYW1iZXIvZW5naW5lL2FyY2hpdGVjdHVyZS93b3JrZXIvc3RhdGlzdGljcy5wcm90bxoVc2NhbGFwYi9zY2FsYXBiLnByb3RvG
  h9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvIvUkCg5Db250cm9sUmVxd
  WVzdBK0AQodcHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlcXVlc3QYASABKAsySC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJja
  Gl0ZWN0dXJlLnJwYy5Qcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdEIi4j8fEh1wcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxd
  WVzdEgAUh1wcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdBKsAQobdGFrZUdsb2JhbENoZWNrcG9pbnRSZXF1ZXN0GAIgASgLM
  kYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuVGFrZUdsb2JhbENoZWNrcG9pbnRSZXF1ZXN0QiDiP
  x0SG3Rha2VHbG9iYWxDaGVja3BvaW50UmVxdWVzdEgAUht0YWtlR2xvYmFsQ2hlY2twb2ludFJlcXVlc3QSjAEKE2RlYnVnQ29tb
  WFuZFJlcXVlc3QYAyABKAsyPi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5EZWJ1Z0NvbW1hbmRSZ
  XF1ZXN0QhjiPxUSE2RlYnVnQ29tbWFuZFJlcXVlc3RIAFITZGVidWdDb21tYW5kUmVxdWVzdBK8AQofZXZhbHVhdGVQeXRob25Fe
  HByZXNzaW9uUmVxdWVzdBgEIAEoCzJKLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkV2YWx1YXRlU
  Hl0aG9uRXhwcmVzc2lvblJlcXVlc3RCJOI/IRIfZXZhbHVhdGVQeXRob25FeHByZXNzaW9uUmVxdWVzdEgAUh9ldmFsdWF0ZVB5d
  GhvbkV4cHJlc3Npb25SZXF1ZXN0EogBChJtb2RpZnlMb2dpY1JlcXVlc3QYBSABKAsyPS5lZHUudWNpLmljcy5hbWJlci5lbmdpb
  mUuYXJjaGl0ZWN0dXJlLnJwYy5Nb2RpZnlMb2dpY1JlcXVlc3RCF+I/FBISbW9kaWZ5TG9naWNSZXF1ZXN0SABSEm1vZGlmeUxvZ
  2ljUmVxdWVzdBKQAQoUcmV0cnlXb3JrZmxvd1JlcXVlc3QYBiABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0Z
  WN0dXJlLnJwYy5SZXRyeVdvcmtmbG93UmVxdWVzdEIZ4j8WEhRyZXRyeVdvcmtmbG93UmVxdWVzdEgAUhRyZXRyeVdvcmtmbG93U
  mVxdWVzdBKwAQoccmV0cmlldmVXb3JrZmxvd1N0YXRlUmVxdWVzdBgHIAEoCzJHLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hc
  mNoaXRlY3R1cmUucnBjLlJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlcXVlc3RCIeI/HhIccmV0cmlldmVXb3JrZmxvd1N0YXRlUmVxd
  WVzdEgAUhxyZXRyaWV2ZVdvcmtmbG93U3RhdGVSZXF1ZXN0ErgBCh5jb25zb2xlTWVzc2FnZVRyaWdnZXJlZFJlcXVlc3QYCCABK
  AsySS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Db25zb2xlTWVzc2FnZVRyaWdnZXJlZFJlcXVlc
  3RCI+I/IBIeY29uc29sZU1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0SABSHmNvbnNvbGVNZXNzYWdlVHJpZ2dlcmVkUmVxdWVzdBKQA
  QoUcG9ydENvbXBsZXRlZFJlcXVlc3QYCSABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qb
  3J0Q29tcGxldGVkUmVxdWVzdEIZ4j8WEhRwb3J0Q29tcGxldGVkUmVxdWVzdEgAUhRwb3J0Q29tcGxldGVkUmVxdWVzdBKQAQoUc
  3RhcnRXb3JrZmxvd1JlcXVlc3QYCiABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5TdGFyd
  FdvcmtmbG93UmVxdWVzdEIZ4j8WEhRzdGFydFdvcmtmbG93UmVxdWVzdEgAUhRzdGFydFdvcmtmbG93UmVxdWVzdBKUAQoVcmVzd
  W1lV29ya2Zsb3dSZXF1ZXN0GAsgASgLMkAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUmVzdW1lV
  29ya2Zsb3dSZXF1ZXN0QhriPxcSFXJlc3VtZVdvcmtmbG93UmVxdWVzdEgAUhVyZXN1bWVXb3JrZmxvd1JlcXVlc3QSkAEKFHBhd
  XNlV29ya2Zsb3dSZXF1ZXN0GAwgASgLMj8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUGF1c2VXb
  3JrZmxvd1JlcXVlc3RCGeI/FhIUcGF1c2VXb3JrZmxvd1JlcXVlc3RIAFIUcGF1c2VXb3JrZmxvd1JlcXVlc3QSpAEKGXdvcmtlc
  lN0YXRlVXBkYXRlZFJlcXVlc3QYDSABKAsyRC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Xb3JrZ
  XJTdGF0ZVVwZGF0ZWRSZXF1ZXN0Qh7iPxsSGXdvcmtlclN0YXRlVXBkYXRlZFJlcXVlc3RIAFIZd29ya2VyU3RhdGVVcGRhdGVkU
  mVxdWVzdBK8AQofd29ya2VyRXhlY3V0aW9uQ29tcGxldGVkUmVxdWVzdBgOIAEoCzJKLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZ
  S5hcmNoaXRlY3R1cmUucnBjLldvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFJlcXVlc3RCJOI/IRIfd29ya2VyRXhlY3V0aW9uQ29tc
  GxldGVkUmVxdWVzdEgAUh93b3JrZXJFeGVjdXRpb25Db21wbGV0ZWRSZXF1ZXN0EogBChJsaW5rV29ya2Vyc1JlcXVlc3QYDyABK
  AsyPS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5MaW5rV29ya2Vyc1JlcXVlc3RCF+I/FBISbGlua
  1dvcmtlcnNSZXF1ZXN0SABSEmxpbmtXb3JrZXJzUmVxdWVzdBJQCgRwaW5nGBAgASgLMi8uZWR1LnVjaS5pY3MuYW1iZXIuZW5na
  W5lLmFyY2hpdGVjdHVyZS5ycGMuUGluZ0IJ4j8GEgRwaW5nSABSBHBpbmcSUAoEcG9uZxgRIAEoCzIvLmVkdS51Y2kuaWNzLmFtY
  mVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlBvbmdCCeI/BhIEcG9uZ0gAUgRwb25nElgKBm5lc3RlZBgSIAEoCzIxLmVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLk5lc3RlZEIL4j8IEgZuZXN0ZWRIAFIGbmVzdGVkElAKBHBhc3MYE
  yABKAsyLy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5QYXNzQgniPwYSBHBhc3NIAFIEcGFzcxJwC
  gxlcnJvckNvbW1hbmQYFCABKAsyNy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5FcnJvckNvbW1hb
  mRCEeI/DhIMZXJyb3JDb21tYW5kSABSDGVycm9yQ29tbWFuZBJkCglyZWN1cnNpb24YFSABKAsyNC5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5SZWN1cnNpb25CDuI/CxIJcmVjdXJzaW9uSABSCXJlY3Vyc2lvbhJcCgdjb2xsZWN0G
  BYgASgLMjIuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29sbGVjdEIM4j8JEgdjb2xsZWN0SABSB
  2NvbGxlY3QSeAoOZ2VuZXJhdGVOdW1iZXIYFyABKAsyOS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwY
  y5HZW5lcmF0ZU51bWJlckIT4j8QEg5nZW5lcmF0ZU51bWJlckgAUg5nZW5lcmF0ZU51bWJlchJkCgltdWx0aUNhbGwYGCABKAsyN
  C5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5NdWx0aUNhbGxCDuI/CxIJbXVsdGlDYWxsSABSCW11b
  HRpQ2FsbBJUCgVjaGFpbhgZIAEoCzIwLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNoYWluQgriP
  wcSBWNoYWluSABSBWNoYWluEpgBChZhZGRJbnB1dENoYW5uZWxSZXF1ZXN0GBogASgLMkEuZWR1LnVjaS5pY3MuYW1iZXIuZW5na
  W5lLmFyY2hpdGVjdHVyZS5ycGMuQWRkSW5wdXRDaGFubmVsUmVxdWVzdEIb4j8YEhZhZGRJbnB1dENoYW5uZWxSZXF1ZXN0SABSF
  mFkZElucHV0Q2hhbm5lbFJlcXVlc3QSmAEKFmFkZFBhcnRpdGlvbmluZ1JlcXVlc3QYGyABKAsyQS5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5BZGRQYXJ0aXRpb25pbmdSZXF1ZXN0QhviPxgSFmFkZFBhcnRpdGlvbmluZ1JlcXVlc
  3RIAFIWYWRkUGFydGl0aW9uaW5nUmVxdWVzdBKEAQoRYXNzaWduUG9ydFJlcXVlc3QYHCABKAsyPC5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Bc3NpZ25Qb3J0UmVxdWVzdEIW4j8TEhFhc3NpZ25Qb3J0UmVxdWVzdEgAUhFhc3NpZ
  25Qb3J0UmVxdWVzdBKkAQoZZmluYWxpemVDaGVja3BvaW50UmVxdWVzdBgdIAEoCzJELmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZ
  S5hcmNoaXRlY3R1cmUucnBjLkZpbmFsaXplQ2hlY2twb2ludFJlcXVlc3RCHuI/GxIZZmluYWxpemVDaGVja3BvaW50UmVxdWVzd
  EgAUhlmaW5hbGl6ZUNoZWNrcG9pbnRSZXF1ZXN0EqQBChlpbml0aWFsaXplRXhlY3V0b3JSZXF1ZXN0GB4gASgLMkQuZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuSW5pdGlhbGl6ZUV4ZWN1dG9yUmVxdWVzdEIe4j8bEhlpbml0aWFsa
  XplRXhlY3V0b3JSZXF1ZXN0SABSGWluaXRpYWxpemVFeGVjdXRvclJlcXVlc3QSlAEKFXVwZGF0ZUV4ZWN1dG9yUmVxdWVzdBgfI
  AEoCzJALmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlVwZGF0ZUV4ZWN1dG9yUmVxdWVzdEIa4j8XE
  hV1cGRhdGVFeGVjdXRvclJlcXVlc3RIAFIVdXBkYXRlRXhlY3V0b3JSZXF1ZXN0ErgBCh51cGRhdGVNdWx0aXBsZUV4ZWN1dG9yc
  1JlcXVlc3QYICABKAsySS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5VcGRhdGVNdWx0aXBsZUV4Z
  WN1dG9yc1JlcXVlc3RCI+I/IBIedXBkYXRlTXVsdGlwbGVFeGVjdXRvcnNSZXF1ZXN0SABSHnVwZGF0ZU11bHRpcGxlRXhlY3V0b
  3JzUmVxdWVzdBK4AQoedXBkYXRlRXhlY3V0b3JDb21wbGV0ZWRSZXF1ZXN0GCEgASgLMkkuZWR1LnVjaS5pY3MuYW1iZXIuZW5na
  W5lLmFyY2hpdGVjdHVyZS5ycGMuVXBkYXRlRXhlY3V0b3JDb21wbGV0ZWRSZXF1ZXN0QiPiPyASHnVwZGF0ZUV4ZWN1dG9yQ29tc
  GxldGVkUmVxdWVzdEgAUh51cGRhdGVFeGVjdXRvckNvbXBsZXRlZFJlcXVlc3RCDgoMc2VhbGVkX3ZhbHVlItwBCg9Bc3luY1JQQ
  0NvbnRleHQSXQoGc2VuZGVyGAEgASgLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVud
  Gl0eUIO4j8LEgZzZW5kZXLwAQFSBnNlbmRlchJjCghyZWNlaXZlchgCIAEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb
  21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCEOI/DRIIcmVjZWl2ZXLwAQFSCHJlY2VpdmVyOgXiPwI4ASKAAwoRQ29udHJvbElud
  m9jYXRpb24SLwoKbWV0aG9kTmFtZRgBIAEoCUIP4j8MEgptZXRob2ROYW1lUgptZXRob2ROYW1lEmQKB2NvbW1hbmQYAiABKAsyO
  S5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Db250cm9sUmVxdWVzdEIP4j8MEgdjb21tYW5k8AEBU
  gdjb21tYW5kEmIKB2NvbnRleHQYAyABKAsyOi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Bc3luY
  1JQQ0NvbnRleHRCDOI/CRIHY29udGV4dFIHY29udGV4dBIsCgljb21tYW5kSWQYBCABKANCDuI/CxIJY29tbWFuZElkUgljb21tY
  W5kSWQ6QuI/Pwo7ZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5hbWJlcm1lc3NhZ2UuQ29udHJvbFBheWxvYWQ4ASKmB
  QoUQ2hhbm5lbE1hcmtlclBheWxvYWQSUgoCaWQYASABKAsyNi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZ
  WxNYXJrZXJJZGVudGl0eUIK4j8HEgJpZPABAVICaWQSbQoKbWFya2VyVHlwZRgCIAEoDjI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ
  2luZS5hcmNoaXRlY3R1cmUucnBjLkNoYW5uZWxNYXJrZXJUeXBlQg/iPwwSCm1hcmtlclR5cGVSCm1hcmtlclR5cGUSUgoFc2Nvc
  GUYAyADKAsyMC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZWxJZGVudGl0eUIK4j8HEgVzY29wZVIFc2Nvc
  GUSkAEKDmNvbW1hbmRNYXBwaW5nGAQgAygLMlMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ2hhb
  m5lbE1hcmtlclBheWxvYWQuQ29tbWFuZE1hcHBpbmdFbnRyeUIT4j8QEg5jb21tYW5kTWFwcGluZ1IOY29tbWFuZE1hcHBpbmcal
  QEKE0NvbW1hbmRNYXBwaW5nRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5El4KBXZhbHVlGAIgASgLMjwuZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29udHJvbEludm9jYXRpb25CCuI/BxIFdmFsdWVSBXZhbHVlOgI4A
  TpM4j9JCkdlZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLmFtYmVybWVzc2FnZS5Xb3JrZmxvd0ZJRk9NZXNzYWdlUGF5b
  G9hZCLVBQodUHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlcXVlc3QSfwoTc291cmNlT3BUb1N0YXJ0UHJvcBgBIAMoCzIzLmVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uUGh5c2ljYWxPcElkZW50aXR5QhjiPxUSE3NvdXJjZU9wVG9TdGFydFByb3BSE3Nvd
  XJjZU9wVG9TdGFydFByb3ASUgoCaWQYAiABKAsyNi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZWxNYXJrZ
  XJJZGVudGl0eUIK4j8HEgJpZPABAVICaWQSbQoKbWFya2VyVHlwZRgDIAEoDjI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hc
  mNoaXRlY3R1cmUucnBjLkNoYW5uZWxNYXJrZXJUeXBlQg/iPwwSCm1hcmtlclR5cGVSCm1hcmtlclR5cGUSVQoFc2NvcGUYBCADK
  AsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBoeXNpY2FsT3BJZGVudGl0eUIK4j8HEgVzY29wZVIFc2NvcGUSY
  QoJdGFyZ2V0T3BzGAUgAygLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5QaHlzaWNhbE9wSWRlbnRpdHlCDuI/C
  xIJdGFyZ2V0T3BzUgl0YXJnZXRPcHMScwoNbWFya2VyQ29tbWFuZBgGIAEoCzI5LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hc
  mNoaXRlY3R1cmUucnBjLkNvbnRyb2xSZXF1ZXN0QhLiPw8SDW1hcmtlckNvbW1hbmRSDW1hcmtlckNvbW1hbmQSQQoQbWFya2VyT
  WV0aG9kTmFtZRgHIAEoCUIV4j8SEhBtYXJrZXJNZXRob2ROYW1lUhBtYXJrZXJNZXRob2ROYW1lIv0BChtUYWtlR2xvYmFsQ2hlY
  2twb2ludFJlcXVlc3QSOwoOZXN0aW1hdGlvbk9ubHkYASABKAhCE+I/EBIOZXN0aW1hdGlvbk9ubHlSDmVzdGltYXRpb25Pbmx5E
  m0KDGNoZWNrcG9pbnRJZBgCIAEoCzI2LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQ2hhbm5lbE1hcmtlcklkZW50a
  XR5QhHiPw4SDGNoZWNrcG9pbnRJZFIMY2hlY2twb2ludElkEjIKC2Rlc3RpbmF0aW9uGAMgASgJQhDiPw0SC2Rlc3RpbmF0aW9uU
  gtkZXN0aW5hdGlvbiJcChNEZWJ1Z0NvbW1hbmRSZXF1ZXN0EikKCHdvcmtlcklkGAEgASgJQg3iPwoSCHdvcmtlcklkUgh3b3JrZ
  XJJZBIaCgNjbWQYAiABKAlCCOI/BRIDY21kUgNjbWQigwEKH0V2YWx1YXRlUHl0aG9uRXhwcmVzc2lvblJlcXVlc3QSLwoKZXhwc
  mVzc2lvbhgBIAEoCUIP4j8MEgpleHByZXNzaW9uUgpleHByZXNzaW9uEi8KCm9wZXJhdG9ySWQYAiABKAlCD+I/DBIKb3BlcmF0b
  3JJZFIKb3BlcmF0b3JJZCLHAQoSTW9kaWZ5TG9naWNSZXF1ZXN0ElUKBW5ld09wGAEgASgLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5QaHlzaWNhbE9wSWRlbnRpdHlCCuI/BxIFbmV3T3BSBW5ld09wEloKEXN0YXRlVHJhbnNmZXJGdW5jGAIgA
  SgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIW4j8TEhFzdGF0ZVRyYW5zZmVyRnVuY1IRc3RhdGVUcmFuc2ZlckZ1bmMidQoUUmV0c
  nlXb3JrZmxvd1JlcXVlc3QSXQoHd29ya2VycxgBIAMoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWa
  XJ0dWFsSWRlbnRpdHlCDOI/CRIHd29ya2Vyc1IHd29ya2VycyKjAwoOQ29uc29sZU1lc3NhZ2USKgoJd29ya2VyX2lkGAEgASgJQ
  g3iPwoSCHdvcmtlcklkUgh3b3JrZXJJZBJLCgl0aW1lc3RhbXAYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQhHiP
  w4SCXRpbWVzdGFtcPABAVIJdGltZXN0YW1wEmYKCG1zZ190eXBlGAMgASgOMj0uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY
  2hpdGVjdHVyZS5ycGMuQ29uc29sZU1lc3NhZ2VUeXBlQgziPwkSB21zZ1R5cGVSB21zZ1R5cGUSIwoGc291cmNlGAQgASgJQgviP
  wgSBnNvdXJjZVIGc291cmNlEiAKBXRpdGxlGAUgASgJQgriPwcSBXRpdGxlUgV0aXRsZRImCgdtZXNzYWdlGAYgASgJQgziPwkSB
  21lc3NhZ2VSB21lc3NhZ2U6QeI/Pgo8ZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5jb250cm9sbGVyLkNsa
  WVudEV2ZW50Ih4KHFJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlcXVlc3QimwEKHkNvbnNvbGVNZXNzYWdlVHJpZ2dlcmVkUmVxdWVzd
  BJ5Cg5jb25zb2xlTWVzc2FnZRgBIAEoCzI5LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnNvb
  GVNZXNzYWdlQhbiPxMSDmNvbnNvbGVNZXNzYWdl8AEBUg5jb25zb2xlTWVzc2FnZSKMAQoUUG9ydENvbXBsZXRlZFJlcXVlc3QSU
  goGcG9ydElkGAEgASgLMi0uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5Qb3J0SWRlbnRpdHlCC+I/CBIGcG9ydElkU
  gZwb3J0SWQSIAoFaW5wdXQYAiABKAhCCuI/BxIFaW5wdXRSBWlucHV0IhYKFFN0YXJ0V29ya2Zsb3dSZXF1ZXN0IhcKFVJlc3VtZ
  VdvcmtmbG93UmVxdWVzdCIWChRQYXVzZVdvcmtmbG93UmVxdWVzdCJ4ChlXb3JrZXJTdGF0ZVVwZGF0ZWRSZXF1ZXN0ElsKBXN0Y
  XRlGAEgASgOMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuV29ya2VyU3RhdGVCCuI/BxIFc
  3RhdGVSBXN0YXRlIiEKH1dvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFJlcXVlc3QiZQoSTGlua1dvcmtlcnNSZXF1ZXN0Ek8KBGxpb
  msYASABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBoeXNpY2FsTGlua0IM4j8JEgRsaW5r8AEBUgRsaW5rI
  osBCgRQaW5nEhQKAWkYASABKAVCBuI/AxIBaVIBaRIaCgNlbmQYAiABKAVCCOI/BRIDZW5kUgNlbmQSUQoCdG8YAyABKAsyNS5lZ
  HUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkFjdG9yVmlydHVhbElkZW50aXR5QgriPwcSAnRv8AEBUgJ0byKLAQoEUG9uZ
  xIUCgFpGAEgASgFQgbiPwMSAWlSAWkSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kElEKAnRvGAMgASgLMjUuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIK4j8HEgJ0b/ABAVICdG8iKAoEUGFzcxIgCgV2YWx1Z
  RgBIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWUiHgoGTmVzdGVkEhQKAWsYASABKAVCBuI/AxIBa1IBayJeCglNdWx0aUNhbGwSUQoDc
  2VxGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUII4j8FEgNzZXFSA
  3NlcSIOCgxFcnJvckNvbW1hbmQiaAoHQ29sbGVjdBJdCgd3b3JrZXJzGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIM4j8JEgd3b3JrZXJzUgd3b3JrZXJzIhAKDkdlbmVyYXRlTnVtYmVyImAKBUNoY
  WluElcKBW5leHRzGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIK4
  j8HEgVuZXh0c1IFbmV4dHMiIQoJUmVjdXJzaW9uEhQKAWkYASABKAVCBuI/AxIBaVIBaSJrChZBZGRJbnB1dENoYW5uZWxSZXF1Z
  XN0EiwKCWNoYW5uZWxJZBgBIAEoCUIO4j8LEgljaGFubmVsSWRSCWNoYW5uZWxJZBIjCgZwb3J0SWQYAiABKAlCC+I/CBIGcG9yd
  ElkUgZwb3J0SWQiawoWQWRkUGFydGl0aW9uaW5nUmVxdWVzdBIaCgN0YWcYASABKAlCCOI/BRIDdGFnUgN0YWcSNQoMcGFydGl0a
  W9uaW5nGAIgASgJQhHiPw4SDHBhcnRpdGlvbmluZ1IMcGFydGl0aW9uaW5nIpoCChFBc3NpZ25Qb3J0UmVxdWVzdBIjCgZwb3J0S
  WQYASABKAlCC+I/CBIGcG9ydElkUgZwb3J0SWQSIAoFaW5wdXQYAiABKAhCCuI/BxIFaW5wdXRSBWlucHV0Em0KBnNjaGVtYRgDI
  AMoCzJILmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkFzc2lnblBvcnRSZXF1ZXN0LlNjaGVtYUVud
  HJ5QgviPwgSBnNjaGVtYVIGc2NoZW1hGk8KC1NjaGVtYUVudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1Z
  RgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBInoKGUZpbmFsaXplQ2hlY2twb2ludFJlcXVlc3QSNQoMY2hlY2twb2ludElkG
  AEgASgJQhHiPw4SDGNoZWNrcG9pbnRJZFIMY2hlY2twb2ludElkEiYKB3dyaXRlVG8YAiABKAlCDOI/CRIHd3JpdGVUb1IHd3Jpd
  GVUbyLcAQoZSW5pdGlhbGl6ZUV4ZWN1dG9yUmVxdWVzdBJBChB0b3RhbFdvcmtlckNvdW50GAEgASgFQhXiPxISEHRvdGFsV29ya
  2VyQ291bnRSEHRvdGFsV29ya2VyQ291bnQSUQoOb3BFeGVjSW5pdEluZm8YAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55QhPiP
  xASDm9wRXhlY0luaXRJbmZvUg5vcEV4ZWNJbml0SW5mbxIpCghpc1NvdXJjZRgDIAEoCEIN4j8KEghpc1NvdXJjZVIIaXNTb3VyY
  2Ui2QEKFVVwZGF0ZUV4ZWN1dG9yUmVxdWVzdBJkCgpwaHlzaWNhbE9wGAEgASgLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mNvbW1vbi5QaHlzaWNhbE9wSWRlbnRpdHlCD+I/DBIKcGh5c2ljYWxPcFIKcGh5c2ljYWxPcBJaChFzdGF0ZVRyYW5zZmVyRnVuY
  xgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCFuI/ExIRc3RhdGVUcmFuc2ZlckZ1bmNSEXN0YXRlVHJhbnNmZXJGdW5jIqkBC
  h5VcGRhdGVNdWx0aXBsZUV4ZWN1dG9yc1JlcXVlc3QShgEKEWV4ZWN1dG9yc1RvVXBkYXRlGAEgAygLMkAuZWR1LnVjaS5pY3MuY
  W1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuVXBkYXRlRXhlY3V0b3JSZXF1ZXN0QhbiPxMSEWV4ZWN1dG9yc1RvVXBkYXRlU
  hFleGVjdXRvcnNUb1VwZGF0ZSKCAQoeVXBkYXRlRXhlY3V0b3JDb21wbGV0ZWRSZXF1ZXN0EmAKCHdvcmtlcklkGAEgASgLMjUuZ
  WR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIN4j8KEgh3b3JrZXJJZFIId29ya2VyS
  WQqZwoRQ2hhbm5lbE1hcmtlclR5cGUSLQoRUkVRVUlSRV9BTElHTk1FTlQQABoW4j8TEhFSRVFVSVJFX0FMSUdOTUVOVBIjCgxOT
  19BTElHTk1FTlQQARoR4j8OEgxOT19BTElHTk1FTlQqegoSQ29uc29sZU1lc3NhZ2VUeXBlEhUKBVBSSU5UEAAaCuI/BxIFUFJJT
  lQSFQoFRVJST1IQARoK4j8HEgVFUlJPUhIZCgdDT01NQU5EEAIaDOI/CRIHQ09NTUFORBIbCghERUJVR0dFUhADGg3iPwoSCERFQ
  lVHR0VSQgniPwZIAFgAeAFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.workflow.WorkflowProto.javaDescriptor,
      edu.uci.ics.amber.engine.architecture.worker.statistics.StatisticsProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}