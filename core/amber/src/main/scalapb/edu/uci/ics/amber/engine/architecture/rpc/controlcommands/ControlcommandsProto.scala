// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc.controlcommands

object ControlcommandsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto,
    edu.uci.ics.amber.engine.common.workflow.WorkflowProto,
    scalapb.options.ScalapbProto,
    com.google.protobuf.timestamp.TimestampProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlRequestMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.AsyncRPCContext,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ControlInvocation,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ChannelMarkerPayload,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PropagateChannelMarkerRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.TakeGlobalCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.DebugCommandRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.EvaluatePythonExpressionRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ModifyLogicRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetryWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessage,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.RetrieveWorkflowStateRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ConsoleMessageTriggeredRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PortCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.StartWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ResumeWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.PauseWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerStateUpdatedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.WorkerExecutionCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.LinkWorkersRequest,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Ping,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pong,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Pass,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Nested,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.MultiCall,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.ErrorCommand,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Collect,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.GenerateNumber,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Chain,
      edu.uci.ics.amber.engine.architecture.rpc.controlcommands.Recursion
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cj9lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3JwYy9jb250cm9sY29tbWFuZHMucHJvdG8SKWVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjGjVlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3ZpcnR1Y
  WxpZGVudGl0eS5wcm90bxouZWR1L3VjaS9pY3MvYW1iZXIvZW5naW5lL2NvbW1vbi93b3JrZmxvdy5wcm90bxoVc2NhbGFwYi9zY
  2FsYXBiLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIt0aCg5Db250cm9sUmVxdWVzdBK0AQodcHJvcGFnY
  XRlQ2hhbm5lbE1hcmtlclJlcXVlc3QYASABKAsySC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qc
  m9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdEIi4j8fEh1wcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdEgAUh1wcm9wYWdhd
  GVDaGFubmVsTWFya2VyUmVxdWVzdBKsAQobdGFrZUdsb2JhbENoZWNrcG9pbnRSZXF1ZXN0GAIgASgLMkYuZWR1LnVjaS5pY3MuY
  W1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuVGFrZUdsb2JhbENoZWNrcG9pbnRSZXF1ZXN0QiDiPx0SG3Rha2VHbG9iYWxDa
  GVja3BvaW50UmVxdWVzdEgAUht0YWtlR2xvYmFsQ2hlY2twb2ludFJlcXVlc3QSjAEKE2RlYnVnQ29tbWFuZFJlcXVlc3QYAyABK
  AsyPi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5EZWJ1Z0NvbW1hbmRSZXF1ZXN0QhjiPxUSE2RlY
  nVnQ29tbWFuZFJlcXVlc3RIAFITZGVidWdDb21tYW5kUmVxdWVzdBK8AQofZXZhbHVhdGVQeXRob25FeHByZXNzaW9uUmVxdWVzd
  BgEIAEoCzJKLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkV2YWx1YXRlUHl0aG9uRXhwcmVzc2lvb
  lJlcXVlc3RCJOI/IRIfZXZhbHVhdGVQeXRob25FeHByZXNzaW9uUmVxdWVzdEgAUh9ldmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZ
  XF1ZXN0EogBChJtb2RpZnlMb2dpY1JlcXVlc3QYBSABKAsyPS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlL
  nJwYy5Nb2RpZnlMb2dpY1JlcXVlc3RCF+I/FBISbW9kaWZ5TG9naWNSZXF1ZXN0SABSEm1vZGlmeUxvZ2ljUmVxdWVzdBKQAQoUc
  mV0cnlXb3JrZmxvd1JlcXVlc3QYBiABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5SZXRye
  VdvcmtmbG93UmVxdWVzdEIZ4j8WEhRyZXRyeVdvcmtmbG93UmVxdWVzdEgAUhRyZXRyeVdvcmtmbG93UmVxdWVzdBKwAQoccmV0c
  mlldmVXb3JrZmxvd1N0YXRlUmVxdWVzdBgHIAEoCzJHLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjL
  lJldHJpZXZlV29ya2Zsb3dTdGF0ZVJlcXVlc3RCIeI/HhIccmV0cmlldmVXb3JrZmxvd1N0YXRlUmVxdWVzdEgAUhxyZXRyaWV2Z
  VdvcmtmbG93U3RhdGVSZXF1ZXN0ErgBCh5jb25zb2xlTWVzc2FnZVRyaWdnZXJlZFJlcXVlc3QYCCABKAsySS5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Db25zb2xlTWVzc2FnZVRyaWdnZXJlZFJlcXVlc3RCI+I/IBIeY29uc29sZ
  U1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0SABSHmNvbnNvbGVNZXNzYWdlVHJpZ2dlcmVkUmVxdWVzdBKQAQoUcG9ydENvbXBsZXRlZ
  FJlcXVlc3QYCSABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qb3J0Q29tcGxldGVkUmVxd
  WVzdEIZ4j8WEhRwb3J0Q29tcGxldGVkUmVxdWVzdEgAUhRwb3J0Q29tcGxldGVkUmVxdWVzdBKQAQoUc3RhcnRXb3JrZmxvd1Jlc
  XVlc3QYCiABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5TdGFydFdvcmtmbG93UmVxdWVzd
  EIZ4j8WEhRzdGFydFdvcmtmbG93UmVxdWVzdEgAUhRzdGFydFdvcmtmbG93UmVxdWVzdBKUAQoVcmVzdW1lV29ya2Zsb3dSZXF1Z
  XN0GAsgASgLMkAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUmVzdW1lV29ya2Zsb3dSZXF1ZXN0Q
  hriPxcSFXJlc3VtZVdvcmtmbG93UmVxdWVzdEgAUhVyZXN1bWVXb3JrZmxvd1JlcXVlc3QSkAEKFHBhdXNlV29ya2Zsb3dSZXF1Z
  XN0GAwgASgLMj8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuUGF1c2VXb3JrZmxvd1JlcXVlc3RCG
  eI/FhIUcGF1c2VXb3JrZmxvd1JlcXVlc3RIAFIUcGF1c2VXb3JrZmxvd1JlcXVlc3QSpAEKGXdvcmtlclN0YXRlVXBkYXRlZFJlc
  XVlc3QYDSABKAsyRC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Xb3JrZXJTdGF0ZVVwZGF0ZWRSZ
  XF1ZXN0Qh7iPxsSGXdvcmtlclN0YXRlVXBkYXRlZFJlcXVlc3RIAFIZd29ya2VyU3RhdGVVcGRhdGVkUmVxdWVzdBK8AQofd29ya
  2VyRXhlY3V0aW9uQ29tcGxldGVkUmVxdWVzdBgOIAEoCzJKLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUuc
  nBjLldvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFJlcXVlc3RCJOI/IRIfd29ya2VyRXhlY3V0aW9uQ29tcGxldGVkUmVxdWVzdEgAU
  h93b3JrZXJFeGVjdXRpb25Db21wbGV0ZWRSZXF1ZXN0EogBChJsaW5rV29ya2Vyc1JlcXVlc3QYDyABKAsyPS5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5MaW5rV29ya2Vyc1JlcXVlc3RCF+I/FBISbGlua1dvcmtlcnNSZXF1ZXN0S
  ABSEmxpbmtXb3JrZXJzUmVxdWVzdBJQCgRwaW5nGBAgASgLMi8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZ
  S5ycGMuUGluZ0IJ4j8GEgRwaW5nSABSBHBpbmcSUAoEcG9uZxgRIAEoCzIvLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoa
  XRlY3R1cmUucnBjLlBvbmdCCeI/BhIEcG9uZ0gAUgRwb25nElgKBm5lc3RlZBgSIAEoCzIxLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ
  2luZS5hcmNoaXRlY3R1cmUucnBjLk5lc3RlZEIL4j8IEgZuZXN0ZWRIAFIGbmVzdGVkElAKBHBhc3MYEyABKAsyLy5lZHUudWNpL
  mljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5QYXNzQgniPwYSBHBhc3NIAFIEcGFzcxJwCgxlcnJvckNvbW1hbmQYF
  CABKAsyNy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5FcnJvckNvbW1hbmRCEeI/DhIMZXJyb3JDb
  21tYW5kSABSDGVycm9yQ29tbWFuZBJkCglyZWN1cnNpb24YFSABKAsyNC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0Z
  WN0dXJlLnJwYy5SZWN1cnNpb25CDuI/CxIJcmVjdXJzaW9uSABSCXJlY3Vyc2lvbhJcCgdjb2xsZWN0GBYgASgLMjIuZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29sbGVjdEIM4j8JEgdjb2xsZWN0SABSB2NvbGxlY3QSeAoOZ2VuZ
  XJhdGVOdW1iZXIYFyABKAsyOS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5HZW5lcmF0ZU51bWJlc
  kIT4j8QEg5nZW5lcmF0ZU51bWJlckgAUg5nZW5lcmF0ZU51bWJlchJkCgltdWx0aUNhbGwYGCABKAsyNC5lZHUudWNpLmljcy5hb
  WJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5NdWx0aUNhbGxCDuI/CxIJbXVsdGlDYWxsSABSCW11bHRpQ2FsbBJUCgVjaGFpb
  hgZIAEoCzIwLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNoYWluQgriPwcSBWNoYWluSABSBWNoY
  WluQg4KDHNlYWxlZF92YWx1ZSLcAQoPQXN5bmNSUENDb250ZXh0El0KBnNlbmRlchgBIAEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCDuI/CxIGc2VuZGVy8AEBUgZzZW5kZXISYwoIcmVjZWl2ZXIYAiABK
  AsyNS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkFjdG9yVmlydHVhbElkZW50aXR5QhDiPw0SCHJlY2VpdmVy8AEBU
  ghyZWNlaXZlcjoF4j8COAEigAMKEUNvbnRyb2xJbnZvY2F0aW9uEi8KCm1ldGhvZE5hbWUYASABKAlCD+I/DBIKbWV0aG9kTmFtZ
  VIKbWV0aG9kTmFtZRJkCgdjb21tYW5kGAIgASgLMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ
  29udHJvbFJlcXVlc3RCD+I/DBIHY29tbWFuZPABAVIHY29tbWFuZBJiCgdjb250ZXh0GAMgASgLMjouZWR1LnVjaS5pY3MuYW1iZ
  XIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQXN5bmNSUENDb250ZXh0QgziPwkSB2NvbnRleHRSB2NvbnRleHQSLAoJY29tbWFuZ
  ElkGAQgASgDQg7iPwsSCWNvbW1hbmRJZFIJY29tbWFuZElkOkLiPz8KO2VkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uY
  W1iZXJtZXNzYWdlLkNvbnRyb2xQYXlsb2FkOAEi1QQKFENoYW5uZWxNYXJrZXJQYXlsb2FkEk8KAmlkGAEgASgLMjYuZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFubmVsTWFya2VySWRlbnRpdHlCB+I/BBICaWRSAmlkEm0KCm1hcmtlclR5cGUYA
  iABKA4yPC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5DaGFubmVsTWFya2VyVHlwZUIP4j8MEgptY
  XJrZXJUeXBlUgptYXJrZXJUeXBlElIKBXNjb3BlGAMgAygLMjAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFub
  mVsSWRlbnRpdHlCCuI/BxIFc2NvcGVSBXNjb3BlEpABCg5jb21tYW5kTWFwcGluZxgEIAMoCzJTLmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNoYW5uZWxNYXJrZXJQYXlsb2FkLkNvbW1hbmRNYXBwaW5nRW50cnlCE+I/EBIOY29tb
  WFuZE1hcHBpbmdSDmNvbW1hbmRNYXBwaW5nGpUBChNDb21tYW5kTWFwcGluZ0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA
  2tleRJeCgV2YWx1ZRgCIAEoCzI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnRyb2xJbnZvY
  2F0aW9uQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEijwUKHVByb3BhZ2F0ZUNoYW5uZWxNYXJrZXJSZXF1ZXN0En8KE3NvdXJjZU9wV
  G9TdGFydFByb3AYASADKAsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBoeXNpY2FsT3BJZGVudGl0eUIY4j8VE
  hNzb3VyY2VPcFRvU3RhcnRQcm9wUhNzb3VyY2VPcFRvU3RhcnRQcm9wEk8KAmlkGAIgASgLMjYuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5DaGFubmVsTWFya2VySWRlbnRpdHlCB+I/BBICaWRSAmlkEm0KCm1hcmtlclR5cGUYAyABKA4yPC5lZHUud
  WNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5DaGFubmVsTWFya2VyVHlwZUIP4j8MEgptYXJrZXJUeXBlUgptY
  XJrZXJUeXBlElUKBXNjb3BlGAQgAygLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5QaHlzaWNhbE9wSWRlbnRpd
  HlCCuI/BxIFc2NvcGVSBXNjb3BlEmEKCXRhcmdldE9wcxgFIAMoCzIzLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uU
  Gh5c2ljYWxPcElkZW50aXR5Qg7iPwsSCXRhcmdldE9wc1IJdGFyZ2V0T3BzEnMKDW1hcmtlckNvbW1hbmQYBiABKAsyOS5lZHUud
  WNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Db250cm9sUmVxdWVzdEIS4j8PEg1tYXJrZXJDb21tYW5kUg1tY
  XJrZXJDb21tYW5kIv0BChtUYWtlR2xvYmFsQ2hlY2twb2ludFJlcXVlc3QSOwoOZXN0aW1hdGlvbk9ubHkYASABKAhCE+I/EBIOZ
  XN0aW1hdGlvbk9ubHlSDmVzdGltYXRpb25Pbmx5Em0KDGNoZWNrcG9pbnRJZBgCIAEoCzI2LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ
  2luZS5jb21tb24uQ2hhbm5lbE1hcmtlcklkZW50aXR5QhHiPw4SDGNoZWNrcG9pbnRJZFIMY2hlY2twb2ludElkEjIKC2Rlc3Rpb
  mF0aW9uGAMgASgJQhDiPw0SC2Rlc3RpbmF0aW9uUgtkZXN0aW5hdGlvbiJcChNEZWJ1Z0NvbW1hbmRSZXF1ZXN0EikKCHdvcmtlc
  klkGAEgASgJQg3iPwoSCHdvcmtlcklkUgh3b3JrZXJJZBIaCgNjbWQYAiABKAlCCOI/BRIDY21kUgNjbWQigwEKH0V2YWx1YXRlU
  Hl0aG9uRXhwcmVzc2lvblJlcXVlc3QSLwoKZXhwcmVzc2lvbhgBIAEoCUIP4j8MEgpleHByZXNzaW9uUgpleHByZXNzaW9uEi8KC
  m9wZXJhdG9ySWQYAiABKAlCD+I/DBIKb3BlcmF0b3JJZFIKb3BlcmF0b3JJZCJ8ChJNb2RpZnlMb2dpY1JlcXVlc3QSIAoFbmV3T
  3AYASABKAlCCuI/BxIFbmV3T3BSBW5ld09wEkQKEXN0YXRlVHJhbnNmZXJGdW5jGAIgASgJQhbiPxMSEXN0YXRlVHJhbnNmZXJGd
  W5jUhFzdGF0ZVRyYW5zZmVyRnVuYyJ1ChRSZXRyeVdvcmtmbG93UmVxdWVzdBJdCgd3b3JrZXJzGAEgAygLMjUuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIM4j8JEgd3b3JrZXJzUgd3b3JrZXJzIuACCg5Db25zb
  2xlTWVzc2FnZRIqCgl3b3JrZXJfaWQYASABKAlCDeI/ChIId29ya2VySWRSCHdvcmtlcklkEksKCXRpbWVzdGFtcBgCIAEoCzIaL
  mdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCEeI/DhIJdGltZXN0YW1w8AEBUgl0aW1lc3RhbXASZgoIbXNnX3R5cGUYAyABKA4yP
  S5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Db25zb2xlTWVzc2FnZVR5cGVCDOI/CRIHbXNnVHlwZ
  VIHbXNnVHlwZRIjCgZzb3VyY2UYBCABKAlCC+I/CBIGc291cmNlUgZzb3VyY2USIAoFdGl0bGUYBSABKAlCCuI/BxIFdGl0bGVSB
  XRpdGxlEiYKB21lc3NhZ2UYBiABKAlCDOI/CRIHbWVzc2FnZVIHbWVzc2FnZSIeChxSZXRyaWV2ZVdvcmtmbG93U3RhdGVSZXF1Z
  XN0IpgBCh5Db25zb2xlTWVzc2FnZVRyaWdnZXJlZFJlcXVlc3QSdgoOY29uc29sZU1lc3NhZ2UYASABKAsyOS5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Db25zb2xlTWVzc2FnZUIT4j8QEg5jb25zb2xlTWVzc2FnZVIOY29uc29sZ
  U1lc3NhZ2UijAEKFFBvcnRDb21wbGV0ZWRSZXF1ZXN0ElIKBnBvcnRJZBgBIAEoCzItLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZ
  S5jb21tb24uUG9ydElkZW50aXR5QgviPwgSBnBvcnRJZFIGcG9ydElkEiAKBWlucHV0GAIgASgIQgriPwcSBWlucHV0UgVpbnB1d
  CIWChRTdGFydFdvcmtmbG93UmVxdWVzdCIXChVSZXN1bWVXb3JrZmxvd1JlcXVlc3QiFgoUUGF1c2VXb3JrZmxvd1JlcXVlc3QiP
  QoZV29ya2VyU3RhdGVVcGRhdGVkUmVxdWVzdBIgCgVzdGF0ZRgBIAEoCUIK4j8HEgVzdGF0ZVIFc3RhdGUiIQofV29ya2VyRXhlY
  3V0aW9uQ29tcGxldGVkUmVxdWVzdCIzChJMaW5rV29ya2Vyc1JlcXVlc3QSHQoEbGluaxgBIAEoCUIJ4j8GEgRsaW5rUgRsaW5rI
  osBCgRQaW5nEhQKAWkYASABKAVCBuI/AxIBaVIBaRIaCgNlbmQYAiABKAVCCOI/BRIDZW5kUgNlbmQSUQoCdG8YAyABKAsyNS5lZ
  HUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkFjdG9yVmlydHVhbElkZW50aXR5QgriPwcSAnRv8AEBUgJ0byKLAQoEUG9uZ
  xIUCgFpGAEgASgFQgbiPwMSAWlSAWkSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kElEKAnRvGAMgASgLMjUuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIK4j8HEgJ0b/ABAVICdG8iKAoEUGFzcxIgCgV2YWx1Z
  RgBIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWUiHgoGTmVzdGVkEhQKAWsYASABKAVCBuI/AxIBa1IBayJeCglNdWx0aUNhbGwSUQoDc
  2VxGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUII4j8FEgNzZXFSA
  3NlcSIOCgxFcnJvckNvbW1hbmQiaAoHQ29sbGVjdBJdCgd3b3JrZXJzGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIM4j8JEgd3b3JrZXJzUgd3b3JrZXJzIhAKDkdlbmVyYXRlTnVtYmVyImAKBUNoY
  WluElcKBW5leHRzGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIK4
  j8HEgVuZXh0c1IFbmV4dHMiIQoJUmVjdXJzaW9uEhQKAWkYASABKAVCBuI/AxIBaVIBaSpnChFDaGFubmVsTWFya2VyVHlwZRItC
  hFSRVFVSVJFX0FMSUdOTUVOVBAAGhbiPxMSEVJFUVVJUkVfQUxJR05NRU5UEiMKDE5PX0FMSUdOTUVOVBABGhHiPw4SDE5PX0FMS
  UdOTUVOVCp6ChJDb25zb2xlTWVzc2FnZVR5cGUSFQoFUFJJTlQQABoK4j8HEgVQUklOVBIVCgVFUlJPUhABGgriPwcSBUVSUk9SE
  hkKB0NPTU1BTkQQAhoM4j8JEgdDT01NQU5EEhsKCERFQlVHR0VSEAMaDeI/ChIIREVCVUdHRVJCCeI/BkgAWAB4AWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.workflow.WorkflowProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}