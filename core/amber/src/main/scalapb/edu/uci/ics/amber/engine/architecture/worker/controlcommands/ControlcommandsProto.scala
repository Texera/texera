// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.worker.controlcommands

object ControlcommandsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.architecture.sendsemantics.partitionings.PartitioningsProto,
    edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto,
    com.google.protobuf.timestamp.TimestampProto,
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.NoOpV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.StartWorkerV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.PauseWorkerV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ResumeWorkerV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.SchedulerTimeSlotEventV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.OpenOperatorV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.UpdateInputLinkingV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.AddPartitioningV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.WorkerExecutionCompletedV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.QueryStatisticsV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.QueryCurrentInputTupleV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.LinkOrdinal,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.InitializeOperatorLogicV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ModifyOperatorLogicV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ReplayCurrentTupleV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ConsoleMessage,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.PythonConsoleMessageV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.EvaluateExpressionV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.WorkerDebugCommandV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.QuerySelfWorkloadMetricsV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.LinkCompletedV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ControlCommandV2Message
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CkJlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3dvcmtlci9jb250cm9sY29tbWFuZHMucHJvdG8SLGVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyGkdlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0Z
  WN0dXJlL3NlbmRzZW1hbnRpY3MvcGFydGl0aW9uaW5ncy5wcm90bxo1ZWR1L3VjaS9pY3MvYW1iZXIvZW5naW5lL2NvbW1vbi92a
  XJ0dWFsaWRlbnRpdHkucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aFXNjYWxhcGIvc2NhbGFwYi5wcm90b
  yIICgZOb09wVjIiDwoNU3RhcnRXb3JrZXJWMiIPCg1QYXVzZVdvcmtlclYyIhAKDlJlc3VtZVdvcmtlclYyIlwKGFNjaGVkdWxlc
  lRpbWVTbG90RXZlbnRWMhJAChF0aW1lX3Nsb3RfZXhwaXJlZBgBIAEoCEIU4j8REg90aW1lU2xvdEV4cGlyZWRSD3RpbWVTbG90R
  XhwaXJlZCIQCg5PcGVuT3BlcmF0b3JWMiLqAQoUVXBkYXRlSW5wdXRMaW5raW5nVjISaQoKaWRlbnRpZmllchgBIAEoCzI1LmVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCEuI/DxIKaWRlbnRpZmllcvABAVIKaWRlb
  nRpZmllchJnCgppbnB1dF9saW5rGAIgASgLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5QaHlzaWNhbExpbmtJZ
  GVudGl0eUIR4j8OEglpbnB1dExpbmvwAQFSCWlucHV0TGluayLmAQoRQWRkUGFydGl0aW9uaW5nVjISVAoDdGFnGAEgASgLMjUuZ
  WR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5QaHlzaWNhbExpbmtJZGVudGl0eUIL4j8IEgN0YWfwAQFSA3RhZxJ7CgxwY
  XJ0aXRpb25pbmcYAiABKAsyQS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnNlbmRzZW1hbnRpY3MuUGFyd
  Gl0aW9uaW5nQhTiPxESDHBhcnRpdGlvbmluZ/ABAVIMcGFydGl0aW9uaW5nIhwKGldvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFYyI
  hMKEVF1ZXJ5U3RhdGlzdGljc1YyIhoKGFF1ZXJ5Q3VycmVudElucHV0VHVwbGVWMiKiAQoLTGlua09yZGluYWwSXgoHbGlua19pZ
  BgBIAEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uUGh5c2ljYWxMaW5rSWRlbnRpdHlCDuI/CxIGbGlua0lk8
  AEBUgZsaW5rSWQSMwoMcG9ydF9vcmRpbmFsGAIgASgDQhDiPw0SC3BvcnRPcmRpbmFsUgtwb3J0T3JkaW5hbCLoBAoZSW5pdGlhb
  Gl6ZU9wZXJhdG9yTG9naWNWMhIdCgRjb2RlGAEgASgJQgniPwYSBGNvZGVSBGNvZGUSKgoJaXNfc291cmNlGAIgASgIQg3iPwoSC
  GlzU291cmNlUghpc1NvdXJjZRKHAQoVaW5wdXRfb3JkaW5hbF9tYXBwaW5nGAMgAygLMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5na
  W5lLmFyY2hpdGVjdHVyZS53b3JrZXIuTGlua09yZGluYWxCGOI/FRITaW5wdXRPcmRpbmFsTWFwcGluZ1ITaW5wdXRPcmRpbmFsT
  WFwcGluZxKKAQoWb3V0cHV0X29yZGluYWxfbWFwcGluZxgEIAMoCzI5LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY
  3R1cmUud29ya2VyLkxpbmtPcmRpbmFsQhniPxYSFG91dHB1dE9yZGluYWxNYXBwaW5nUhRvdXRwdXRPcmRpbmFsTWFwcGluZxKRA
  QoNb3V0cHV0X3NjaGVtYRgFIAMoCzJZLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLkluaXRpY
  WxpemVPcGVyYXRvckxvZ2ljVjIuT3V0cHV0U2NoZW1hRW50cnlCEeI/DhIMb3V0cHV0U2NoZW1hUgxvdXRwdXRTY2hlbWEaVQoRT
  3V0cHV0U2NoZW1hRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2Y
  Wx1ZToCOAEiYgoVTW9kaWZ5T3BlcmF0b3JMb2dpY1YyEh0KBGNvZGUYASABKAlCCeI/BhIEY29kZVIEY29kZRIqCglpc19zb3VyY
  2UYAiABKAhCDeI/ChIIaXNTb3VyY2VSCGlzU291cmNlIhYKFFJlcGxheUN1cnJlbnRUdXBsZVYyIuMCCg5Db25zb2xlTWVzc2FnZ
  RIqCgl3b3JrZXJfaWQYASABKAlCDeI/ChIId29ya2VySWRSCHdvcmtlcklkEksKCXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wc
  m90b2J1Zi5UaW1lc3RhbXBCEeI/DhIJdGltZXN0YW1w8AEBUgl0aW1lc3RhbXASaQoIbXNnX3R5cGUYAyABKA4yQC5lZHUudWNpL
  mljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5Db25zb2xlTWVzc2FnZVR5cGVCDOI/CRIHbXNnVHlwZVIHbXNnV
  HlwZRIjCgZzb3VyY2UYBCABKAlCC+I/CBIGc291cmNlUgZzb3VyY2USIAoFdGl0bGUYBSABKAlCCuI/BxIFdGl0bGVSBXRpdGxlE
  iYKB21lc3NhZ2UYBiABKAlCDOI/CRIHbWVzc2FnZVIHbWVzc2FnZSKBAQoWUHl0aG9uQ29uc29sZU1lc3NhZ2VWMhJnCgdtZXNzY
  WdlGAEgASgLMjwuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuQ29uc29sZU1lc3NhZ2VCD+I/D
  BIHbWVzc2FnZfABAVIHbWVzc2FnZSJHChRFdmFsdWF0ZUV4cHJlc3Npb25WMhIvCgpleHByZXNzaW9uGAEgASgJQg/iPwwSCmV4c
  HJlc3Npb25SCmV4cHJlc3Npb24iMgoUV29ya2VyRGVidWdDb21tYW5kVjISGgoDY21kGAEgASgJQgjiPwUSA2NtZFIDY21kIhwKG
  lF1ZXJ5U2VsZldvcmtsb2FkTWV0cmljc1YyInEKD0xpbmtDb21wbGV0ZWRWMhJeCgdsaW5rX2lkGAEgASgLMjUuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmNvbW1vbi5QaHlzaWNhbExpbmtJZGVudGl0eUIO4j8LEgZsaW5rSWTwAQFSBmxpbmtJZCKRFQoQQ29ud
  HJvbENvbW1hbmRWMhJyCgxzdGFydF93b3JrZXIYASABKAsyOy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlL
  ndvcmtlci5TdGFydFdvcmtlclYyQhDiPw0SC3N0YXJ0V29ya2VySABSC3N0YXJ0V29ya2VyEnIKDHBhdXNlX3dvcmtlchgCIAEoC
  zI7LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLlBhdXNlV29ya2VyVjJCEOI/DRILcGF1c2VXb
  3JrZXJIAFILcGF1c2VXb3JrZXISdgoNcmVzdW1lX3dvcmtlchgDIAEoCzI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoa
  XRlY3R1cmUud29ya2VyLlJlc3VtZVdvcmtlclYyQhHiPw4SDHJlc3VtZVdvcmtlckgAUgxyZXN1bWVXb3JrZXISggEKEGFkZF9wY
  XJ0aXRpb25pbmcYBCABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5BZGRQYXJ0aXRpb
  25pbmdWMkIU4j8REg9hZGRQYXJ0aXRpb25pbmdIAFIPYWRkUGFydGl0aW9uaW5nEo8BChR1cGRhdGVfaW5wdXRfbGlua2luZxgFI
  AEoCzJCLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLlVwZGF0ZUlucHV0TGlua2luZ1YyQhfiP
  xQSEnVwZGF0ZUlucHV0TGlua2luZ0gAUhJ1cGRhdGVJbnB1dExpbmtpbmcSggEKEHF1ZXJ5X3N0YXRpc3RpY3MYBiABKAsyPy5lZ
  HUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5RdWVyeVN0YXRpc3RpY3NWMkIU4j8REg9xdWVyeVN0Y
  XRpc3RpY3NIAFIPcXVlcnlTdGF0aXN0aWNzEqABChlxdWVyeV9jdXJyZW50X2lucHV0X3R1cGxlGAcgASgLMkYuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuUXVlcnlDdXJyZW50SW5wdXRUdXBsZVYyQhviPxgSFnF1ZXJ5Q3Vyc
  mVudElucHV0VHVwbGVIAFIWcXVlcnlDdXJyZW50SW5wdXRUdXBsZRJ2Cg1vcGVuX29wZXJhdG9yGAkgASgLMjwuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuT3Blbk9wZXJhdG9yVjJCEeI/DhIMb3Blbk9wZXJhdG9ySABSDG9wZ
  W5PcGVyYXRvchJ6Cg5saW5rX2NvbXBsZXRlZBgKIAEoCzI9LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud
  29ya2VyLkxpbmtDb21wbGV0ZWRWMkIS4j8PEg1saW5rQ29tcGxldGVkSABSDWxpbmtDb21wbGV0ZWQSoAEKGXNjaGVkdWxlcl90a
  W1lX3Nsb3RfZXZlbnQYCyABKAsyRi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5TY2hlZHVsZ
  XJUaW1lU2xvdEV2ZW50VjJCG+I/GBIWc2NoZWR1bGVyVGltZVNsb3RFdmVudEgAUhZzY2hlZHVsZXJUaW1lU2xvdEV2ZW50EqMBC
  hlpbml0aWFsaXplX29wZXJhdG9yX2xvZ2ljGBUgASgLMkcuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b
  3JrZXIuSW5pdGlhbGl6ZU9wZXJhdG9yTG9naWNWMkIc4j8ZEhdpbml0aWFsaXplT3BlcmF0b3JMb2dpY0gAUhdpbml0aWFsaXplT
  3BlcmF0b3JMb2dpYxKTAQoVbW9kaWZ5X29wZXJhdG9yX2xvZ2ljGBYgASgLMkMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY
  2hpdGVjdHVyZS53b3JrZXIuTW9kaWZ5T3BlcmF0b3JMb2dpY1YyQhjiPxUSE21vZGlmeU9wZXJhdG9yTG9naWNIAFITbW9kaWZ5T
  3BlcmF0b3JMb2dpYxKXAQoWcHl0aG9uX2NvbnNvbGVfbWVzc2FnZRgXIAEoCzJELmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hc
  mNoaXRlY3R1cmUud29ya2VyLlB5dGhvbkNvbnNvbGVNZXNzYWdlVjJCGeI/FhIUcHl0aG9uQ29uc29sZU1lc3NhZ2VIAFIUcHl0a
  G9uQ29uc29sZU1lc3NhZ2USjwEKFHJlcGxheV9jdXJyZW50X3R1cGxlGBggASgLMkIuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mFyY2hpdGVjdHVyZS53b3JrZXIuUmVwbGF5Q3VycmVudFR1cGxlVjJCF+I/FBIScmVwbGF5Q3VycmVudFR1cGxlSABSEnJlcGxhe
  UN1cnJlbnRUdXBsZRKOAQoTZXZhbHVhdGVfZXhwcmVzc2lvbhgZIAEoCzJCLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoa
  XRlY3R1cmUud29ya2VyLkV2YWx1YXRlRXhwcmVzc2lvblYyQhfiPxQSEmV2YWx1YXRlRXhwcmVzc2lvbkgAUhJldmFsdWF0ZUV4c
  HJlc3Npb24SqAEKG3F1ZXJ5X3NlbGZfd29ya2xvYWRfbWV0cmljcxgpIAEoCzJILmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hc
  mNoaXRlY3R1cmUud29ya2VyLlF1ZXJ5U2VsZldvcmtsb2FkTWV0cmljc1YyQh3iPxoSGHF1ZXJ5U2VsZldvcmtsb2FkTWV0cmljc
  0gAUhhxdWVyeVNlbGZXb3JrbG9hZE1ldHJpY3MSjwEKFHdvcmtlcl9kZWJ1Z19jb21tYW5kGFEgASgLMkIuZWR1LnVjaS5pY3MuY
  W1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuV29ya2VyRGVidWdDb21tYW5kVjJCF+I/FBISd29ya2VyRGVidWdDb21tY
  W5kSABSEndvcmtlckRlYnVnQ29tbWFuZBKnAQoad29ya2VyX2V4ZWN1dGlvbl9jb21wbGV0ZWQYZSABKAsySC5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5Xb3JrZXJFeGVjdXRpb25Db21wbGV0ZWRWMkId4j8aEhh3b3JrZXJFe
  GVjdXRpb25Db21wbGV0ZWRIAFIYd29ya2VyRXhlY3V0aW9uQ29tcGxldGVkElcKBW5vX29wGI9OIAEoCzI0LmVkdS51Y2kuaWNzL
  mFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLk5vT3BWMkIJ4j8GEgRub09wSABSBG5vT3BCDgoMc2VhbGVkX3ZhbHVlK
  kUKEkNvbnNvbGVNZXNzYWdlVHlwZRIJCgVQUklOVBAAEgkKBUVSUk9SEAESCwoHQ09NTUFORBACEgwKCERFQlVHR0VSEANCCeI/B
  kgAWAB4AWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.architecture.sendsemantics.partitionings.PartitioningsProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}