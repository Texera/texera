# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.

akka {

  # Logger config for Akka internals and classic actors, the new API relies
  # directly on SLF4J and your config for the logger backend.

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
;   loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
;   loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
;   stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
;   logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    actor {
        provider = cluster
        enable-additional-serialization-bindings = on
        allow-java-serialization = off
        serializers {
            kryo = "com.twitter.chill.akka.AkkaSerializer"
        }
        serialization-bindings {
            "java.io.Serializable" = kryo
            "java.lang.Throwable" = akka-misc
        }
    }

    remote {
        artery {
            transport = tcp
            canonical.hostname = "0.0.0.0"
            canonical.port = 0
            advanced.maximum-frame-size = 30 MiB
            advanced.maximum-large-frame-size = 120 MiB
        }
    }
    cluster {
        seed-nodes = []

        # auto downing is NOT safe for production deployments.
        # you may want to use it during development, read more about it in the docs.
        auto-down-unreachable-after = off
        unreachable-nodes-reaper-interval = 100s
        gossip-interval = 10s
        leader-actions-interval = 10s
        gossip-time-to-live = 20s

        failure-detector {
            heartbeat-interval = 10s
            acceptable-heartbeat-pause = 50s
            expected-response-after = 30s
        }
    }
}

constants {
    default-batch-size = 400
    logging-queue-size-interval = 30000
    num-worker-per-node = 2
    data-volume-per-node = 10
}

google {
    # Please refer to this wiki in configuring the following attributes.
  	# https://github.com/Texera/texera/wiki/Guide-for-Developers#to-save-workflow-results-to-google-sheet

  	# directory path to cache google tokens, relative to this `core/conf/`.
  	tokenPath= ""
  	# google credential path for the service account, relative to this `core/conf/`.
  	credentialPath= ""
  	# google client ID
  	clientId= ""
  	# google secrete
  	clientSecret= ""
}

python {
    # python3 executable path
    path = ""

    log {
        streamHandler {
            # handler output level
            level="DEBUG"
            # handler log format
            format= "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
        }

        fileHandler {
            # log directory
            dir= "/tmp/"
            # handler output level
            level= "DEBUG"
            # handler log format
            format= "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
        }
    }
}

