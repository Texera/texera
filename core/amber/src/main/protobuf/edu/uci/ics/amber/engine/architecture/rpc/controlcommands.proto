syntax = "proto3";
package edu.uci.ics.amber.engine.architecture.rpc;

import "edu/uci/ics/amber/engine/common/virtualidentity.proto";
import "edu/uci/ics/amber/engine/common/workflow.proto";
import "edu/uci/ics/amber/engine/architecture/worker/statistics.proto";
import "scalapb/scalapb.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option (scalapb.options) = {
  scope: FILE,
  preserve_unknown_fields: false
  no_default_values_in_constructor: true
};

message ControlRequest {
  oneof sealed_value {
    PropagateChannelMarkerRequest propagateChannelMarkerRequest = 1;
    TakeGlobalCheckpointRequest takeGlobalCheckpointRequest = 2;
    DebugCommandRequest debugCommandRequest = 3;
    EvaluatePythonExpressionRequest evaluatePythonExpressionRequest = 4;
    ModifyLogicRequest modifyLogicRequest = 5;
    RetryWorkflowRequest retryWorkflowRequest = 6;
    RetrieveWorkflowStateRequest retrieveWorkflowStateRequest = 7;
    ConsoleMessageTriggeredRequest consoleMessageTriggeredRequest = 8;
    PortCompletedRequest portCompletedRequest = 9;
    StartWorkflowRequest startWorkflowRequest = 10;
    ResumeWorkflowRequest resumeWorkflowRequest = 11;
    PauseWorkflowRequest pauseWorkflowRequest = 12;
    WorkerStateUpdatedRequest workerStateUpdatedRequest = 13;
    WorkerExecutionCompletedRequest workerExecutionCompletedRequest = 14;
    LinkWorkersRequest linkWorkersRequest = 15;
    Ping ping = 16;
    Pong pong = 17;
    Nested nested = 18;
    Pass pass = 19;
    ErrorCommand errorCommand = 20;
    Recursion recursion = 21;
    Collect collect = 22;
    GenerateNumber generateNumber = 23;
    MultiCall multiCall = 24;
    Chain chain = 25;
    AddInputChannelRequest addInputChannelRequest = 26;
    AddPartitioningRequest addPartitioningRequest = 27;
    AssignPortRequest assignPortRequest = 28;
    FinalizeCheckpointRequest finalizeCheckpointRequest = 29;
    InitializeExecutorRequest initializeExecutorRequest = 30;
    UpdateExecutorRequest updateExecutorRequest = 31;
    UpdateMultipleExecutorsRequest updateMultipleExecutorsRequest = 32;
    UpdateExecutorCompletedRequest updateExecutorCompletedRequest = 33;
  }
}

message AsyncRPCContext {
  option (scalapb.message).no_box = true;
  common.ActorVirtualIdentity sender = 1 [(scalapb.field).no_box = true];
  common.ActorVirtualIdentity receiver = 2 [(scalapb.field).no_box = true];
}

message ControlInvocation {
  option (scalapb.message).extends = "edu.uci.ics.amber.engine.common.ambermessage.ControlPayload";
  option (scalapb.message).no_box = true;
  string methodName = 1;
  ControlRequest command = 2 [(scalapb.field).no_box = true];
  AsyncRPCContext context = 3;
  int64 commandId = 4;
}

// Enum for ChannelMarkerType
enum ChannelMarkerType {
  REQUIRE_ALIGNMENT = 0;
  NO_ALIGNMENT = 1;
}

// Message for ChannelMarkerPayload
message ChannelMarkerPayload {
  option (scalapb.message).extends = "edu.uci.ics.amber.engine.common.ambermessage.WorkflowFIFOMessagePayload";
  common.ChannelMarkerIdentity id = 1 [(scalapb.field).no_box = true];
  ChannelMarkerType markerType = 2;
  repeated common.ChannelIdentity scope = 3;
  map<string, ControlInvocation> commandMapping = 4;
}

message PropagateChannelMarkerRequest {
  repeated common.PhysicalOpIdentity sourceOpToStartProp = 1;
  common.ChannelMarkerIdentity id = 2 [(scalapb.field).no_box = true];
  ChannelMarkerType markerType = 3;
  repeated common.PhysicalOpIdentity scope = 4;
  repeated common.PhysicalOpIdentity targetOps = 5;
  ControlRequest markerCommand = 6;
  string markerMethodName = 7;
}

message TakeGlobalCheckpointRequest {
  bool estimationOnly = 1;
  common.ChannelMarkerIdentity checkpointId = 2;
  string destination = 3;
}



message DebugCommandRequest {
  string workerId = 1;
  string cmd = 2;
}

message EvaluatePythonExpressionRequest {
  string expression = 1;
  string operatorId = 2;
}

message ModifyLogicRequest {
  common.PhysicalOpIdentity newOp = 1;
  google.protobuf.Any stateTransferFunc = 2;
}

message RetryWorkflowRequest {
  repeated common.ActorVirtualIdentity workers = 1;
}

enum ConsoleMessageType{
  PRINT = 0;
  ERROR = 1;
  COMMAND = 2;
  DEBUGGER = 3;
}

message ConsoleMessage {
  option (scalapb.message).extends = "edu.uci.ics.amber.engine.architecture.controller.ClientEvent";
  string worker_id = 1;
  google.protobuf.Timestamp timestamp = 2  [(scalapb.field).no_box = true];
  ConsoleMessageType msg_type = 3;
  string source = 4;
  string title = 5;
  string message = 6;
}

message RetrieveWorkflowStateRequest {}

message ConsoleMessageTriggeredRequest {
  ConsoleMessage consoleMessage = 1 [(scalapb.field).no_box = true];
}

message PortCompletedRequest {
  common.PortIdentity portId = 1;
  bool input = 2;
}

message StartWorkflowRequest {}


message ResumeWorkflowRequest {}

message PauseWorkflowRequest {}

message WorkerStateUpdatedRequest {
  worker.WorkerState state = 1;
}

message WorkerExecutionCompletedRequest {}

message LinkWorkersRequest {
  common.PhysicalLink link = 1 [(scalapb.field).no_box = true];
}

// Ping message
message Ping {
  int32 i = 1;
  int32 end = 2;
  common.ActorVirtualIdentity to = 3 [(scalapb.field).no_box = true];
}

// Pong message
message Pong {
  int32 i = 1;
  int32 end = 2;
  common.ActorVirtualIdentity to = 3 [(scalapb.field).no_box = true];
}

// Pass message
message Pass {
  string value = 1;
}

// Nested message
message Nested {
  int32 k = 1;
}

// MultiCall message
message MultiCall {
  repeated common.ActorVirtualIdentity seq = 1;
}

// ErrorCommand message
message ErrorCommand {
}

// Collect message
message Collect {
  repeated common.ActorVirtualIdentity workers = 1;
}

// GenerateNumber message
message GenerateNumber {
}

// Chain message
message Chain {
  repeated common.ActorVirtualIdentity nexts = 1;
}

// Recursion message
message Recursion {
  int32 i = 1;
}

// Messages for the commands
message AddInputChannelRequest {
  string channelId = 1;
  string portId = 2;
}

message AddPartitioningRequest {
  string tag = 1;
  string partitioning = 2;
}

message AssignPortRequest {
  string portId = 1;
  bool input = 2;
  map<string, string> schema = 3;
}

message FinalizeCheckpointRequest {
  string checkpointId = 1;
  string writeTo = 2;
}

message InitializeExecutorRequest {
  int32 totalWorkerCount = 1;
  google.protobuf.Any opExecInitInfo = 2;
  bool isSource = 3;
}

message UpdateExecutorRequest {
  common.PhysicalOpIdentity physicalOp = 1;
  google.protobuf.Any stateTransferFunc = 2;
}

message UpdateMultipleExecutorsRequest {
  repeated UpdateExecutorRequest executorsToUpdate = 1;
}

message UpdateExecutorCompletedRequest {
  common.ActorVirtualIdentity workerId = 1;
}