// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package edu.uci.ics.amber.engine.architecture.sendsemantics;

import "edu/uci/ics/amber/core/virtualidentity.proto";
import "scalapb/scalapb.proto";

option (scalapb.options) = {
  scope: FILE,
  preserve_unknown_fields: false
  no_default_values_in_constructor: true
};

message Partitioning{
  oneof sealed_value{
    OneToOnePartitioning oneToOnePartitioning = 1;
    RoundRobinPartitioning roundRobinPartitioning = 2;
    HashBasedShufflePartitioning hashBasedShufflePartitioning = 3;
    RangeBasedShufflePartitioning rangeBasedShufflePartitioning = 4;
    BroadcastPartitioning broadcastPartitioning = 5;
  }
}

message OneToOnePartitioning{
  int32 batchSize = 1;
  repeated core.ChannelIdentity channels = 2;
}

message RoundRobinPartitioning{
  int32 batchSize = 1;
  repeated core.ChannelIdentity channels = 2;
}

message HashBasedShufflePartitioning{
  int32 batchSize = 1;
  repeated core.ChannelIdentity channels = 2;
  repeated string hashAttributeNames = 3;
}

message RangeBasedShufflePartitioning {
  int32 batchSize = 1;
  repeated core.ChannelIdentity channels = 2;
  repeated string rangeAttributeNames = 3;
  int64 rangeMin = 4;
  int64 rangeMax = 5;
}

message BroadcastPartitioning{
  int32 batchSize = 1;
  repeated core.ChannelIdentity channels = 2;
}
