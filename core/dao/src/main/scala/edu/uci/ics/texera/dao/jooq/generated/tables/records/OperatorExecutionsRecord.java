/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables.records;


import edu.uci.ics.texera.dao.jooq.generated.tables.OperatorExecutions;
import edu.uci.ics.texera.dao.jooq.generated.tables.interfaces.IOperatorExecutions;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatorExecutionsRecord extends UpdatableRecordImpl<OperatorExecutionsRecord> implements Record4<Integer, String, String, Integer>, IOperatorExecutions {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>texera_db.operator_executions.workflow_execution_id</code>.
     */
    @Override
    public void setWorkflowExecutionId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>texera_db.operator_executions.workflow_execution_id</code>.
     */
    @Override
    public Integer getWorkflowExecutionId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>texera_db.operator_executions.operator_id</code>.
     */
    @Override
    public void setOperatorId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>texera_db.operator_executions.operator_id</code>.
     */
    @Override
    public String getOperatorId() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>texera_db.operator_executions.console_messages_uri</code>.
     */
    @Override
    public void setConsoleMessagesUri(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>texera_db.operator_executions.console_messages_uri</code>.
     */
    @Override
    public String getConsoleMessagesUri() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>texera_db.operator_executions.console_messages_size</code>.
     */
    @Override
    public void setConsoleMessagesSize(Integer value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>texera_db.operator_executions.console_messages_size</code>.
     */
    @Override
    public Integer getConsoleMessagesSize() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return OperatorExecutions.OPERATOR_EXECUTIONS.WORKFLOW_EXECUTION_ID;
    }

    @Override
    public Field<String> field2() {
        return OperatorExecutions.OPERATOR_EXECUTIONS.OPERATOR_ID;
    }

    @Override
    public Field<String> field3() {
        return OperatorExecutions.OPERATOR_EXECUTIONS.CONSOLE_MESSAGES_URI;
    }

    @Override
    public Field<Integer> field4() {
        return OperatorExecutions.OPERATOR_EXECUTIONS.CONSOLE_MESSAGES_SIZE;
    }

    @Override
    public Integer component1() {
        return getWorkflowExecutionId();
    }

    @Override
    public String component2() {
        return getOperatorId();
    }

    @Override
    public String component3() {
        return getConsoleMessagesUri();
    }

    @Override
    public Integer component4() {
        return getConsoleMessagesSize();
    }

    @Override
    public Integer value1() {
        return getWorkflowExecutionId();
    }

    @Override
    public String value2() {
        return getOperatorId();
    }

    @Override
    public String value3() {
        return getConsoleMessagesUri();
    }

    @Override
    public Integer value4() {
        return getConsoleMessagesSize();
    }

    @Override
    public OperatorExecutionsRecord value1(Integer value) {
        setWorkflowExecutionId(value);
        return this;
    }

    @Override
    public OperatorExecutionsRecord value2(String value) {
        setOperatorId(value);
        return this;
    }

    @Override
    public OperatorExecutionsRecord value3(String value) {
        setConsoleMessagesUri(value);
        return this;
    }

    @Override
    public OperatorExecutionsRecord value4(Integer value) {
        setConsoleMessagesSize(value);
        return this;
    }

    @Override
    public OperatorExecutionsRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOperatorExecutions from) {
        setWorkflowExecutionId(from.getWorkflowExecutionId());
        setOperatorId(from.getOperatorId());
        setConsoleMessagesUri(from.getConsoleMessagesUri());
        setConsoleMessagesSize(from.getConsoleMessagesSize());
    }

    @Override
    public <E extends IOperatorExecutions> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OperatorExecutionsRecord
     */
    public OperatorExecutionsRecord() {
        super(OperatorExecutions.OPERATOR_EXECUTIONS);
    }

    /**
     * Create a detached, initialised OperatorExecutionsRecord
     */
    public OperatorExecutionsRecord(Integer workflowExecutionId, String operatorId, String consoleMessagesUri, Integer consoleMessagesSize) {
        super(OperatorExecutions.OPERATOR_EXECUTIONS);

        setWorkflowExecutionId(workflowExecutionId);
        setOperatorId(operatorId);
        setConsoleMessagesUri(consoleMessagesUri);
        setConsoleMessagesSize(consoleMessagesSize);
    }

    /**
     * Create a detached, initialised OperatorExecutionsRecord
     */
    public OperatorExecutionsRecord(edu.uci.ics.texera.dao.jooq.generated.tables.pojos.OperatorExecutions value) {
        super(OperatorExecutions.OPERATOR_EXECUTIONS);

        if (value != null) {
            setWorkflowExecutionId(value.getWorkflowExecutionId());
            setOperatorId(value.getOperatorId());
            setConsoleMessagesUri(value.getConsoleMessagesUri());
            setConsoleMessagesSize(value.getConsoleMessagesSize());
        }
    }
}
