/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.PublicProjectRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublicProject extends TableImpl<PublicProjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.public_project</code>
     */
    public static final PublicProject PUBLIC_PROJECT = new PublicProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicProjectRecord> getRecordType() {
        return PublicProjectRecord.class;
    }

    /**
     * The column <code>texera_db.public_project.pid</code>.
     */
    public final TableField<PublicProjectRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.public_project.uid</code>.
     */
    public final TableField<PublicProjectRecord, Integer> UID = createField(DSL.name("uid"), SQLDataType.INTEGER, this, "");

    private PublicProject(Name alias, Table<PublicProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private PublicProject(Name alias, Table<PublicProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.public_project</code> table reference
     */
    public PublicProject(String alias) {
        this(DSL.name(alias), PUBLIC_PROJECT);
    }

    /**
     * Create an aliased <code>texera_db.public_project</code> table reference
     */
    public PublicProject(Name alias) {
        this(alias, PUBLIC_PROJECT);
    }

    /**
     * Create a <code>texera_db.public_project</code> table reference
     */
    public PublicProject() {
        this(DSL.name("public_project"), null);
    }

    public <O extends Record> PublicProject(Table<O> child, ForeignKey<O, PublicProjectRecord> key) {
        super(child, key, PUBLIC_PROJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public UniqueKey<PublicProjectRecord> getPrimaryKey() {
        return Keys.PUBLIC_PROJECT_PKEY;
    }

    @Override
    public List<ForeignKey<PublicProjectRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PUBLIC_PROJECT__PUBLIC_PROJECT_PID_FKEY);
    }

    private transient Project _project;

    /**
     * Get the implicit join path to the <code>texera_db.project</code> table.
     */
    public Project project() {
        if (_project == null)
            _project = new Project(this, Keys.PUBLIC_PROJECT__PUBLIC_PROJECT_PID_FKEY);

        return _project;
    }

    @Override
    public PublicProject as(String alias) {
        return new PublicProject(DSL.name(alias), this);
    }

    @Override
    public PublicProject as(Name alias) {
        return new PublicProject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PublicProject rename(String name) {
        return new PublicProject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PublicProject rename(Name name) {
        return new PublicProject(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
