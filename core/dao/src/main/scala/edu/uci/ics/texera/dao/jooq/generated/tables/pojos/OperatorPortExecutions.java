/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables.pojos;


import edu.uci.ics.texera.dao.jooq.generated.tables.interfaces.IOperatorPortExecutions;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatorPortExecutions implements IOperatorPortExecutions {

    private static final long serialVersionUID = 1L;

    private Integer workflowExecutionId;
    private String  globalPortId;
    private String  resultUri;
    private Integer resultSize;

    public OperatorPortExecutions() {}

    public OperatorPortExecutions(IOperatorPortExecutions value) {
        this.workflowExecutionId = value.getWorkflowExecutionId();
        this.globalPortId = value.getGlobalPortId();
        this.resultUri = value.getResultUri();
        this.resultSize = value.getResultSize();
    }

    public OperatorPortExecutions(
        Integer workflowExecutionId,
        String  globalPortId,
        String  resultUri,
        Integer resultSize
    ) {
        this.workflowExecutionId = workflowExecutionId;
        this.globalPortId = globalPortId;
        this.resultUri = resultUri;
        this.resultSize = resultSize;
    }

    /**
     * Getter for
     * <code>texera_db.operator_port_executions.workflow_execution_id</code>.
     */
    @Override
    public Integer getWorkflowExecutionId() {
        return this.workflowExecutionId;
    }

    /**
     * Setter for
     * <code>texera_db.operator_port_executions.workflow_execution_id</code>.
     */
    @Override
    public void setWorkflowExecutionId(Integer workflowExecutionId) {
        this.workflowExecutionId = workflowExecutionId;
    }

    /**
     * Getter for
     * <code>texera_db.operator_port_executions.global_port_id</code>.
     */
    @Override
    public String getGlobalPortId() {
        return this.globalPortId;
    }

    /**
     * Setter for
     * <code>texera_db.operator_port_executions.global_port_id</code>.
     */
    @Override
    public void setGlobalPortId(String globalPortId) {
        this.globalPortId = globalPortId;
    }

    /**
     * Getter for <code>texera_db.operator_port_executions.result_uri</code>.
     */
    @Override
    public String getResultUri() {
        return this.resultUri;
    }

    /**
     * Setter for <code>texera_db.operator_port_executions.result_uri</code>.
     */
    @Override
    public void setResultUri(String resultUri) {
        this.resultUri = resultUri;
    }

    /**
     * Getter for <code>texera_db.operator_port_executions.result_size</code>.
     */
    @Override
    public Integer getResultSize() {
        return this.resultSize;
    }

    /**
     * Setter for <code>texera_db.operator_port_executions.result_size</code>.
     */
    @Override
    public void setResultSize(Integer resultSize) {
        this.resultSize = resultSize;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OperatorPortExecutions (");

        sb.append(workflowExecutionId);
        sb.append(", ").append(globalPortId);
        sb.append(", ").append(resultUri);
        sb.append(", ").append(resultSize);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOperatorPortExecutions from) {
        setWorkflowExecutionId(from.getWorkflowExecutionId());
        setGlobalPortId(from.getGlobalPortId());
        setResultUri(from.getResultUri());
        setResultSize(from.getResultSize());
    }

    @Override
    public <E extends IOperatorPortExecutions> E into(E into) {
        into.from(this);
        return into;
    }
}
