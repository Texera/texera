/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.OperatorExecutionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatorExecutions extends TableImpl<OperatorExecutionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.operator_executions</code>
     */
    public static final OperatorExecutions OPERATOR_EXECUTIONS = new OperatorExecutions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperatorExecutionsRecord> getRecordType() {
        return OperatorExecutionsRecord.class;
    }

    /**
     * The column
     * <code>texera_db.operator_executions.workflow_execution_id</code>.
     */
    public final TableField<OperatorExecutionsRecord, Integer> WORKFLOW_EXECUTION_ID = createField(DSL.name("workflow_execution_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.operator_executions.operator_id</code>.
     */
    public final TableField<OperatorExecutionsRecord, String> OPERATOR_ID = createField(DSL.name("operator_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>texera_db.operator_executions.console_messages_uri</code>.
     */
    public final TableField<OperatorExecutionsRecord, String> CONSOLE_MESSAGES_URI = createField(DSL.name("console_messages_uri"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>texera_db.operator_executions.console_messages_size</code>.
     */
    public final TableField<OperatorExecutionsRecord, Integer> CONSOLE_MESSAGES_SIZE = createField(DSL.name("console_messages_size"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private OperatorExecutions(Name alias, Table<OperatorExecutionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OperatorExecutions(Name alias, Table<OperatorExecutionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.operator_executions</code> table
     * reference
     */
    public OperatorExecutions(String alias) {
        this(DSL.name(alias), OPERATOR_EXECUTIONS);
    }

    /**
     * Create an aliased <code>texera_db.operator_executions</code> table
     * reference
     */
    public OperatorExecutions(Name alias) {
        this(alias, OPERATOR_EXECUTIONS);
    }

    /**
     * Create a <code>texera_db.operator_executions</code> table reference
     */
    public OperatorExecutions() {
        this(DSL.name("operator_executions"), null);
    }

    public <O extends Record> OperatorExecutions(Table<O> child, ForeignKey<O, OperatorExecutionsRecord> key) {
        super(child, key, OPERATOR_EXECUTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public UniqueKey<OperatorExecutionsRecord> getPrimaryKey() {
        return Keys.OPERATOR_EXECUTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<OperatorExecutionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OPERATOR_EXECUTIONS__OPERATOR_EXECUTIONS_WORKFLOW_EXECUTION_ID_FKEY);
    }

    private transient WorkflowExecutions _workflowExecutions;

    /**
     * Get the implicit join path to the
     * <code>texera_db.workflow_executions</code> table.
     */
    public WorkflowExecutions workflowExecutions() {
        if (_workflowExecutions == null)
            _workflowExecutions = new WorkflowExecutions(this, Keys.OPERATOR_EXECUTIONS__OPERATOR_EXECUTIONS_WORKFLOW_EXECUTION_ID_FKEY);

        return _workflowExecutions;
    }

    @Override
    public OperatorExecutions as(String alias) {
        return new OperatorExecutions(DSL.name(alias), this);
    }

    @Override
    public OperatorExecutions as(Name alias) {
        return new OperatorExecutions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OperatorExecutions rename(String name) {
        return new OperatorExecutions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OperatorExecutions rename(Name name) {
        return new OperatorExecutions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
