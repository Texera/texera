/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.S3ReferenceCountsRecord;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S3ReferenceCounts extends TableImpl<S3ReferenceCountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.s3_reference_counts</code>
     */
    public static final S3ReferenceCounts S3_REFERENCE_COUNTS = new S3ReferenceCounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S3ReferenceCountsRecord> getRecordType() {
        return S3ReferenceCountsRecord.class;
    }

    /**
     * The column <code>texera_db.s3_reference_counts.s3_uri</code>.
     */
    public final TableField<S3ReferenceCountsRecord, String> S3_URI = createField(DSL.name("s3_uri"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>texera_db.s3_reference_counts.reference_count</code>.
     */
    public final TableField<S3ReferenceCountsRecord, Integer> REFERENCE_COUNT = createField(DSL.name("reference_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>texera_db.s3_reference_counts.created_at</code>.
     */
    public final TableField<S3ReferenceCountsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>texera_db.s3_reference_counts.updated_at</code>.
     */
    public final TableField<S3ReferenceCountsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private S3ReferenceCounts(Name alias, Table<S3ReferenceCountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private S3ReferenceCounts(Name alias, Table<S3ReferenceCountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.s3_reference_counts</code> table
     * reference
     */
    public S3ReferenceCounts(String alias) {
        this(DSL.name(alias), S3_REFERENCE_COUNTS);
    }

    /**
     * Create an aliased <code>texera_db.s3_reference_counts</code> table
     * reference
     */
    public S3ReferenceCounts(Name alias) {
        this(alias, S3_REFERENCE_COUNTS);
    }

    /**
     * Create a <code>texera_db.s3_reference_counts</code> table reference
     */
    public S3ReferenceCounts() {
        this(DSL.name("s3_reference_counts"), null);
    }

    public <O extends Record> S3ReferenceCounts(Table<O> child, ForeignKey<O, S3ReferenceCountsRecord> key) {
        super(child, key, S3_REFERENCE_COUNTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public UniqueKey<S3ReferenceCountsRecord> getPrimaryKey() {
        return Keys.S3_REFERENCE_COUNTS_PKEY;
    }

    @Override
    public S3ReferenceCounts as(String alias) {
        return new S3ReferenceCounts(DSL.name(alias), this);
    }

    @Override
    public S3ReferenceCounts as(Name alias) {
        return new S3ReferenceCounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S3ReferenceCounts rename(String name) {
        return new S3ReferenceCounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S3ReferenceCounts rename(Name name) {
        return new S3ReferenceCounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
