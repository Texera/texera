/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables.records;


import edu.uci.ics.texera.dao.jooq.generated.tables.S3ReferenceCounts;
import edu.uci.ics.texera.dao.jooq.generated.tables.interfaces.IS3ReferenceCounts;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S3ReferenceCountsRecord extends UpdatableRecordImpl<S3ReferenceCountsRecord> implements Record4<String, Integer, OffsetDateTime, OffsetDateTime>, IS3ReferenceCounts {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>texera_db.s3_reference_counts.s3_uri</code>.
     */
    @Override
    public void setS3Uri(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>texera_db.s3_reference_counts.s3_uri</code>.
     */
    @Override
    public String getS3Uri() {
        return (String) get(0);
    }

    /**
     * Setter for <code>texera_db.s3_reference_counts.reference_count</code>.
     */
    @Override
    public void setReferenceCount(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>texera_db.s3_reference_counts.reference_count</code>.
     */
    @Override
    public Integer getReferenceCount() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>texera_db.s3_reference_counts.created_at</code>.
     */
    @Override
    public void setCreatedAt(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>texera_db.s3_reference_counts.created_at</code>.
     */
    @Override
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>texera_db.s3_reference_counts.updated_at</code>.
     */
    @Override
    public void setUpdatedAt(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>texera_db.s3_reference_counts.updated_at</code>.
     */
    @Override
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, Integer, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return S3ReferenceCounts.S3_REFERENCE_COUNTS.S3_URI;
    }

    @Override
    public Field<Integer> field2() {
        return S3ReferenceCounts.S3_REFERENCE_COUNTS.REFERENCE_COUNT;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return S3ReferenceCounts.S3_REFERENCE_COUNTS.CREATED_AT;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return S3ReferenceCounts.S3_REFERENCE_COUNTS.UPDATED_AT;
    }

    @Override
    public String component1() {
        return getS3Uri();
    }

    @Override
    public Integer component2() {
        return getReferenceCount();
    }

    @Override
    public OffsetDateTime component3() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime component4() {
        return getUpdatedAt();
    }

    @Override
    public String value1() {
        return getS3Uri();
    }

    @Override
    public Integer value2() {
        return getReferenceCount();
    }

    @Override
    public OffsetDateTime value3() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime value4() {
        return getUpdatedAt();
    }

    @Override
    public S3ReferenceCountsRecord value1(String value) {
        setS3Uri(value);
        return this;
    }

    @Override
    public S3ReferenceCountsRecord value2(Integer value) {
        setReferenceCount(value);
        return this;
    }

    @Override
    public S3ReferenceCountsRecord value3(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public S3ReferenceCountsRecord value4(OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public S3ReferenceCountsRecord values(String value1, Integer value2, OffsetDateTime value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IS3ReferenceCounts from) {
        setS3Uri(from.getS3Uri());
        setReferenceCount(from.getReferenceCount());
        setCreatedAt(from.getCreatedAt());
        setUpdatedAt(from.getUpdatedAt());
    }

    @Override
    public <E extends IS3ReferenceCounts> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached S3ReferenceCountsRecord
     */
    public S3ReferenceCountsRecord() {
        super(S3ReferenceCounts.S3_REFERENCE_COUNTS);
    }

    /**
     * Create a detached, initialised S3ReferenceCountsRecord
     */
    public S3ReferenceCountsRecord(String s3Uri, Integer referenceCount, OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        super(S3ReferenceCounts.S3_REFERENCE_COUNTS);

        setS3Uri(s3Uri);
        setReferenceCount(referenceCount);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
    }

    /**
     * Create a detached, initialised S3ReferenceCountsRecord
     */
    public S3ReferenceCountsRecord(edu.uci.ics.texera.dao.jooq.generated.tables.pojos.S3ReferenceCounts value) {
        super(S3ReferenceCounts.S3_REFERENCE_COUNTS);

        if (value != null) {
            setS3Uri(value.getS3Uri());
            setReferenceCount(value.getReferenceCount());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
        }
    }
}
