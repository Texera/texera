/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.DatasetViewCountRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetViewCount extends TableImpl<DatasetViewCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.dataset_view_count</code>
     */
    public static final DatasetViewCount DATASET_VIEW_COUNT = new DatasetViewCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetViewCountRecord> getRecordType() {
        return DatasetViewCountRecord.class;
    }

    /**
     * The column <code>texera_db.dataset_view_count.did</code>.
     */
    public final TableField<DatasetViewCountRecord, Integer> DID = createField(DSL.name("did"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.dataset_view_count.view_count</code>.
     */
    public final TableField<DatasetViewCountRecord, Integer> VIEW_COUNT = createField(DSL.name("view_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private DatasetViewCount(Name alias, Table<DatasetViewCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetViewCount(Name alias, Table<DatasetViewCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.dataset_view_count</code> table
     * reference
     */
    public DatasetViewCount(String alias) {
        this(DSL.name(alias), DATASET_VIEW_COUNT);
    }

    /**
     * Create an aliased <code>texera_db.dataset_view_count</code> table
     * reference
     */
    public DatasetViewCount(Name alias) {
        this(alias, DATASET_VIEW_COUNT);
    }

    /**
     * Create a <code>texera_db.dataset_view_count</code> table reference
     */
    public DatasetViewCount() {
        this(DSL.name("dataset_view_count"), null);
    }

    public <O extends Record> DatasetViewCount(Table<O> child, ForeignKey<O, DatasetViewCountRecord> key) {
        super(child, key, DATASET_VIEW_COUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public UniqueKey<DatasetViewCountRecord> getPrimaryKey() {
        return Keys.DATASET_VIEW_COUNT_PKEY;
    }

    @Override
    public List<ForeignKey<DatasetViewCountRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DATASET_VIEW_COUNT__DATASET_VIEW_COUNT_DID_FKEY);
    }

    private transient Dataset _dataset;

    /**
     * Get the implicit join path to the <code>texera_db.dataset</code> table.
     */
    public Dataset dataset() {
        if (_dataset == null)
            _dataset = new Dataset(this, Keys.DATASET_VIEW_COUNT__DATASET_VIEW_COUNT_DID_FKEY);

        return _dataset;
    }

    @Override
    public DatasetViewCount as(String alias) {
        return new DatasetViewCount(DSL.name(alias), this);
    }

    @Override
    public DatasetViewCount as(Name alias) {
        return new DatasetViewCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetViewCount rename(String name) {
        return new DatasetViewCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetViewCount rename(Name name) {
        return new DatasetViewCount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
