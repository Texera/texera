/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables.pojos;


import edu.uci.ics.texera.dao.jooq.generated.tables.interfaces.IOperatorExecutions;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatorExecutions implements IOperatorExecutions {

    private static final long serialVersionUID = 1L;

    private Integer workflowExecutionId;
    private String  operatorId;
    private String  consoleMessagesUri;

    public OperatorExecutions() {}

    public OperatorExecutions(IOperatorExecutions value) {
        this.workflowExecutionId = value.getWorkflowExecutionId();
        this.operatorId = value.getOperatorId();
        this.consoleMessagesUri = value.getConsoleMessagesUri();
    }

    public OperatorExecutions(
        Integer workflowExecutionId,
        String  operatorId,
        String  consoleMessagesUri
    ) {
        this.workflowExecutionId = workflowExecutionId;
        this.operatorId = operatorId;
        this.consoleMessagesUri = consoleMessagesUri;
    }

    /**
     * Getter for
     * <code>texera_db.operator_executions.workflow_execution_id</code>.
     */
    @Override
    public Integer getWorkflowExecutionId() {
        return this.workflowExecutionId;
    }

    /**
     * Setter for
     * <code>texera_db.operator_executions.workflow_execution_id</code>.
     */
    @Override
    public void setWorkflowExecutionId(Integer workflowExecutionId) {
        this.workflowExecutionId = workflowExecutionId;
    }

    /**
     * Getter for <code>texera_db.operator_executions.operator_id</code>.
     */
    @Override
    public String getOperatorId() {
        return this.operatorId;
    }

    /**
     * Setter for <code>texera_db.operator_executions.operator_id</code>.
     */
    @Override
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }

    /**
     * Getter for
     * <code>texera_db.operator_executions.console_messages_uri</code>.
     */
    @Override
    public String getConsoleMessagesUri() {
        return this.consoleMessagesUri;
    }

    /**
     * Setter for
     * <code>texera_db.operator_executions.console_messages_uri</code>.
     */
    @Override
    public void setConsoleMessagesUri(String consoleMessagesUri) {
        this.consoleMessagesUri = consoleMessagesUri;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OperatorExecutions (");

        sb.append(workflowExecutionId);
        sb.append(", ").append(operatorId);
        sb.append(", ").append(consoleMessagesUri);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOperatorExecutions from) {
        setWorkflowExecutionId(from.getWorkflowExecutionId());
        setOperatorId(from.getOperatorId());
        setConsoleMessagesUri(from.getConsoleMessagesUri());
    }

    @Override
    public <E extends IOperatorExecutions> E into(E into) {
        into.from(this);
        return into;
    }
}
