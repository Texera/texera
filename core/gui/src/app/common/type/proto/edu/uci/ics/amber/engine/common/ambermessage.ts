// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: edu/uci/ics/amber/engine/common/ambermessage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ControlInvocation } from "../architecture/rpc/controlcommands";
import { ReturnInvocation } from "../architecture/rpc/controlreturns";
import { ActorVirtualIdentity } from "./virtualidentity";

export const protobufPackage = "edu.uci.ics.amber.engine.common";

export interface ControlPayloadV2 {
  controlInvocation?: ControlInvocation | undefined;
  returnInvocation?: ReturnInvocation | undefined;
}

export interface PythonDataHeader {
  tag: ActorVirtualIdentity | undefined;
  payloadType: string;
}

export interface PythonControlMessage {
  tag: ActorVirtualIdentity | undefined;
  payload: ControlPayloadV2 | undefined;
}

function createBaseControlPayloadV2(): ControlPayloadV2 {
  return { controlInvocation: undefined, returnInvocation: undefined };
}

export const ControlPayloadV2: MessageFns<ControlPayloadV2> = {
  encode(message: ControlPayloadV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.controlInvocation !== undefined) {
      ControlInvocation.encode(message.controlInvocation, writer.uint32(10).fork()).join();
    }
    if (message.returnInvocation !== undefined) {
      ReturnInvocation.encode(message.returnInvocation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ControlPayloadV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControlPayloadV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.controlInvocation = ControlInvocation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.returnInvocation = ReturnInvocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ControlPayloadV2 {
    return {
      controlInvocation: isSet(object.controlInvocation)
        ? ControlInvocation.fromJSON(object.controlInvocation)
        : undefined,
      returnInvocation: isSet(object.returnInvocation) ? ReturnInvocation.fromJSON(object.returnInvocation) : undefined,
    };
  },

  toJSON(message: ControlPayloadV2): unknown {
    const obj: any = {};
    if (message.controlInvocation !== undefined) {
      obj.controlInvocation = ControlInvocation.toJSON(message.controlInvocation);
    }
    if (message.returnInvocation !== undefined) {
      obj.returnInvocation = ReturnInvocation.toJSON(message.returnInvocation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ControlPayloadV2>, I>>(base?: I): ControlPayloadV2 {
    return ControlPayloadV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ControlPayloadV2>, I>>(object: I): ControlPayloadV2 {
    const message = createBaseControlPayloadV2();
    message.controlInvocation = (object.controlInvocation !== undefined && object.controlInvocation !== null)
      ? ControlInvocation.fromPartial(object.controlInvocation)
      : undefined;
    message.returnInvocation = (object.returnInvocation !== undefined && object.returnInvocation !== null)
      ? ReturnInvocation.fromPartial(object.returnInvocation)
      : undefined;
    return message;
  },
};

function createBasePythonDataHeader(): PythonDataHeader {
  return { tag: undefined, payloadType: "" };
}

export const PythonDataHeader: MessageFns<PythonDataHeader> = {
  encode(message: PythonDataHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== undefined) {
      ActorVirtualIdentity.encode(message.tag, writer.uint32(10).fork()).join();
    }
    if (message.payloadType !== "") {
      writer.uint32(18).string(message.payloadType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PythonDataHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePythonDataHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tag = ActorVirtualIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payloadType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PythonDataHeader {
    return {
      tag: isSet(object.tag) ? ActorVirtualIdentity.fromJSON(object.tag) : undefined,
      payloadType: isSet(object.payloadType) ? globalThis.String(object.payloadType) : "",
    };
  },

  toJSON(message: PythonDataHeader): unknown {
    const obj: any = {};
    if (message.tag !== undefined) {
      obj.tag = ActorVirtualIdentity.toJSON(message.tag);
    }
    if (message.payloadType !== "") {
      obj.payloadType = message.payloadType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PythonDataHeader>, I>>(base?: I): PythonDataHeader {
    return PythonDataHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PythonDataHeader>, I>>(object: I): PythonDataHeader {
    const message = createBasePythonDataHeader();
    message.tag = (object.tag !== undefined && object.tag !== null)
      ? ActorVirtualIdentity.fromPartial(object.tag)
      : undefined;
    message.payloadType = object.payloadType ?? "";
    return message;
  },
};

function createBasePythonControlMessage(): PythonControlMessage {
  return { tag: undefined, payload: undefined };
}

export const PythonControlMessage: MessageFns<PythonControlMessage> = {
  encode(message: PythonControlMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== undefined) {
      ActorVirtualIdentity.encode(message.tag, writer.uint32(10).fork()).join();
    }
    if (message.payload !== undefined) {
      ControlPayloadV2.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PythonControlMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePythonControlMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tag = ActorVirtualIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = ControlPayloadV2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PythonControlMessage {
    return {
      tag: isSet(object.tag) ? ActorVirtualIdentity.fromJSON(object.tag) : undefined,
      payload: isSet(object.payload) ? ControlPayloadV2.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: PythonControlMessage): unknown {
    const obj: any = {};
    if (message.tag !== undefined) {
      obj.tag = ActorVirtualIdentity.toJSON(message.tag);
    }
    if (message.payload !== undefined) {
      obj.payload = ControlPayloadV2.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PythonControlMessage>, I>>(base?: I): PythonControlMessage {
    return PythonControlMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PythonControlMessage>, I>>(object: I): PythonControlMessage {
    const message = createBasePythonControlMessage();
    message.tag = (object.tag !== undefined && object.tag !== null)
      ? ActorVirtualIdentity.fromPartial(object.tag)
      : undefined;
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ControlPayloadV2.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
