/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.3
// source: edu/uci/ics/amber/engine/common/workflow.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PhysicalOpIdentity } from "./virtualidentity";

export const protobufPackage = "edu.uci.ics.amber.engine.common";

export interface PortIdentity {
  id: number;
  internal: boolean;
}

export interface InputPort {
  id: PortIdentity | undefined;
  displayName: string;
  allowMultiLinks: boolean;
  dependencies: PortIdentity[];
}

export interface OutputPort {
  id: PortIdentity | undefined;
  displayName: string;
  blocking: boolean;
}

export interface PhysicalLink {
  fromOpId: PhysicalOpIdentity | undefined;
  fromPortId: PortIdentity | undefined;
  toOpId: PhysicalOpIdentity | undefined;
  toPortId: PortIdentity | undefined;
}

function createBasePortIdentity(): PortIdentity {
  return { id: 0, internal: false };
}

export const PortIdentity: MessageFns<PortIdentity> = {
  encode(message: PortIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.internal !== false) {
      writer.uint32(16).bool(message.internal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PortIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.internal = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PortIdentity {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      internal: isSet(object.internal) ? globalThis.Boolean(object.internal) : false,
    };
  },

  toJSON(message: PortIdentity): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.internal !== false) {
      obj.internal = message.internal;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PortIdentity>, I>>(base?: I): PortIdentity {
    return PortIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PortIdentity>, I>>(object: I): PortIdentity {
    const message = createBasePortIdentity();
    message.id = object.id ?? 0;
    message.internal = object.internal ?? false;
    return message;
  },
};

function createBaseInputPort(): InputPort {
  return { id: undefined, displayName: "", allowMultiLinks: false, dependencies: [] };
}

export const InputPort: MessageFns<InputPort> = {
  encode(message: InputPort, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      PortIdentity.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.allowMultiLinks !== false) {
      writer.uint32(24).bool(message.allowMultiLinks);
    }
    for (const v of message.dependencies) {
      PortIdentity.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputPort {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputPort();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = PortIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMultiLinks = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dependencies.push(PortIdentity.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputPort {
    return {
      id: isSet(object.id) ? PortIdentity.fromJSON(object.id) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      allowMultiLinks: isSet(object.allowMultiLinks) ? globalThis.Boolean(object.allowMultiLinks) : false,
      dependencies: globalThis.Array.isArray(object?.dependencies)
        ? object.dependencies.map((e: any) => PortIdentity.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InputPort): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = PortIdentity.toJSON(message.id);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.allowMultiLinks !== false) {
      obj.allowMultiLinks = message.allowMultiLinks;
    }
    if (message.dependencies?.length) {
      obj.dependencies = message.dependencies.map(e => PortIdentity.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputPort>, I>>(base?: I): InputPort {
    return InputPort.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputPort>, I>>(object: I): InputPort {
    const message = createBaseInputPort();
    message.id = object.id !== undefined && object.id !== null ? PortIdentity.fromPartial(object.id) : undefined;
    message.displayName = object.displayName ?? "";
    message.allowMultiLinks = object.allowMultiLinks ?? false;
    message.dependencies = object.dependencies?.map(e => PortIdentity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOutputPort(): OutputPort {
  return { id: undefined, displayName: "", blocking: false };
}

export const OutputPort: MessageFns<OutputPort> = {
  encode(message: OutputPort, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      PortIdentity.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.blocking !== false) {
      writer.uint32(24).bool(message.blocking);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputPort {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputPort();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = PortIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blocking = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputPort {
    return {
      id: isSet(object.id) ? PortIdentity.fromJSON(object.id) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      blocking: isSet(object.blocking) ? globalThis.Boolean(object.blocking) : false,
    };
  },

  toJSON(message: OutputPort): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = PortIdentity.toJSON(message.id);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.blocking !== false) {
      obj.blocking = message.blocking;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputPort>, I>>(base?: I): OutputPort {
    return OutputPort.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputPort>, I>>(object: I): OutputPort {
    const message = createBaseOutputPort();
    message.id = object.id !== undefined && object.id !== null ? PortIdentity.fromPartial(object.id) : undefined;
    message.displayName = object.displayName ?? "";
    message.blocking = object.blocking ?? false;
    return message;
  },
};

function createBasePhysicalLink(): PhysicalLink {
  return { fromOpId: undefined, fromPortId: undefined, toOpId: undefined, toPortId: undefined };
}

export const PhysicalLink: MessageFns<PhysicalLink> = {
  encode(message: PhysicalLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromOpId !== undefined) {
      PhysicalOpIdentity.encode(message.fromOpId, writer.uint32(10).fork()).join();
    }
    if (message.fromPortId !== undefined) {
      PortIdentity.encode(message.fromPortId, writer.uint32(18).fork()).join();
    }
    if (message.toOpId !== undefined) {
      PhysicalOpIdentity.encode(message.toOpId, writer.uint32(26).fork()).join();
    }
    if (message.toPortId !== undefined) {
      PortIdentity.encode(message.toPortId, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PhysicalLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhysicalLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fromOpId = PhysicalOpIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fromPortId = PortIdentity.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.toOpId = PhysicalOpIdentity.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.toPortId = PortIdentity.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PhysicalLink {
    return {
      fromOpId: isSet(object.fromOpId) ? PhysicalOpIdentity.fromJSON(object.fromOpId) : undefined,
      fromPortId: isSet(object.fromPortId) ? PortIdentity.fromJSON(object.fromPortId) : undefined,
      toOpId: isSet(object.toOpId) ? PhysicalOpIdentity.fromJSON(object.toOpId) : undefined,
      toPortId: isSet(object.toPortId) ? PortIdentity.fromJSON(object.toPortId) : undefined,
    };
  },

  toJSON(message: PhysicalLink): unknown {
    const obj: any = {};
    if (message.fromOpId !== undefined) {
      obj.fromOpId = PhysicalOpIdentity.toJSON(message.fromOpId);
    }
    if (message.fromPortId !== undefined) {
      obj.fromPortId = PortIdentity.toJSON(message.fromPortId);
    }
    if (message.toOpId !== undefined) {
      obj.toOpId = PhysicalOpIdentity.toJSON(message.toOpId);
    }
    if (message.toPortId !== undefined) {
      obj.toPortId = PortIdentity.toJSON(message.toPortId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PhysicalLink>, I>>(base?: I): PhysicalLink {
    return PhysicalLink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PhysicalLink>, I>>(object: I): PhysicalLink {
    const message = createBasePhysicalLink();
    message.fromOpId =
      object.fromOpId !== undefined && object.fromOpId !== null
        ? PhysicalOpIdentity.fromPartial(object.fromOpId)
        : undefined;
    message.fromPortId =
      object.fromPortId !== undefined && object.fromPortId !== null
        ? PortIdentity.fromPartial(object.fromPortId)
        : undefined;
    message.toOpId =
      object.toOpId !== undefined && object.toOpId !== null ? PhysicalOpIdentity.fromPartial(object.toOpId) : undefined;
    message.toPortId =
      object.toPortId !== undefined && object.toPortId !== null ? PortIdentity.fromPartial(object.toPortId) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
