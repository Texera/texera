// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: edu/uci/ics/amber/engine/common/actormessage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "edu.uci.ics.amber.engine.common";

export interface Backpressure {
  enableBackpressure: boolean;
}

export interface CreditUpdate {
}

export interface ActorCommand {
  backpressure?: Backpressure | undefined;
  creditUpdate?: CreditUpdate | undefined;
}

export interface PythonActorMessage {
  payload: ActorCommand | undefined;
}

function createBaseBackpressure(): Backpressure {
  return { enableBackpressure: false };
}

export const Backpressure: MessageFns<Backpressure> = {
  encode(message: Backpressure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableBackpressure !== false) {
      writer.uint32(8).bool(message.enableBackpressure);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Backpressure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackpressure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableBackpressure = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Backpressure {
    return {
      enableBackpressure: isSet(object.enableBackpressure) ? globalThis.Boolean(object.enableBackpressure) : false,
    };
  },

  toJSON(message: Backpressure): unknown {
    const obj: any = {};
    if (message.enableBackpressure !== false) {
      obj.enableBackpressure = message.enableBackpressure;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Backpressure>, I>>(base?: I): Backpressure {
    return Backpressure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Backpressure>, I>>(object: I): Backpressure {
    const message = createBaseBackpressure();
    message.enableBackpressure = object.enableBackpressure ?? false;
    return message;
  },
};

function createBaseCreditUpdate(): CreditUpdate {
  return {};
}

export const CreditUpdate: MessageFns<CreditUpdate> = {
  encode(_: CreditUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreditUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreditUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreditUpdate {
    return {};
  },

  toJSON(_: CreditUpdate): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreditUpdate>, I>>(base?: I): CreditUpdate {
    return CreditUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreditUpdate>, I>>(_: I): CreditUpdate {
    const message = createBaseCreditUpdate();
    return message;
  },
};

function createBaseActorCommand(): ActorCommand {
  return { backpressure: undefined, creditUpdate: undefined };
}

export const ActorCommand: MessageFns<ActorCommand> = {
  encode(message: ActorCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backpressure !== undefined) {
      Backpressure.encode(message.backpressure, writer.uint32(10).fork()).join();
    }
    if (message.creditUpdate !== undefined) {
      CreditUpdate.encode(message.creditUpdate, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActorCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActorCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backpressure = Backpressure.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creditUpdate = CreditUpdate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActorCommand {
    return {
      backpressure: isSet(object.backpressure) ? Backpressure.fromJSON(object.backpressure) : undefined,
      creditUpdate: isSet(object.creditUpdate) ? CreditUpdate.fromJSON(object.creditUpdate) : undefined,
    };
  },

  toJSON(message: ActorCommand): unknown {
    const obj: any = {};
    if (message.backpressure !== undefined) {
      obj.backpressure = Backpressure.toJSON(message.backpressure);
    }
    if (message.creditUpdate !== undefined) {
      obj.creditUpdate = CreditUpdate.toJSON(message.creditUpdate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActorCommand>, I>>(base?: I): ActorCommand {
    return ActorCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActorCommand>, I>>(object: I): ActorCommand {
    const message = createBaseActorCommand();
    message.backpressure = (object.backpressure !== undefined && object.backpressure !== null)
      ? Backpressure.fromPartial(object.backpressure)
      : undefined;
    message.creditUpdate = (object.creditUpdate !== undefined && object.creditUpdate !== null)
      ? CreditUpdate.fromPartial(object.creditUpdate)
      : undefined;
    return message;
  },
};

function createBasePythonActorMessage(): PythonActorMessage {
  return { payload: undefined };
}

export const PythonActorMessage: MessageFns<PythonActorMessage> = {
  encode(message: PythonActorMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      ActorCommand.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PythonActorMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePythonActorMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = ActorCommand.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PythonActorMessage {
    return { payload: isSet(object.payload) ? ActorCommand.fromJSON(object.payload) : undefined };
  },

  toJSON(message: PythonActorMessage): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = ActorCommand.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PythonActorMessage>, I>>(base?: I): PythonActorMessage {
    return PythonActorMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PythonActorMessage>, I>>(object: I): PythonActorMessage {
    const message = createBasePythonActorMessage();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ActorCommand.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
