// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: edu/uci/ics/amber/engine/architecture/rpc/controllerservice.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import {
  ConsoleMessageTriggeredRequest,
  DebugCommandRequest,
  EmptyRequest,
  EvaluatePythonExpressionRequest,
  LinkWorkersRequest,
  PortCompletedRequest,
  PropagateChannelMarkerRequest,
  QueryStatisticsRequest,
  RetryWorkflowRequest,
  TakeGlobalCheckpointRequest,
  WorkerStateUpdatedRequest,
} from "./controlcommands";
import {
  EmptyReturn,
  EvaluatePythonExpressionResponse,
  PropagateChannelMarkerResponse,
  RetrieveWorkflowStateResponse,
  StartWorkflowResponse,
  TakeGlobalCheckpointResponse,
} from "./controlreturns";

export const protobufPackage = "edu.uci.ics.amber.engine.architecture.rpc";

export interface ControllerService {
  RetrieveWorkflowState(request: EmptyRequest): Promise<RetrieveWorkflowStateResponse>;
  PropagateChannelMarker(request: PropagateChannelMarkerRequest): Promise<PropagateChannelMarkerResponse>;
  TakeGlobalCheckpoint(request: TakeGlobalCheckpointRequest): Promise<TakeGlobalCheckpointResponse>;
  DebugCommand(request: DebugCommandRequest): Promise<EmptyReturn>;
  EvaluatePythonExpression(request: EvaluatePythonExpressionRequest): Promise<EvaluatePythonExpressionResponse>;
  ConsoleMessageTriggered(request: ConsoleMessageTriggeredRequest): Promise<EmptyReturn>;
  PortCompleted(request: PortCompletedRequest): Promise<EmptyReturn>;
  StartWorkflow(request: EmptyRequest): Promise<StartWorkflowResponse>;
  ResumeWorkflow(request: EmptyRequest): Promise<EmptyReturn>;
  PauseWorkflow(request: EmptyRequest): Promise<EmptyReturn>;
  WorkerStateUpdated(request: WorkerStateUpdatedRequest): Promise<EmptyReturn>;
  WorkerExecutionCompleted(request: EmptyRequest): Promise<EmptyReturn>;
  LinkWorkers(request: LinkWorkersRequest): Promise<EmptyReturn>;
  ControllerInitiateQueryStatistics(request: QueryStatisticsRequest): Promise<EmptyReturn>;
  RetryWorkflow(request: RetryWorkflowRequest): Promise<EmptyReturn>;
}

export const ControllerServiceServiceName = "edu.uci.ics.amber.engine.architecture.rpc.ControllerService";
export class ControllerServiceClientImpl implements ControllerService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ControllerServiceServiceName;
    this.rpc = rpc;
    this.RetrieveWorkflowState = this.RetrieveWorkflowState.bind(this);
    this.PropagateChannelMarker = this.PropagateChannelMarker.bind(this);
    this.TakeGlobalCheckpoint = this.TakeGlobalCheckpoint.bind(this);
    this.DebugCommand = this.DebugCommand.bind(this);
    this.EvaluatePythonExpression = this.EvaluatePythonExpression.bind(this);
    this.ConsoleMessageTriggered = this.ConsoleMessageTriggered.bind(this);
    this.PortCompleted = this.PortCompleted.bind(this);
    this.StartWorkflow = this.StartWorkflow.bind(this);
    this.ResumeWorkflow = this.ResumeWorkflow.bind(this);
    this.PauseWorkflow = this.PauseWorkflow.bind(this);
    this.WorkerStateUpdated = this.WorkerStateUpdated.bind(this);
    this.WorkerExecutionCompleted = this.WorkerExecutionCompleted.bind(this);
    this.LinkWorkers = this.LinkWorkers.bind(this);
    this.ControllerInitiateQueryStatistics = this.ControllerInitiateQueryStatistics.bind(this);
    this.RetryWorkflow = this.RetryWorkflow.bind(this);
  }
  RetrieveWorkflowState(request: EmptyRequest): Promise<RetrieveWorkflowStateResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RetrieveWorkflowState", data);
    return promise.then(data => RetrieveWorkflowStateResponse.decode(new BinaryReader(data)));
  }

  PropagateChannelMarker(request: PropagateChannelMarkerRequest): Promise<PropagateChannelMarkerResponse> {
    const data = PropagateChannelMarkerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PropagateChannelMarker", data);
    return promise.then(data => PropagateChannelMarkerResponse.decode(new BinaryReader(data)));
  }

  TakeGlobalCheckpoint(request: TakeGlobalCheckpointRequest): Promise<TakeGlobalCheckpointResponse> {
    const data = TakeGlobalCheckpointRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TakeGlobalCheckpoint", data);
    return promise.then(data => TakeGlobalCheckpointResponse.decode(new BinaryReader(data)));
  }

  DebugCommand(request: DebugCommandRequest): Promise<EmptyReturn> {
    const data = DebugCommandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DebugCommand", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  EvaluatePythonExpression(request: EvaluatePythonExpressionRequest): Promise<EvaluatePythonExpressionResponse> {
    const data = EvaluatePythonExpressionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EvaluatePythonExpression", data);
    return promise.then(data => EvaluatePythonExpressionResponse.decode(new BinaryReader(data)));
  }

  ConsoleMessageTriggered(request: ConsoleMessageTriggeredRequest): Promise<EmptyReturn> {
    const data = ConsoleMessageTriggeredRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConsoleMessageTriggered", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  PortCompleted(request: PortCompletedRequest): Promise<EmptyReturn> {
    const data = PortCompletedRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PortCompleted", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  StartWorkflow(request: EmptyRequest): Promise<StartWorkflowResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StartWorkflow", data);
    return promise.then(data => StartWorkflowResponse.decode(new BinaryReader(data)));
  }

  ResumeWorkflow(request: EmptyRequest): Promise<EmptyReturn> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ResumeWorkflow", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  PauseWorkflow(request: EmptyRequest): Promise<EmptyReturn> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PauseWorkflow", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  WorkerStateUpdated(request: WorkerStateUpdatedRequest): Promise<EmptyReturn> {
    const data = WorkerStateUpdatedRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "WorkerStateUpdated", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  WorkerExecutionCompleted(request: EmptyRequest): Promise<EmptyReturn> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "WorkerExecutionCompleted", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  LinkWorkers(request: LinkWorkersRequest): Promise<EmptyReturn> {
    const data = LinkWorkersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LinkWorkers", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  ControllerInitiateQueryStatistics(request: QueryStatisticsRequest): Promise<EmptyReturn> {
    const data = QueryStatisticsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ControllerInitiateQueryStatistics", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }

  RetryWorkflow(request: RetryWorkflowRequest): Promise<EmptyReturn> {
    const data = RetryWorkflowRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RetryWorkflow", data);
    return promise.then(data => EmptyReturn.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
