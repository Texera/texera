// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: edu/uci/ics/amber/engine/architecture/worker/statistics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PortIdentity } from "../../common/workflow";

export const protobufPackage = "edu.uci.ics.amber.engine.architecture.worker";

export enum WorkerState {
  UNINITIALIZED = 0,
  READY = 1,
  RUNNING = 2,
  PAUSED = 3,
  COMPLETED = 4,
  UNRECOGNIZED = -1,
}

export function workerStateFromJSON(object: any): WorkerState {
  switch (object) {
    case 0:
    case "UNINITIALIZED":
      return WorkerState.UNINITIALIZED;
    case 1:
    case "READY":
      return WorkerState.READY;
    case 2:
    case "RUNNING":
      return WorkerState.RUNNING;
    case 3:
    case "PAUSED":
      return WorkerState.PAUSED;
    case 4:
    case "COMPLETED":
      return WorkerState.COMPLETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkerState.UNRECOGNIZED;
  }
}

export function workerStateToJSON(object: WorkerState): string {
  switch (object) {
    case WorkerState.UNINITIALIZED:
      return "UNINITIALIZED";
    case WorkerState.READY:
      return "READY";
    case WorkerState.RUNNING:
      return "RUNNING";
    case WorkerState.PAUSED:
      return "PAUSED";
    case WorkerState.COMPLETED:
      return "COMPLETED";
    case WorkerState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PortTupleCountMapping {
  portId: PortIdentity | undefined;
  tupleCount: number;
}

export interface WorkerStatistics {
  inputTupleCount: PortTupleCountMapping[];
  outputTupleCount: PortTupleCountMapping[];
  dataProcessingTime: number;
  controlProcessingTime: number;
  idleTime: number;
}

export interface WorkerMetrics {
  workerState: WorkerState;
  workerStatistics: WorkerStatistics | undefined;
}

function createBasePortTupleCountMapping(): PortTupleCountMapping {
  return { portId: undefined, tupleCount: 0 };
}

export const PortTupleCountMapping: MessageFns<PortTupleCountMapping> = {
  encode(message: PortTupleCountMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.portId !== undefined) {
      PortIdentity.encode(message.portId, writer.uint32(10).fork()).join();
    }
    if (message.tupleCount !== 0) {
      writer.uint32(16).int64(message.tupleCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PortTupleCountMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortTupleCountMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.portId = PortIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tupleCount = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PortTupleCountMapping {
    return {
      portId: isSet(object.portId) ? PortIdentity.fromJSON(object.portId) : undefined,
      tupleCount: isSet(object.tupleCount) ? globalThis.Number(object.tupleCount) : 0,
    };
  },

  toJSON(message: PortTupleCountMapping): unknown {
    const obj: any = {};
    if (message.portId !== undefined) {
      obj.portId = PortIdentity.toJSON(message.portId);
    }
    if (message.tupleCount !== 0) {
      obj.tupleCount = Math.round(message.tupleCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PortTupleCountMapping>, I>>(base?: I): PortTupleCountMapping {
    return PortTupleCountMapping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PortTupleCountMapping>, I>>(object: I): PortTupleCountMapping {
    const message = createBasePortTupleCountMapping();
    message.portId =
      object.portId !== undefined && object.portId !== null ? PortIdentity.fromPartial(object.portId) : undefined;
    message.tupleCount = object.tupleCount ?? 0;
    return message;
  },
};

function createBaseWorkerStatistics(): WorkerStatistics {
  return { inputTupleCount: [], outputTupleCount: [], dataProcessingTime: 0, controlProcessingTime: 0, idleTime: 0 };
}

export const WorkerStatistics: MessageFns<WorkerStatistics> = {
  encode(message: WorkerStatistics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inputTupleCount) {
      PortTupleCountMapping.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.outputTupleCount) {
      PortTupleCountMapping.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.dataProcessingTime !== 0) {
      writer.uint32(24).int64(message.dataProcessingTime);
    }
    if (message.controlProcessingTime !== 0) {
      writer.uint32(32).int64(message.controlProcessingTime);
    }
    if (message.idleTime !== 0) {
      writer.uint32(40).int64(message.idleTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerStatistics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerStatistics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputTupleCount.push(PortTupleCountMapping.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputTupleCount.push(PortTupleCountMapping.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.dataProcessingTime = longToNumber(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.controlProcessingTime = longToNumber(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.idleTime = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerStatistics {
    return {
      inputTupleCount: globalThis.Array.isArray(object?.inputTupleCount)
        ? object.inputTupleCount.map((e: any) => PortTupleCountMapping.fromJSON(e))
        : [],
      outputTupleCount: globalThis.Array.isArray(object?.outputTupleCount)
        ? object.outputTupleCount.map((e: any) => PortTupleCountMapping.fromJSON(e))
        : [],
      dataProcessingTime: isSet(object.dataProcessingTime) ? globalThis.Number(object.dataProcessingTime) : 0,
      controlProcessingTime: isSet(object.controlProcessingTime) ? globalThis.Number(object.controlProcessingTime) : 0,
      idleTime: isSet(object.idleTime) ? globalThis.Number(object.idleTime) : 0,
    };
  },

  toJSON(message: WorkerStatistics): unknown {
    const obj: any = {};
    if (message.inputTupleCount?.length) {
      obj.inputTupleCount = message.inputTupleCount.map(e => PortTupleCountMapping.toJSON(e));
    }
    if (message.outputTupleCount?.length) {
      obj.outputTupleCount = message.outputTupleCount.map(e => PortTupleCountMapping.toJSON(e));
    }
    if (message.dataProcessingTime !== 0) {
      obj.dataProcessingTime = Math.round(message.dataProcessingTime);
    }
    if (message.controlProcessingTime !== 0) {
      obj.controlProcessingTime = Math.round(message.controlProcessingTime);
    }
    if (message.idleTime !== 0) {
      obj.idleTime = Math.round(message.idleTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerStatistics>, I>>(base?: I): WorkerStatistics {
    return WorkerStatistics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerStatistics>, I>>(object: I): WorkerStatistics {
    const message = createBaseWorkerStatistics();
    message.inputTupleCount = object.inputTupleCount?.map(e => PortTupleCountMapping.fromPartial(e)) || [];
    message.outputTupleCount = object.outputTupleCount?.map(e => PortTupleCountMapping.fromPartial(e)) || [];
    message.dataProcessingTime = object.dataProcessingTime ?? 0;
    message.controlProcessingTime = object.controlProcessingTime ?? 0;
    message.idleTime = object.idleTime ?? 0;
    return message;
  },
};

function createBaseWorkerMetrics(): WorkerMetrics {
  return { workerState: 0, workerStatistics: undefined };
}

export const WorkerMetrics: MessageFns<WorkerMetrics> = {
  encode(message: WorkerMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workerState !== 0) {
      writer.uint32(8).int32(message.workerState);
    }
    if (message.workerStatistics !== undefined) {
      WorkerStatistics.encode(message.workerStatistics, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.workerState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workerStatistics = WorkerStatistics.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerMetrics {
    return {
      workerState: isSet(object.workerState) ? workerStateFromJSON(object.workerState) : 0,
      workerStatistics: isSet(object.workerStatistics) ? WorkerStatistics.fromJSON(object.workerStatistics) : undefined,
    };
  },

  toJSON(message: WorkerMetrics): unknown {
    const obj: any = {};
    if (message.workerState !== 0) {
      obj.workerState = workerStateToJSON(message.workerState);
    }
    if (message.workerStatistics !== undefined) {
      obj.workerStatistics = WorkerStatistics.toJSON(message.workerStatistics);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerMetrics>, I>>(base?: I): WorkerMetrics {
    return WorkerMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerMetrics>, I>>(object: I): WorkerMetrics {
    const message = createBaseWorkerMetrics();
    message.workerState = object.workerState ?? 0;
    message.workerStatistics =
      object.workerStatistics !== undefined && object.workerStatistics !== null
        ? WorkerStatistics.fromPartial(object.workerStatistics)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
