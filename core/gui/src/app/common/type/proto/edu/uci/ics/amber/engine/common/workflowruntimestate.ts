// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: edu/uci/ics/amber/engine/common/workflowruntimestate.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp";
import { ConsoleMessage } from "../architecture/rpc/controlcommands";
import {
  EvaluatedValue,
  WorkflowAggregatedState,
  workflowAggregatedStateFromJSON,
  workflowAggregatedStateToJSON,
} from "../architecture/rpc/controlreturns";
import { PortTupleCountMapping } from "../architecture/worker/statistics";
import { ExecutionIdentity } from "./virtualidentity";

export const protobufPackage = "edu.uci.ics.amber.engine.common";

export enum FatalErrorType {
  COMPILATION_ERROR = 0,
  EXECUTION_FAILURE = 1,
  UNRECOGNIZED = -1,
}

export function fatalErrorTypeFromJSON(object: any): FatalErrorType {
  switch (object) {
    case 0:
    case "COMPILATION_ERROR":
      return FatalErrorType.COMPILATION_ERROR;
    case 1:
    case "EXECUTION_FAILURE":
      return FatalErrorType.EXECUTION_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FatalErrorType.UNRECOGNIZED;
  }
}

export function fatalErrorTypeToJSON(object: FatalErrorType): string {
  switch (object) {
    case FatalErrorType.COMPILATION_ERROR:
      return "COMPILATION_ERROR";
    case FatalErrorType.EXECUTION_FAILURE:
      return "EXECUTION_FAILURE";
    case FatalErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BreakpointFault {
  workerName: string;
  faultedTuple: BreakpointFault_BreakpointTuple | undefined;
}

export interface BreakpointFault_BreakpointTuple {
  id: number;
  isInput: boolean;
  tuple: string[];
}

export interface OperatorBreakpoints {
  unresolvedBreakpoints: BreakpointFault[];
}

export interface ExecutionBreakpointStore {
  operatorInfo: { [key: string]: OperatorBreakpoints };
}

export interface ExecutionBreakpointStore_OperatorInfoEntry {
  key: string;
  value: OperatorBreakpoints | undefined;
}

export interface EvaluatedValueList {
  values: EvaluatedValue[];
}

export interface OperatorConsole {
  consoleMessages: ConsoleMessage[];
  evaluateExprResults: { [key: string]: EvaluatedValueList };
}

export interface OperatorConsole_EvaluateExprResultsEntry {
  key: string;
  value: EvaluatedValueList | undefined;
}

export interface ExecutionConsoleStore {
  operatorConsole: { [key: string]: OperatorConsole };
}

export interface ExecutionConsoleStore_OperatorConsoleEntry {
  key: string;
  value: OperatorConsole | undefined;
}

export interface OperatorWorkerMapping {
  operatorId: string;
  workerIds: string[];
}

export interface OperatorStatistics {
  inputCount: PortTupleCountMapping[];
  outputCount: PortTupleCountMapping[];
  numWorkers: number;
  dataProcessingTime: number;
  controlProcessingTime: number;
  idleTime: number;
}

export interface OperatorMetrics {
  operatorState: WorkflowAggregatedState;
  operatorStatistics: OperatorStatistics | undefined;
}

export interface ExecutionStatsStore {
  startTimeStamp: number;
  endTimeStamp: number;
  operatorInfo: { [key: string]: OperatorMetrics };
  operatorWorkerMapping: OperatorWorkerMapping[];
}

export interface ExecutionStatsStore_OperatorInfoEntry {
  key: string;
  value: OperatorMetrics | undefined;
}

export interface WorkflowFatalError {
  type: FatalErrorType;
  timestamp: Date | undefined;
  message: string;
  details: string;
  operatorId: string;
  workerId: string;
}

export interface ExecutionMetadataStore {
  state: WorkflowAggregatedState;
  fatalErrors: WorkflowFatalError[];
  executionId: ExecutionIdentity | undefined;
  isRecovering: boolean;
}

function createBaseBreakpointFault(): BreakpointFault {
  return { workerName: "", faultedTuple: undefined };
}

export const BreakpointFault: MessageFns<BreakpointFault> = {
  encode(message: BreakpointFault, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workerName !== "") {
      writer.uint32(10).string(message.workerName);
    }
    if (message.faultedTuple !== undefined) {
      BreakpointFault_BreakpointTuple.encode(message.faultedTuple, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BreakpointFault {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBreakpointFault();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workerName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.faultedTuple = BreakpointFault_BreakpointTuple.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BreakpointFault {
    return {
      workerName: isSet(object.workerName) ? globalThis.String(object.workerName) : "",
      faultedTuple: isSet(object.faultedTuple)
        ? BreakpointFault_BreakpointTuple.fromJSON(object.faultedTuple)
        : undefined,
    };
  },

  toJSON(message: BreakpointFault): unknown {
    const obj: any = {};
    if (message.workerName !== "") {
      obj.workerName = message.workerName;
    }
    if (message.faultedTuple !== undefined) {
      obj.faultedTuple = BreakpointFault_BreakpointTuple.toJSON(message.faultedTuple);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BreakpointFault>, I>>(base?: I): BreakpointFault {
    return BreakpointFault.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BreakpointFault>, I>>(object: I): BreakpointFault {
    const message = createBaseBreakpointFault();
    message.workerName = object.workerName ?? "";
    message.faultedTuple = (object.faultedTuple !== undefined && object.faultedTuple !== null)
      ? BreakpointFault_BreakpointTuple.fromPartial(object.faultedTuple)
      : undefined;
    return message;
  },
};

function createBaseBreakpointFault_BreakpointTuple(): BreakpointFault_BreakpointTuple {
  return { id: 0, isInput: false, tuple: [] };
}

export const BreakpointFault_BreakpointTuple: MessageFns<BreakpointFault_BreakpointTuple> = {
  encode(message: BreakpointFault_BreakpointTuple, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.isInput !== false) {
      writer.uint32(16).bool(message.isInput);
    }
    for (const v of message.tuple) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BreakpointFault_BreakpointTuple {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBreakpointFault_BreakpointTuple();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isInput = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tuple.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BreakpointFault_BreakpointTuple {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      isInput: isSet(object.isInput) ? globalThis.Boolean(object.isInput) : false,
      tuple: globalThis.Array.isArray(object?.tuple) ? object.tuple.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: BreakpointFault_BreakpointTuple): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.isInput !== false) {
      obj.isInput = message.isInput;
    }
    if (message.tuple?.length) {
      obj.tuple = message.tuple;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BreakpointFault_BreakpointTuple>, I>>(base?: I): BreakpointFault_BreakpointTuple {
    return BreakpointFault_BreakpointTuple.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BreakpointFault_BreakpointTuple>, I>>(
    object: I,
  ): BreakpointFault_BreakpointTuple {
    const message = createBaseBreakpointFault_BreakpointTuple();
    message.id = object.id ?? 0;
    message.isInput = object.isInput ?? false;
    message.tuple = object.tuple?.map((e) => e) || [];
    return message;
  },
};

function createBaseOperatorBreakpoints(): OperatorBreakpoints {
  return { unresolvedBreakpoints: [] };
}

export const OperatorBreakpoints: MessageFns<OperatorBreakpoints> = {
  encode(message: OperatorBreakpoints, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unresolvedBreakpoints) {
      BreakpointFault.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorBreakpoints {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorBreakpoints();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.unresolvedBreakpoints.push(BreakpointFault.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorBreakpoints {
    return {
      unresolvedBreakpoints: globalThis.Array.isArray(object?.unresolvedBreakpoints)
        ? object.unresolvedBreakpoints.map((e: any) => BreakpointFault.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OperatorBreakpoints): unknown {
    const obj: any = {};
    if (message.unresolvedBreakpoints?.length) {
      obj.unresolvedBreakpoints = message.unresolvedBreakpoints.map((e) => BreakpointFault.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OperatorBreakpoints>, I>>(base?: I): OperatorBreakpoints {
    return OperatorBreakpoints.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OperatorBreakpoints>, I>>(object: I): OperatorBreakpoints {
    const message = createBaseOperatorBreakpoints();
    message.unresolvedBreakpoints = object.unresolvedBreakpoints?.map((e) => BreakpointFault.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExecutionBreakpointStore(): ExecutionBreakpointStore {
  return { operatorInfo: {} };
}

export const ExecutionBreakpointStore: MessageFns<ExecutionBreakpointStore> = {
  encode(message: ExecutionBreakpointStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.operatorInfo).forEach(([key, value]) => {
      ExecutionBreakpointStore_OperatorInfoEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionBreakpointStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionBreakpointStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = ExecutionBreakpointStore_OperatorInfoEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.operatorInfo[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionBreakpointStore {
    return {
      operatorInfo: isObject(object.operatorInfo)
        ? Object.entries(object.operatorInfo).reduce<{ [key: string]: OperatorBreakpoints }>((acc, [key, value]) => {
          acc[key] = OperatorBreakpoints.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ExecutionBreakpointStore): unknown {
    const obj: any = {};
    if (message.operatorInfo) {
      const entries = Object.entries(message.operatorInfo);
      if (entries.length > 0) {
        obj.operatorInfo = {};
        entries.forEach(([k, v]) => {
          obj.operatorInfo[k] = OperatorBreakpoints.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionBreakpointStore>, I>>(base?: I): ExecutionBreakpointStore {
    return ExecutionBreakpointStore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionBreakpointStore>, I>>(object: I): ExecutionBreakpointStore {
    const message = createBaseExecutionBreakpointStore();
    message.operatorInfo = Object.entries(object.operatorInfo ?? {}).reduce<{ [key: string]: OperatorBreakpoints }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = OperatorBreakpoints.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseExecutionBreakpointStore_OperatorInfoEntry(): ExecutionBreakpointStore_OperatorInfoEntry {
  return { key: "", value: undefined };
}

export const ExecutionBreakpointStore_OperatorInfoEntry: MessageFns<ExecutionBreakpointStore_OperatorInfoEntry> = {
  encode(message: ExecutionBreakpointStore_OperatorInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      OperatorBreakpoints.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionBreakpointStore_OperatorInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionBreakpointStore_OperatorInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = OperatorBreakpoints.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionBreakpointStore_OperatorInfoEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? OperatorBreakpoints.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ExecutionBreakpointStore_OperatorInfoEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = OperatorBreakpoints.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionBreakpointStore_OperatorInfoEntry>, I>>(
    base?: I,
  ): ExecutionBreakpointStore_OperatorInfoEntry {
    return ExecutionBreakpointStore_OperatorInfoEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionBreakpointStore_OperatorInfoEntry>, I>>(
    object: I,
  ): ExecutionBreakpointStore_OperatorInfoEntry {
    const message = createBaseExecutionBreakpointStore_OperatorInfoEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? OperatorBreakpoints.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseEvaluatedValueList(): EvaluatedValueList {
  return { values: [] };
}

export const EvaluatedValueList: MessageFns<EvaluatedValueList> = {
  encode(message: EvaluatedValueList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      EvaluatedValue.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluatedValueList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluatedValueList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(EvaluatedValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluatedValueList {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => EvaluatedValue.fromJSON(e)) : [],
    };
  },

  toJSON(message: EvaluatedValueList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => EvaluatedValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluatedValueList>, I>>(base?: I): EvaluatedValueList {
    return EvaluatedValueList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluatedValueList>, I>>(object: I): EvaluatedValueList {
    const message = createBaseEvaluatedValueList();
    message.values = object.values?.map((e) => EvaluatedValue.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOperatorConsole(): OperatorConsole {
  return { consoleMessages: [], evaluateExprResults: {} };
}

export const OperatorConsole: MessageFns<OperatorConsole> = {
  encode(message: OperatorConsole, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consoleMessages) {
      ConsoleMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    Object.entries(message.evaluateExprResults).forEach(([key, value]) => {
      OperatorConsole_EvaluateExprResultsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorConsole {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorConsole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consoleMessages.push(ConsoleMessage.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = OperatorConsole_EvaluateExprResultsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.evaluateExprResults[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorConsole {
    return {
      consoleMessages: globalThis.Array.isArray(object?.consoleMessages)
        ? object.consoleMessages.map((e: any) => ConsoleMessage.fromJSON(e))
        : [],
      evaluateExprResults: isObject(object.evaluateExprResults)
        ? Object.entries(object.evaluateExprResults).reduce<{ [key: string]: EvaluatedValueList }>(
          (acc, [key, value]) => {
            acc[key] = EvaluatedValueList.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: OperatorConsole): unknown {
    const obj: any = {};
    if (message.consoleMessages?.length) {
      obj.consoleMessages = message.consoleMessages.map((e) => ConsoleMessage.toJSON(e));
    }
    if (message.evaluateExprResults) {
      const entries = Object.entries(message.evaluateExprResults);
      if (entries.length > 0) {
        obj.evaluateExprResults = {};
        entries.forEach(([k, v]) => {
          obj.evaluateExprResults[k] = EvaluatedValueList.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OperatorConsole>, I>>(base?: I): OperatorConsole {
    return OperatorConsole.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OperatorConsole>, I>>(object: I): OperatorConsole {
    const message = createBaseOperatorConsole();
    message.consoleMessages = object.consoleMessages?.map((e) => ConsoleMessage.fromPartial(e)) || [];
    message.evaluateExprResults = Object.entries(object.evaluateExprResults ?? {}).reduce<
      { [key: string]: EvaluatedValueList }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = EvaluatedValueList.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseOperatorConsole_EvaluateExprResultsEntry(): OperatorConsole_EvaluateExprResultsEntry {
  return { key: "", value: undefined };
}

export const OperatorConsole_EvaluateExprResultsEntry: MessageFns<OperatorConsole_EvaluateExprResultsEntry> = {
  encode(message: OperatorConsole_EvaluateExprResultsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      EvaluatedValueList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorConsole_EvaluateExprResultsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorConsole_EvaluateExprResultsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = EvaluatedValueList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorConsole_EvaluateExprResultsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? EvaluatedValueList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: OperatorConsole_EvaluateExprResultsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = EvaluatedValueList.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OperatorConsole_EvaluateExprResultsEntry>, I>>(
    base?: I,
  ): OperatorConsole_EvaluateExprResultsEntry {
    return OperatorConsole_EvaluateExprResultsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OperatorConsole_EvaluateExprResultsEntry>, I>>(
    object: I,
  ): OperatorConsole_EvaluateExprResultsEntry {
    const message = createBaseOperatorConsole_EvaluateExprResultsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? EvaluatedValueList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseExecutionConsoleStore(): ExecutionConsoleStore {
  return { operatorConsole: {} };
}

export const ExecutionConsoleStore: MessageFns<ExecutionConsoleStore> = {
  encode(message: ExecutionConsoleStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.operatorConsole).forEach(([key, value]) => {
      ExecutionConsoleStore_OperatorConsoleEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionConsoleStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionConsoleStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = ExecutionConsoleStore_OperatorConsoleEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.operatorConsole[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionConsoleStore {
    return {
      operatorConsole: isObject(object.operatorConsole)
        ? Object.entries(object.operatorConsole).reduce<{ [key: string]: OperatorConsole }>((acc, [key, value]) => {
          acc[key] = OperatorConsole.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ExecutionConsoleStore): unknown {
    const obj: any = {};
    if (message.operatorConsole) {
      const entries = Object.entries(message.operatorConsole);
      if (entries.length > 0) {
        obj.operatorConsole = {};
        entries.forEach(([k, v]) => {
          obj.operatorConsole[k] = OperatorConsole.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionConsoleStore>, I>>(base?: I): ExecutionConsoleStore {
    return ExecutionConsoleStore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionConsoleStore>, I>>(object: I): ExecutionConsoleStore {
    const message = createBaseExecutionConsoleStore();
    message.operatorConsole = Object.entries(object.operatorConsole ?? {}).reduce<{ [key: string]: OperatorConsole }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = OperatorConsole.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseExecutionConsoleStore_OperatorConsoleEntry(): ExecutionConsoleStore_OperatorConsoleEntry {
  return { key: "", value: undefined };
}

export const ExecutionConsoleStore_OperatorConsoleEntry: MessageFns<ExecutionConsoleStore_OperatorConsoleEntry> = {
  encode(message: ExecutionConsoleStore_OperatorConsoleEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      OperatorConsole.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionConsoleStore_OperatorConsoleEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionConsoleStore_OperatorConsoleEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = OperatorConsole.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionConsoleStore_OperatorConsoleEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? OperatorConsole.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ExecutionConsoleStore_OperatorConsoleEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = OperatorConsole.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionConsoleStore_OperatorConsoleEntry>, I>>(
    base?: I,
  ): ExecutionConsoleStore_OperatorConsoleEntry {
    return ExecutionConsoleStore_OperatorConsoleEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionConsoleStore_OperatorConsoleEntry>, I>>(
    object: I,
  ): ExecutionConsoleStore_OperatorConsoleEntry {
    const message = createBaseExecutionConsoleStore_OperatorConsoleEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? OperatorConsole.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseOperatorWorkerMapping(): OperatorWorkerMapping {
  return { operatorId: "", workerIds: [] };
}

export const OperatorWorkerMapping: MessageFns<OperatorWorkerMapping> = {
  encode(message: OperatorWorkerMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== "") {
      writer.uint32(10).string(message.operatorId);
    }
    for (const v of message.workerIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorWorkerMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorWorkerMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operatorId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workerIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorWorkerMapping {
    return {
      operatorId: isSet(object.operatorId) ? globalThis.String(object.operatorId) : "",
      workerIds: globalThis.Array.isArray(object?.workerIds)
        ? object.workerIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: OperatorWorkerMapping): unknown {
    const obj: any = {};
    if (message.operatorId !== "") {
      obj.operatorId = message.operatorId;
    }
    if (message.workerIds?.length) {
      obj.workerIds = message.workerIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OperatorWorkerMapping>, I>>(base?: I): OperatorWorkerMapping {
    return OperatorWorkerMapping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OperatorWorkerMapping>, I>>(object: I): OperatorWorkerMapping {
    const message = createBaseOperatorWorkerMapping();
    message.operatorId = object.operatorId ?? "";
    message.workerIds = object.workerIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseOperatorStatistics(): OperatorStatistics {
  return {
    inputCount: [],
    outputCount: [],
    numWorkers: 0,
    dataProcessingTime: 0,
    controlProcessingTime: 0,
    idleTime: 0,
  };
}

export const OperatorStatistics: MessageFns<OperatorStatistics> = {
  encode(message: OperatorStatistics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inputCount) {
      PortTupleCountMapping.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.outputCount) {
      PortTupleCountMapping.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.numWorkers !== 0) {
      writer.uint32(24).int32(message.numWorkers);
    }
    if (message.dataProcessingTime !== 0) {
      writer.uint32(32).int64(message.dataProcessingTime);
    }
    if (message.controlProcessingTime !== 0) {
      writer.uint32(40).int64(message.controlProcessingTime);
    }
    if (message.idleTime !== 0) {
      writer.uint32(48).int64(message.idleTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorStatistics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorStatistics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputCount.push(PortTupleCountMapping.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputCount.push(PortTupleCountMapping.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.numWorkers = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.dataProcessingTime = longToNumber(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.controlProcessingTime = longToNumber(reader.int64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.idleTime = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorStatistics {
    return {
      inputCount: globalThis.Array.isArray(object?.inputCount)
        ? object.inputCount.map((e: any) => PortTupleCountMapping.fromJSON(e))
        : [],
      outputCount: globalThis.Array.isArray(object?.outputCount)
        ? object.outputCount.map((e: any) => PortTupleCountMapping.fromJSON(e))
        : [],
      numWorkers: isSet(object.numWorkers) ? globalThis.Number(object.numWorkers) : 0,
      dataProcessingTime: isSet(object.dataProcessingTime) ? globalThis.Number(object.dataProcessingTime) : 0,
      controlProcessingTime: isSet(object.controlProcessingTime) ? globalThis.Number(object.controlProcessingTime) : 0,
      idleTime: isSet(object.idleTime) ? globalThis.Number(object.idleTime) : 0,
    };
  },

  toJSON(message: OperatorStatistics): unknown {
    const obj: any = {};
    if (message.inputCount?.length) {
      obj.inputCount = message.inputCount.map((e) => PortTupleCountMapping.toJSON(e));
    }
    if (message.outputCount?.length) {
      obj.outputCount = message.outputCount.map((e) => PortTupleCountMapping.toJSON(e));
    }
    if (message.numWorkers !== 0) {
      obj.numWorkers = Math.round(message.numWorkers);
    }
    if (message.dataProcessingTime !== 0) {
      obj.dataProcessingTime = Math.round(message.dataProcessingTime);
    }
    if (message.controlProcessingTime !== 0) {
      obj.controlProcessingTime = Math.round(message.controlProcessingTime);
    }
    if (message.idleTime !== 0) {
      obj.idleTime = Math.round(message.idleTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OperatorStatistics>, I>>(base?: I): OperatorStatistics {
    return OperatorStatistics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OperatorStatistics>, I>>(object: I): OperatorStatistics {
    const message = createBaseOperatorStatistics();
    message.inputCount = object.inputCount?.map((e) => PortTupleCountMapping.fromPartial(e)) || [];
    message.outputCount = object.outputCount?.map((e) => PortTupleCountMapping.fromPartial(e)) || [];
    message.numWorkers = object.numWorkers ?? 0;
    message.dataProcessingTime = object.dataProcessingTime ?? 0;
    message.controlProcessingTime = object.controlProcessingTime ?? 0;
    message.idleTime = object.idleTime ?? 0;
    return message;
  },
};

function createBaseOperatorMetrics(): OperatorMetrics {
  return { operatorState: 0, operatorStatistics: undefined };
}

export const OperatorMetrics: MessageFns<OperatorMetrics> = {
  encode(message: OperatorMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorState !== 0) {
      writer.uint32(8).int32(message.operatorState);
    }
    if (message.operatorStatistics !== undefined) {
      OperatorStatistics.encode(message.operatorStatistics, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.operatorState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorStatistics = OperatorStatistics.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorMetrics {
    return {
      operatorState: isSet(object.operatorState) ? workflowAggregatedStateFromJSON(object.operatorState) : 0,
      operatorStatistics: isSet(object.operatorStatistics)
        ? OperatorStatistics.fromJSON(object.operatorStatistics)
        : undefined,
    };
  },

  toJSON(message: OperatorMetrics): unknown {
    const obj: any = {};
    if (message.operatorState !== 0) {
      obj.operatorState = workflowAggregatedStateToJSON(message.operatorState);
    }
    if (message.operatorStatistics !== undefined) {
      obj.operatorStatistics = OperatorStatistics.toJSON(message.operatorStatistics);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OperatorMetrics>, I>>(base?: I): OperatorMetrics {
    return OperatorMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OperatorMetrics>, I>>(object: I): OperatorMetrics {
    const message = createBaseOperatorMetrics();
    message.operatorState = object.operatorState ?? 0;
    message.operatorStatistics = (object.operatorStatistics !== undefined && object.operatorStatistics !== null)
      ? OperatorStatistics.fromPartial(object.operatorStatistics)
      : undefined;
    return message;
  },
};

function createBaseExecutionStatsStore(): ExecutionStatsStore {
  return { startTimeStamp: 0, endTimeStamp: 0, operatorInfo: {}, operatorWorkerMapping: [] };
}

export const ExecutionStatsStore: MessageFns<ExecutionStatsStore> = {
  encode(message: ExecutionStatsStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTimeStamp !== 0) {
      writer.uint32(8).int64(message.startTimeStamp);
    }
    if (message.endTimeStamp !== 0) {
      writer.uint32(16).int64(message.endTimeStamp);
    }
    Object.entries(message.operatorInfo).forEach(([key, value]) => {
      ExecutionStatsStore_OperatorInfoEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    for (const v of message.operatorWorkerMapping) {
      OperatorWorkerMapping.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionStatsStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionStatsStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startTimeStamp = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.endTimeStamp = longToNumber(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ExecutionStatsStore_OperatorInfoEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.operatorInfo[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.operatorWorkerMapping.push(OperatorWorkerMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionStatsStore {
    return {
      startTimeStamp: isSet(object.startTimeStamp) ? globalThis.Number(object.startTimeStamp) : 0,
      endTimeStamp: isSet(object.endTimeStamp) ? globalThis.Number(object.endTimeStamp) : 0,
      operatorInfo: isObject(object.operatorInfo)
        ? Object.entries(object.operatorInfo).reduce<{ [key: string]: OperatorMetrics }>((acc, [key, value]) => {
          acc[key] = OperatorMetrics.fromJSON(value);
          return acc;
        }, {})
        : {},
      operatorWorkerMapping: globalThis.Array.isArray(object?.operatorWorkerMapping)
        ? object.operatorWorkerMapping.map((e: any) => OperatorWorkerMapping.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExecutionStatsStore): unknown {
    const obj: any = {};
    if (message.startTimeStamp !== 0) {
      obj.startTimeStamp = Math.round(message.startTimeStamp);
    }
    if (message.endTimeStamp !== 0) {
      obj.endTimeStamp = Math.round(message.endTimeStamp);
    }
    if (message.operatorInfo) {
      const entries = Object.entries(message.operatorInfo);
      if (entries.length > 0) {
        obj.operatorInfo = {};
        entries.forEach(([k, v]) => {
          obj.operatorInfo[k] = OperatorMetrics.toJSON(v);
        });
      }
    }
    if (message.operatorWorkerMapping?.length) {
      obj.operatorWorkerMapping = message.operatorWorkerMapping.map((e) => OperatorWorkerMapping.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionStatsStore>, I>>(base?: I): ExecutionStatsStore {
    return ExecutionStatsStore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionStatsStore>, I>>(object: I): ExecutionStatsStore {
    const message = createBaseExecutionStatsStore();
    message.startTimeStamp = object.startTimeStamp ?? 0;
    message.endTimeStamp = object.endTimeStamp ?? 0;
    message.operatorInfo = Object.entries(object.operatorInfo ?? {}).reduce<{ [key: string]: OperatorMetrics }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = OperatorMetrics.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.operatorWorkerMapping = object.operatorWorkerMapping?.map((e) => OperatorWorkerMapping.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseExecutionStatsStore_OperatorInfoEntry(): ExecutionStatsStore_OperatorInfoEntry {
  return { key: "", value: undefined };
}

export const ExecutionStatsStore_OperatorInfoEntry: MessageFns<ExecutionStatsStore_OperatorInfoEntry> = {
  encode(message: ExecutionStatsStore_OperatorInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      OperatorMetrics.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionStatsStore_OperatorInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionStatsStore_OperatorInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = OperatorMetrics.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionStatsStore_OperatorInfoEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? OperatorMetrics.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ExecutionStatsStore_OperatorInfoEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = OperatorMetrics.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionStatsStore_OperatorInfoEntry>, I>>(
    base?: I,
  ): ExecutionStatsStore_OperatorInfoEntry {
    return ExecutionStatsStore_OperatorInfoEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionStatsStore_OperatorInfoEntry>, I>>(
    object: I,
  ): ExecutionStatsStore_OperatorInfoEntry {
    const message = createBaseExecutionStatsStore_OperatorInfoEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? OperatorMetrics.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWorkflowFatalError(): WorkflowFatalError {
  return { type: 0, timestamp: undefined, message: "", details: "", operatorId: "", workerId: "" };
}

export const WorkflowFatalError: MessageFns<WorkflowFatalError> = {
  encode(message: WorkflowFatalError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.details !== "") {
      writer.uint32(34).string(message.details);
    }
    if (message.operatorId !== "") {
      writer.uint32(42).string(message.operatorId);
    }
    if (message.workerId !== "") {
      writer.uint32(50).string(message.workerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkflowFatalError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflowFatalError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.details = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.operatorId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.workerId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkflowFatalError {
    return {
      type: isSet(object.type) ? fatalErrorTypeFromJSON(object.type) : 0,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      operatorId: isSet(object.operatorId) ? globalThis.String(object.operatorId) : "",
      workerId: isSet(object.workerId) ? globalThis.String(object.workerId) : "",
    };
  },

  toJSON(message: WorkflowFatalError): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = fatalErrorTypeToJSON(message.type);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.operatorId !== "") {
      obj.operatorId = message.operatorId;
    }
    if (message.workerId !== "") {
      obj.workerId = message.workerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkflowFatalError>, I>>(base?: I): WorkflowFatalError {
    return WorkflowFatalError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkflowFatalError>, I>>(object: I): WorkflowFatalError {
    const message = createBaseWorkflowFatalError();
    message.type = object.type ?? 0;
    message.timestamp = object.timestamp ?? undefined;
    message.message = object.message ?? "";
    message.details = object.details ?? "";
    message.operatorId = object.operatorId ?? "";
    message.workerId = object.workerId ?? "";
    return message;
  },
};

function createBaseExecutionMetadataStore(): ExecutionMetadataStore {
  return { state: 0, fatalErrors: [], executionId: undefined, isRecovering: false };
}

export const ExecutionMetadataStore: MessageFns<ExecutionMetadataStore> = {
  encode(message: ExecutionMetadataStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    for (const v of message.fatalErrors) {
      WorkflowFatalError.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.executionId !== undefined) {
      ExecutionIdentity.encode(message.executionId, writer.uint32(26).fork()).join();
    }
    if (message.isRecovering !== false) {
      writer.uint32(32).bool(message.isRecovering);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionMetadataStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionMetadataStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fatalErrors.push(WorkflowFatalError.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.executionId = ExecutionIdentity.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isRecovering = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionMetadataStore {
    return {
      state: isSet(object.state) ? workflowAggregatedStateFromJSON(object.state) : 0,
      fatalErrors: globalThis.Array.isArray(object?.fatalErrors)
        ? object.fatalErrors.map((e: any) => WorkflowFatalError.fromJSON(e))
        : [],
      executionId: isSet(object.executionId) ? ExecutionIdentity.fromJSON(object.executionId) : undefined,
      isRecovering: isSet(object.isRecovering) ? globalThis.Boolean(object.isRecovering) : false,
    };
  },

  toJSON(message: ExecutionMetadataStore): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = workflowAggregatedStateToJSON(message.state);
    }
    if (message.fatalErrors?.length) {
      obj.fatalErrors = message.fatalErrors.map((e) => WorkflowFatalError.toJSON(e));
    }
    if (message.executionId !== undefined) {
      obj.executionId = ExecutionIdentity.toJSON(message.executionId);
    }
    if (message.isRecovering !== false) {
      obj.isRecovering = message.isRecovering;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionMetadataStore>, I>>(base?: I): ExecutionMetadataStore {
    return ExecutionMetadataStore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionMetadataStore>, I>>(object: I): ExecutionMetadataStore {
    const message = createBaseExecutionMetadataStore();
    message.state = object.state ?? 0;
    message.fatalErrors = object.fatalErrors?.map((e) => WorkflowFatalError.fromPartial(e)) || [];
    message.executionId = (object.executionId !== undefined && object.executionId !== null)
      ? ExecutionIdentity.fromPartial(object.executionId)
      : undefined;
    message.isRecovering = object.isRecovering ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
