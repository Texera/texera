// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.29.3
// source: edu/uci/ics/amber/engine/architecture/worker/tableprofile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "edu.uci.ics.amber.engine.architecture.worker";

export interface NumericMatrix {
  /** length = rows * cols (row-major) */
  values: number[];
  rows: number;
  cols: number;
}

export interface GlobalProfile {
  /** ---- basic counts ---- */
  samplesUsed: number;
  columnCount: number;
  rowCount: number;
  /** ---- row null / uniqueness ---- */
  rowHasNullRatio: number;
  rowIsNullRatio: number;
  uniqueRowRatio: number;
  duplicateRowCount: number;
  /** ---- metadata ---- */
  fileType: string;
  /** e.g. “utf-8” */
  encoding: string;
  /** ---- pairwise stats ---- */
  correlationMatrix: NumericMatrix | undefined;
  chi2Matrix:
    | NumericMatrix
    | undefined;
  /** ---- schema map: column-name -> indices (to mirror DataProfiler) --- */
  profileSchema: { [key: string]: ColumnIndexList };
  times: GlobalProfile_Times | undefined;
}

export interface GlobalProfile_ProfileSchemaEntry {
  key: string;
  value: ColumnIndexList | undefined;
}

/** ---- timing ---- */
export interface GlobalProfile_Times {
  rowStatsMs: number;
}

/** helper for profile_schema */
export interface ColumnIndexList {
  indices: number[];
}

export interface ColumnStatistics {
  /** ---- numeric summaries (nullable when not applicable) ---- */
  min: number;
  max: number;
  median: number;
  mean: number;
  variance: number;
  stddev: number;
  skewness: number;
  kurtosis: number;
  sum: number;
  /** ---- distribution ---- */
  quantiles: number[];
  numZeros: number;
  numNegatives: number;
  /** ---- uniqueness / cardinality ---- */
  uniqueCount: number;
  uniqueRatio: number;
  /** ---- categorical helpers ---- */
  categorical: boolean;
  categoricalCount: { [key: string]: number };
  /** ---- nulls ---- */
  nullCount: number;
  nullTypes: string[];
  /** ---- data-type representation share (DataProfiler style) ---- */
  dataTypeRepresentation: { [key: string]: number };
}

export interface ColumnStatistics_CategoricalCountEntry {
  key: string;
  value: number;
}

export interface ColumnStatistics_DataTypeRepresentationEntry {
  key: string;
  value: number;
}

export interface ColumnProfile {
  /** identity */
  columnName: string;
  /** “string”, “int”, “float”, … */
  dataType: string;
  dataLabel: string;
  /** quick hints */
  categorical: boolean;
  /** “random”, “ascending”, “constant value” */
  order: string;
  /** examples */
  samples: string[];
  /** heavy stats */
  statistics: ColumnStatistics | undefined;
}

export interface TableProfile {
  globalProfile: GlobalProfile | undefined;
  columnProfiles: ColumnProfile[];
}

function createBaseNumericMatrix(): NumericMatrix {
  return { values: [], rows: 0, cols: 0 };
}

export const NumericMatrix: MessageFns<NumericMatrix> = {
  encode(message: NumericMatrix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.double(v);
    }
    writer.join();
    if (message.rows !== 0) {
      writer.uint32(16).uint32(message.rows);
    }
    if (message.cols !== 0) {
      writer.uint32(24).uint32(message.cols);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NumericMatrix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNumericMatrix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 9) {
            message.values.push(reader.double());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.double());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rows = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.cols = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NumericMatrix {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.Number(e)) : [],
      rows: isSet(object.rows) ? globalThis.Number(object.rows) : 0,
      cols: isSet(object.cols) ? globalThis.Number(object.cols) : 0,
    };
  },

  toJSON(message: NumericMatrix): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    if (message.rows !== 0) {
      obj.rows = Math.round(message.rows);
    }
    if (message.cols !== 0) {
      obj.cols = Math.round(message.cols);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NumericMatrix>, I>>(base?: I): NumericMatrix {
    return NumericMatrix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NumericMatrix>, I>>(object: I): NumericMatrix {
    const message = createBaseNumericMatrix();
    message.values = object.values?.map((e) => e) || [];
    message.rows = object.rows ?? 0;
    message.cols = object.cols ?? 0;
    return message;
  },
};

function createBaseGlobalProfile(): GlobalProfile {
  return {
    samplesUsed: 0,
    columnCount: 0,
    rowCount: 0,
    rowHasNullRatio: 0,
    rowIsNullRatio: 0,
    uniqueRowRatio: 0,
    duplicateRowCount: 0,
    fileType: "",
    encoding: "",
    correlationMatrix: undefined,
    chi2Matrix: undefined,
    profileSchema: {},
    times: undefined,
  };
}

export const GlobalProfile: MessageFns<GlobalProfile> = {
  encode(message: GlobalProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.samplesUsed !== 0) {
      writer.uint32(8).uint64(message.samplesUsed);
    }
    if (message.columnCount !== 0) {
      writer.uint32(16).uint64(message.columnCount);
    }
    if (message.rowCount !== 0) {
      writer.uint32(24).uint64(message.rowCount);
    }
    if (message.rowHasNullRatio !== 0) {
      writer.uint32(33).double(message.rowHasNullRatio);
    }
    if (message.rowIsNullRatio !== 0) {
      writer.uint32(41).double(message.rowIsNullRatio);
    }
    if (message.uniqueRowRatio !== 0) {
      writer.uint32(49).double(message.uniqueRowRatio);
    }
    if (message.duplicateRowCount !== 0) {
      writer.uint32(56).uint64(message.duplicateRowCount);
    }
    if (message.fileType !== "") {
      writer.uint32(66).string(message.fileType);
    }
    if (message.encoding !== "") {
      writer.uint32(74).string(message.encoding);
    }
    if (message.correlationMatrix !== undefined) {
      NumericMatrix.encode(message.correlationMatrix, writer.uint32(82).fork()).join();
    }
    if (message.chi2Matrix !== undefined) {
      NumericMatrix.encode(message.chi2Matrix, writer.uint32(90).fork()).join();
    }
    Object.entries(message.profileSchema).forEach(([key, value]) => {
      GlobalProfile_ProfileSchemaEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    if (message.times !== undefined) {
      GlobalProfile_Times.encode(message.times, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.samplesUsed = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.columnCount = longToNumber(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.rowCount = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.rowHasNullRatio = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.rowIsNullRatio = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.uniqueRowRatio = reader.double();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.duplicateRowCount = longToNumber(reader.uint64());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fileType = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.encoding = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.correlationMatrix = NumericMatrix.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.chi2Matrix = NumericMatrix.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = GlobalProfile_ProfileSchemaEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.profileSchema[entry12.key] = entry12.value;
          }
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.times = GlobalProfile_Times.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalProfile {
    return {
      samplesUsed: isSet(object.samplesUsed) ? globalThis.Number(object.samplesUsed) : 0,
      columnCount: isSet(object.columnCount) ? globalThis.Number(object.columnCount) : 0,
      rowCount: isSet(object.rowCount) ? globalThis.Number(object.rowCount) : 0,
      rowHasNullRatio: isSet(object.rowHasNullRatio) ? globalThis.Number(object.rowHasNullRatio) : 0,
      rowIsNullRatio: isSet(object.rowIsNullRatio) ? globalThis.Number(object.rowIsNullRatio) : 0,
      uniqueRowRatio: isSet(object.uniqueRowRatio) ? globalThis.Number(object.uniqueRowRatio) : 0,
      duplicateRowCount: isSet(object.duplicateRowCount) ? globalThis.Number(object.duplicateRowCount) : 0,
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
      encoding: isSet(object.encoding) ? globalThis.String(object.encoding) : "",
      correlationMatrix: isSet(object.correlationMatrix) ? NumericMatrix.fromJSON(object.correlationMatrix) : undefined,
      chi2Matrix: isSet(object.chi2Matrix) ? NumericMatrix.fromJSON(object.chi2Matrix) : undefined,
      profileSchema: isObject(object.profileSchema)
        ? Object.entries(object.profileSchema).reduce<{ [key: string]: ColumnIndexList }>((acc, [key, value]) => {
          acc[key] = ColumnIndexList.fromJSON(value);
          return acc;
        }, {})
        : {},
      times: isSet(object.times) ? GlobalProfile_Times.fromJSON(object.times) : undefined,
    };
  },

  toJSON(message: GlobalProfile): unknown {
    const obj: any = {};
    if (message.samplesUsed !== 0) {
      obj.samplesUsed = Math.round(message.samplesUsed);
    }
    if (message.columnCount !== 0) {
      obj.columnCount = Math.round(message.columnCount);
    }
    if (message.rowCount !== 0) {
      obj.rowCount = Math.round(message.rowCount);
    }
    if (message.rowHasNullRatio !== 0) {
      obj.rowHasNullRatio = message.rowHasNullRatio;
    }
    if (message.rowIsNullRatio !== 0) {
      obj.rowIsNullRatio = message.rowIsNullRatio;
    }
    if (message.uniqueRowRatio !== 0) {
      obj.uniqueRowRatio = message.uniqueRowRatio;
    }
    if (message.duplicateRowCount !== 0) {
      obj.duplicateRowCount = Math.round(message.duplicateRowCount);
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    if (message.encoding !== "") {
      obj.encoding = message.encoding;
    }
    if (message.correlationMatrix !== undefined) {
      obj.correlationMatrix = NumericMatrix.toJSON(message.correlationMatrix);
    }
    if (message.chi2Matrix !== undefined) {
      obj.chi2Matrix = NumericMatrix.toJSON(message.chi2Matrix);
    }
    if (message.profileSchema) {
      const entries = Object.entries(message.profileSchema);
      if (entries.length > 0) {
        obj.profileSchema = {};
        entries.forEach(([k, v]) => {
          obj.profileSchema[k] = ColumnIndexList.toJSON(v);
        });
      }
    }
    if (message.times !== undefined) {
      obj.times = GlobalProfile_Times.toJSON(message.times);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalProfile>, I>>(base?: I): GlobalProfile {
    return GlobalProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalProfile>, I>>(object: I): GlobalProfile {
    const message = createBaseGlobalProfile();
    message.samplesUsed = object.samplesUsed ?? 0;
    message.columnCount = object.columnCount ?? 0;
    message.rowCount = object.rowCount ?? 0;
    message.rowHasNullRatio = object.rowHasNullRatio ?? 0;
    message.rowIsNullRatio = object.rowIsNullRatio ?? 0;
    message.uniqueRowRatio = object.uniqueRowRatio ?? 0;
    message.duplicateRowCount = object.duplicateRowCount ?? 0;
    message.fileType = object.fileType ?? "";
    message.encoding = object.encoding ?? "";
    message.correlationMatrix = (object.correlationMatrix !== undefined && object.correlationMatrix !== null)
      ? NumericMatrix.fromPartial(object.correlationMatrix)
      : undefined;
    message.chi2Matrix = (object.chi2Matrix !== undefined && object.chi2Matrix !== null)
      ? NumericMatrix.fromPartial(object.chi2Matrix)
      : undefined;
    message.profileSchema = Object.entries(object.profileSchema ?? {}).reduce<{ [key: string]: ColumnIndexList }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ColumnIndexList.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.times = (object.times !== undefined && object.times !== null)
      ? GlobalProfile_Times.fromPartial(object.times)
      : undefined;
    return message;
  },
};

function createBaseGlobalProfile_ProfileSchemaEntry(): GlobalProfile_ProfileSchemaEntry {
  return { key: "", value: undefined };
}

export const GlobalProfile_ProfileSchemaEntry: MessageFns<GlobalProfile_ProfileSchemaEntry> = {
  encode(message: GlobalProfile_ProfileSchemaEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ColumnIndexList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalProfile_ProfileSchemaEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalProfile_ProfileSchemaEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ColumnIndexList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalProfile_ProfileSchemaEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ColumnIndexList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GlobalProfile_ProfileSchemaEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ColumnIndexList.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalProfile_ProfileSchemaEntry>, I>>(
    base?: I,
  ): GlobalProfile_ProfileSchemaEntry {
    return GlobalProfile_ProfileSchemaEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalProfile_ProfileSchemaEntry>, I>>(
    object: I,
  ): GlobalProfile_ProfileSchemaEntry {
    const message = createBaseGlobalProfile_ProfileSchemaEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ColumnIndexList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseGlobalProfile_Times(): GlobalProfile_Times {
  return { rowStatsMs: 0 };
}

export const GlobalProfile_Times: MessageFns<GlobalProfile_Times> = {
  encode(message: GlobalProfile_Times, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rowStatsMs !== 0) {
      writer.uint32(9).double(message.rowStatsMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalProfile_Times {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalProfile_Times();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.rowStatsMs = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalProfile_Times {
    return { rowStatsMs: isSet(object.rowStatsMs) ? globalThis.Number(object.rowStatsMs) : 0 };
  },

  toJSON(message: GlobalProfile_Times): unknown {
    const obj: any = {};
    if (message.rowStatsMs !== 0) {
      obj.rowStatsMs = message.rowStatsMs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalProfile_Times>, I>>(base?: I): GlobalProfile_Times {
    return GlobalProfile_Times.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalProfile_Times>, I>>(object: I): GlobalProfile_Times {
    const message = createBaseGlobalProfile_Times();
    message.rowStatsMs = object.rowStatsMs ?? 0;
    return message;
  },
};

function createBaseColumnIndexList(): ColumnIndexList {
  return { indices: [] };
}

export const ColumnIndexList: MessageFns<ColumnIndexList> = {
  encode(message: ColumnIndexList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.indices) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnIndexList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnIndexList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.indices.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.indices.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnIndexList {
    return {
      indices: globalThis.Array.isArray(object?.indices) ? object.indices.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ColumnIndexList): unknown {
    const obj: any = {};
    if (message.indices?.length) {
      obj.indices = message.indices.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ColumnIndexList>, I>>(base?: I): ColumnIndexList {
    return ColumnIndexList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ColumnIndexList>, I>>(object: I): ColumnIndexList {
    const message = createBaseColumnIndexList();
    message.indices = object.indices?.map((e) => e) || [];
    return message;
  },
};

function createBaseColumnStatistics(): ColumnStatistics {
  return {
    min: 0,
    max: 0,
    median: 0,
    mean: 0,
    variance: 0,
    stddev: 0,
    skewness: 0,
    kurtosis: 0,
    sum: 0,
    quantiles: [],
    numZeros: 0,
    numNegatives: 0,
    uniqueCount: 0,
    uniqueRatio: 0,
    categorical: false,
    categoricalCount: {},
    nullCount: 0,
    nullTypes: [],
    dataTypeRepresentation: {},
  };
}

export const ColumnStatistics: MessageFns<ColumnStatistics> = {
  encode(message: ColumnStatistics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.min !== 0) {
      writer.uint32(9).double(message.min);
    }
    if (message.max !== 0) {
      writer.uint32(17).double(message.max);
    }
    if (message.median !== 0) {
      writer.uint32(25).double(message.median);
    }
    if (message.mean !== 0) {
      writer.uint32(33).double(message.mean);
    }
    if (message.variance !== 0) {
      writer.uint32(41).double(message.variance);
    }
    if (message.stddev !== 0) {
      writer.uint32(49).double(message.stddev);
    }
    if (message.skewness !== 0) {
      writer.uint32(57).double(message.skewness);
    }
    if (message.kurtosis !== 0) {
      writer.uint32(65).double(message.kurtosis);
    }
    if (message.sum !== 0) {
      writer.uint32(73).double(message.sum);
    }
    writer.uint32(82).fork();
    for (const v of message.quantiles) {
      writer.double(v);
    }
    writer.join();
    if (message.numZeros !== 0) {
      writer.uint32(88).uint64(message.numZeros);
    }
    if (message.numNegatives !== 0) {
      writer.uint32(96).uint64(message.numNegatives);
    }
    if (message.uniqueCount !== 0) {
      writer.uint32(104).uint64(message.uniqueCount);
    }
    if (message.uniqueRatio !== 0) {
      writer.uint32(113).double(message.uniqueRatio);
    }
    if (message.categorical !== false) {
      writer.uint32(120).bool(message.categorical);
    }
    Object.entries(message.categoricalCount).forEach(([key, value]) => {
      ColumnStatistics_CategoricalCountEntry.encode({ key: key as any, value }, writer.uint32(130).fork()).join();
    });
    if (message.nullCount !== 0) {
      writer.uint32(136).uint64(message.nullCount);
    }
    for (const v of message.nullTypes) {
      writer.uint32(146).string(v!);
    }
    Object.entries(message.dataTypeRepresentation).forEach(([key, value]) => {
      ColumnStatistics_DataTypeRepresentationEntry.encode({ key: key as any, value }, writer.uint32(154).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnStatistics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnStatistics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.min = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.max = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.median = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.mean = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.variance = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.stddev = reader.double();
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.skewness = reader.double();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.kurtosis = reader.double();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.sum = reader.double();
          continue;
        case 10:
          if (tag === 81) {
            message.quantiles.push(reader.double());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.quantiles.push(reader.double());
            }

            continue;
          }

          break;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.numZeros = longToNumber(reader.uint64());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.numNegatives = longToNumber(reader.uint64());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.uniqueCount = longToNumber(reader.uint64());
          continue;
        case 14:
          if (tag !== 113) {
            break;
          }

          message.uniqueRatio = reader.double();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.categorical = reader.bool();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          const entry16 = ColumnStatistics_CategoricalCountEntry.decode(reader, reader.uint32());
          if (entry16.value !== undefined) {
            message.categoricalCount[entry16.key] = entry16.value;
          }
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.nullCount = longToNumber(reader.uint64());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.nullTypes.push(reader.string());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          const entry19 = ColumnStatistics_DataTypeRepresentationEntry.decode(reader, reader.uint32());
          if (entry19.value !== undefined) {
            message.dataTypeRepresentation[entry19.key] = entry19.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnStatistics {
    return {
      min: isSet(object.min) ? globalThis.Number(object.min) : 0,
      max: isSet(object.max) ? globalThis.Number(object.max) : 0,
      median: isSet(object.median) ? globalThis.Number(object.median) : 0,
      mean: isSet(object.mean) ? globalThis.Number(object.mean) : 0,
      variance: isSet(object.variance) ? globalThis.Number(object.variance) : 0,
      stddev: isSet(object.stddev) ? globalThis.Number(object.stddev) : 0,
      skewness: isSet(object.skewness) ? globalThis.Number(object.skewness) : 0,
      kurtosis: isSet(object.kurtosis) ? globalThis.Number(object.kurtosis) : 0,
      sum: isSet(object.sum) ? globalThis.Number(object.sum) : 0,
      quantiles: globalThis.Array.isArray(object?.quantiles)
        ? object.quantiles.map((e: any) => globalThis.Number(e))
        : [],
      numZeros: isSet(object.numZeros) ? globalThis.Number(object.numZeros) : 0,
      numNegatives: isSet(object.numNegatives) ? globalThis.Number(object.numNegatives) : 0,
      uniqueCount: isSet(object.uniqueCount) ? globalThis.Number(object.uniqueCount) : 0,
      uniqueRatio: isSet(object.uniqueRatio) ? globalThis.Number(object.uniqueRatio) : 0,
      categorical: isSet(object.categorical) ? globalThis.Boolean(object.categorical) : false,
      categoricalCount: isObject(object.categoricalCount)
        ? Object.entries(object.categoricalCount).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      nullCount: isSet(object.nullCount) ? globalThis.Number(object.nullCount) : 0,
      nullTypes: globalThis.Array.isArray(object?.nullTypes)
        ? object.nullTypes.map((e: any) => globalThis.String(e))
        : [],
      dataTypeRepresentation: isObject(object.dataTypeRepresentation)
        ? Object.entries(object.dataTypeRepresentation).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ColumnStatistics): unknown {
    const obj: any = {};
    if (message.min !== 0) {
      obj.min = message.min;
    }
    if (message.max !== 0) {
      obj.max = message.max;
    }
    if (message.median !== 0) {
      obj.median = message.median;
    }
    if (message.mean !== 0) {
      obj.mean = message.mean;
    }
    if (message.variance !== 0) {
      obj.variance = message.variance;
    }
    if (message.stddev !== 0) {
      obj.stddev = message.stddev;
    }
    if (message.skewness !== 0) {
      obj.skewness = message.skewness;
    }
    if (message.kurtosis !== 0) {
      obj.kurtosis = message.kurtosis;
    }
    if (message.sum !== 0) {
      obj.sum = message.sum;
    }
    if (message.quantiles?.length) {
      obj.quantiles = message.quantiles;
    }
    if (message.numZeros !== 0) {
      obj.numZeros = Math.round(message.numZeros);
    }
    if (message.numNegatives !== 0) {
      obj.numNegatives = Math.round(message.numNegatives);
    }
    if (message.uniqueCount !== 0) {
      obj.uniqueCount = Math.round(message.uniqueCount);
    }
    if (message.uniqueRatio !== 0) {
      obj.uniqueRatio = message.uniqueRatio;
    }
    if (message.categorical !== false) {
      obj.categorical = message.categorical;
    }
    if (message.categoricalCount) {
      const entries = Object.entries(message.categoricalCount);
      if (entries.length > 0) {
        obj.categoricalCount = {};
        entries.forEach(([k, v]) => {
          obj.categoricalCount[k] = Math.round(v);
        });
      }
    }
    if (message.nullCount !== 0) {
      obj.nullCount = Math.round(message.nullCount);
    }
    if (message.nullTypes?.length) {
      obj.nullTypes = message.nullTypes;
    }
    if (message.dataTypeRepresentation) {
      const entries = Object.entries(message.dataTypeRepresentation);
      if (entries.length > 0) {
        obj.dataTypeRepresentation = {};
        entries.forEach(([k, v]) => {
          obj.dataTypeRepresentation[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ColumnStatistics>, I>>(base?: I): ColumnStatistics {
    return ColumnStatistics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ColumnStatistics>, I>>(object: I): ColumnStatistics {
    const message = createBaseColumnStatistics();
    message.min = object.min ?? 0;
    message.max = object.max ?? 0;
    message.median = object.median ?? 0;
    message.mean = object.mean ?? 0;
    message.variance = object.variance ?? 0;
    message.stddev = object.stddev ?? 0;
    message.skewness = object.skewness ?? 0;
    message.kurtosis = object.kurtosis ?? 0;
    message.sum = object.sum ?? 0;
    message.quantiles = object.quantiles?.map((e) => e) || [];
    message.numZeros = object.numZeros ?? 0;
    message.numNegatives = object.numNegatives ?? 0;
    message.uniqueCount = object.uniqueCount ?? 0;
    message.uniqueRatio = object.uniqueRatio ?? 0;
    message.categorical = object.categorical ?? false;
    message.categoricalCount = Object.entries(object.categoricalCount ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.nullCount = object.nullCount ?? 0;
    message.nullTypes = object.nullTypes?.map((e) => e) || [];
    message.dataTypeRepresentation = Object.entries(object.dataTypeRepresentation ?? {}).reduce<
      { [key: string]: number }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseColumnStatistics_CategoricalCountEntry(): ColumnStatistics_CategoricalCountEntry {
  return { key: "", value: 0 };
}

export const ColumnStatistics_CategoricalCountEntry: MessageFns<ColumnStatistics_CategoricalCountEntry> = {
  encode(message: ColumnStatistics_CategoricalCountEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnStatistics_CategoricalCountEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnStatistics_CategoricalCountEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnStatistics_CategoricalCountEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: ColumnStatistics_CategoricalCountEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ColumnStatistics_CategoricalCountEntry>, I>>(
    base?: I,
  ): ColumnStatistics_CategoricalCountEntry {
    return ColumnStatistics_CategoricalCountEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ColumnStatistics_CategoricalCountEntry>, I>>(
    object: I,
  ): ColumnStatistics_CategoricalCountEntry {
    const message = createBaseColumnStatistics_CategoricalCountEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseColumnStatistics_DataTypeRepresentationEntry(): ColumnStatistics_DataTypeRepresentationEntry {
  return { key: "", value: 0 };
}

export const ColumnStatistics_DataTypeRepresentationEntry: MessageFns<ColumnStatistics_DataTypeRepresentationEntry> = {
  encode(
    message: ColumnStatistics_DataTypeRepresentationEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnStatistics_DataTypeRepresentationEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnStatistics_DataTypeRepresentationEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnStatistics_DataTypeRepresentationEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: ColumnStatistics_DataTypeRepresentationEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ColumnStatistics_DataTypeRepresentationEntry>, I>>(
    base?: I,
  ): ColumnStatistics_DataTypeRepresentationEntry {
    return ColumnStatistics_DataTypeRepresentationEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ColumnStatistics_DataTypeRepresentationEntry>, I>>(
    object: I,
  ): ColumnStatistics_DataTypeRepresentationEntry {
    const message = createBaseColumnStatistics_DataTypeRepresentationEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseColumnProfile(): ColumnProfile {
  return {
    columnName: "",
    dataType: "",
    dataLabel: "",
    categorical: false,
    order: "",
    samples: [],
    statistics: undefined,
  };
}

export const ColumnProfile: MessageFns<ColumnProfile> = {
  encode(message: ColumnProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.columnName !== "") {
      writer.uint32(10).string(message.columnName);
    }
    if (message.dataType !== "") {
      writer.uint32(18).string(message.dataType);
    }
    if (message.dataLabel !== "") {
      writer.uint32(26).string(message.dataLabel);
    }
    if (message.categorical !== false) {
      writer.uint32(32).bool(message.categorical);
    }
    if (message.order !== "") {
      writer.uint32(42).string(message.order);
    }
    for (const v of message.samples) {
      writer.uint32(50).string(v!);
    }
    if (message.statistics !== undefined) {
      ColumnStatistics.encode(message.statistics, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.columnName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataLabel = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.categorical = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.order = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.samples.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.statistics = ColumnStatistics.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnProfile {
    return {
      columnName: isSet(object.columnName) ? globalThis.String(object.columnName) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
      dataLabel: isSet(object.dataLabel) ? globalThis.String(object.dataLabel) : "",
      categorical: isSet(object.categorical) ? globalThis.Boolean(object.categorical) : false,
      order: isSet(object.order) ? globalThis.String(object.order) : "",
      samples: globalThis.Array.isArray(object?.samples) ? object.samples.map((e: any) => globalThis.String(e)) : [],
      statistics: isSet(object.statistics) ? ColumnStatistics.fromJSON(object.statistics) : undefined,
    };
  },

  toJSON(message: ColumnProfile): unknown {
    const obj: any = {};
    if (message.columnName !== "") {
      obj.columnName = message.columnName;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    if (message.dataLabel !== "") {
      obj.dataLabel = message.dataLabel;
    }
    if (message.categorical !== false) {
      obj.categorical = message.categorical;
    }
    if (message.order !== "") {
      obj.order = message.order;
    }
    if (message.samples?.length) {
      obj.samples = message.samples;
    }
    if (message.statistics !== undefined) {
      obj.statistics = ColumnStatistics.toJSON(message.statistics);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ColumnProfile>, I>>(base?: I): ColumnProfile {
    return ColumnProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ColumnProfile>, I>>(object: I): ColumnProfile {
    const message = createBaseColumnProfile();
    message.columnName = object.columnName ?? "";
    message.dataType = object.dataType ?? "";
    message.dataLabel = object.dataLabel ?? "";
    message.categorical = object.categorical ?? false;
    message.order = object.order ?? "";
    message.samples = object.samples?.map((e) => e) || [];
    message.statistics = (object.statistics !== undefined && object.statistics !== null)
      ? ColumnStatistics.fromPartial(object.statistics)
      : undefined;
    return message;
  },
};

function createBaseTableProfile(): TableProfile {
  return { globalProfile: undefined, columnProfiles: [] };
}

export const TableProfile: MessageFns<TableProfile> = {
  encode(message: TableProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalProfile !== undefined) {
      GlobalProfile.encode(message.globalProfile, writer.uint32(10).fork()).join();
    }
    for (const v of message.columnProfiles) {
      ColumnProfile.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.globalProfile = GlobalProfile.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.columnProfiles.push(ColumnProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableProfile {
    return {
      globalProfile: isSet(object.globalProfile) ? GlobalProfile.fromJSON(object.globalProfile) : undefined,
      columnProfiles: globalThis.Array.isArray(object?.columnProfiles)
        ? object.columnProfiles.map((e: any) => ColumnProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TableProfile): unknown {
    const obj: any = {};
    if (message.globalProfile !== undefined) {
      obj.globalProfile = GlobalProfile.toJSON(message.globalProfile);
    }
    if (message.columnProfiles?.length) {
      obj.columnProfiles = message.columnProfiles.map((e) => ColumnProfile.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TableProfile>, I>>(base?: I): TableProfile {
    return TableProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TableProfile>, I>>(object: I): TableProfile {
    const message = createBaseTableProfile();
    message.globalProfile = (object.globalProfile !== undefined && object.globalProfile !== null)
      ? GlobalProfile.fromPartial(object.globalProfile)
      : undefined;
    message.columnProfiles = object.columnProfiles?.map((e) => ColumnProfile.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
