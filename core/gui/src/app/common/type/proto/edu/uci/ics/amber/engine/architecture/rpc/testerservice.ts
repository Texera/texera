// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.3
// source: edu/uci/ics/amber/engine/architecture/rpc/testerservice.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import {
  Chain,
  Collect,
  ErrorCommand,
  GenerateNumber,
  MultiCall,
  Nested,
  Pass,
  Ping,
  Pong,
  Recursion,
} from "./controlcommands";
import { IntResponse, StringResponse } from "./controlreturns";

export const protobufPackage = "edu.uci.ics.amber.engine.architecture.rpc";

export interface RPCTester {
  SendPing(request: Ping): Promise<IntResponse>;
  SendPong(request: Pong): Promise<IntResponse>;
  SendNested(request: Nested): Promise<StringResponse>;
  SendPass(request: Pass): Promise<StringResponse>;
  SendErrorCommand(request: ErrorCommand): Promise<StringResponse>;
  SendRecursion(request: Recursion): Promise<StringResponse>;
  SendCollect(request: Collect): Promise<StringResponse>;
  SendGenerateNumber(request: GenerateNumber): Promise<IntResponse>;
  SendMultiCall(request: MultiCall): Promise<StringResponse>;
  SendChain(request: Chain): Promise<StringResponse>;
}

export const RPCTesterServiceName = "edu.uci.ics.amber.engine.architecture.rpc.RPCTester";
export class RPCTesterClientImpl implements RPCTester {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RPCTesterServiceName;
    this.rpc = rpc;
    this.SendPing = this.SendPing.bind(this);
    this.SendPong = this.SendPong.bind(this);
    this.SendNested = this.SendNested.bind(this);
    this.SendPass = this.SendPass.bind(this);
    this.SendErrorCommand = this.SendErrorCommand.bind(this);
    this.SendRecursion = this.SendRecursion.bind(this);
    this.SendCollect = this.SendCollect.bind(this);
    this.SendGenerateNumber = this.SendGenerateNumber.bind(this);
    this.SendMultiCall = this.SendMultiCall.bind(this);
    this.SendChain = this.SendChain.bind(this);
  }
  SendPing(request: Ping): Promise<IntResponse> {
    const data = Ping.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendPing", data);
    return promise.then((data) => IntResponse.decode(new BinaryReader(data)));
  }

  SendPong(request: Pong): Promise<IntResponse> {
    const data = Pong.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendPong", data);
    return promise.then((data) => IntResponse.decode(new BinaryReader(data)));
  }

  SendNested(request: Nested): Promise<StringResponse> {
    const data = Nested.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendNested", data);
    return promise.then((data) => StringResponse.decode(new BinaryReader(data)));
  }

  SendPass(request: Pass): Promise<StringResponse> {
    const data = Pass.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendPass", data);
    return promise.then((data) => StringResponse.decode(new BinaryReader(data)));
  }

  SendErrorCommand(request: ErrorCommand): Promise<StringResponse> {
    const data = ErrorCommand.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendErrorCommand", data);
    return promise.then((data) => StringResponse.decode(new BinaryReader(data)));
  }

  SendRecursion(request: Recursion): Promise<StringResponse> {
    const data = Recursion.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendRecursion", data);
    return promise.then((data) => StringResponse.decode(new BinaryReader(data)));
  }

  SendCollect(request: Collect): Promise<StringResponse> {
    const data = Collect.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendCollect", data);
    return promise.then((data) => StringResponse.decode(new BinaryReader(data)));
  }

  SendGenerateNumber(request: GenerateNumber): Promise<IntResponse> {
    const data = GenerateNumber.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendGenerateNumber", data);
    return promise.then((data) => IntResponse.decode(new BinaryReader(data)));
  }

  SendMultiCall(request: MultiCall): Promise<StringResponse> {
    const data = MultiCall.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendMultiCall", data);
    return promise.then((data) => StringResponse.decode(new BinaryReader(data)));
  }

  SendChain(request: Chain): Promise<StringResponse> {
    const data = Chain.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendChain", data);
    return promise.then((data) => StringResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
